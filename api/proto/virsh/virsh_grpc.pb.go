// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: virsh.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SlaveVirshService_GetCpuFeatures_FullMethodName = "/virsh.SlaveVirshService/GetCpuFeatures"
)

// SlaveVirshServiceClient is the client API for SlaveVirshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlaveVirshServiceClient interface {
	GetCpuFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCpuFeaturesResponse, error)
}

type slaveVirshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveVirshServiceClient(cc grpc.ClientConnInterface) SlaveVirshServiceClient {
	return &slaveVirshServiceClient{cc}
}

func (c *slaveVirshServiceClient) GetCpuFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCpuFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCpuFeaturesResponse)
	err := c.cc.Invoke(ctx, SlaveVirshService_GetCpuFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveVirshServiceServer is the server API for SlaveVirshService service.
// All implementations must embed UnimplementedSlaveVirshServiceServer
// for forward compatibility
type SlaveVirshServiceServer interface {
	GetCpuFeatures(context.Context, *Empty) (*GetCpuFeaturesResponse, error)
	mustEmbedUnimplementedSlaveVirshServiceServer()
}

// UnimplementedSlaveVirshServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSlaveVirshServiceServer struct {
}

func (UnimplementedSlaveVirshServiceServer) GetCpuFeatures(context.Context, *Empty) (*GetCpuFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpuFeatures not implemented")
}
func (UnimplementedSlaveVirshServiceServer) mustEmbedUnimplementedSlaveVirshServiceServer() {}

// UnsafeSlaveVirshServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlaveVirshServiceServer will
// result in compilation errors.
type UnsafeSlaveVirshServiceServer interface {
	mustEmbedUnimplementedSlaveVirshServiceServer()
}

func RegisterSlaveVirshServiceServer(s grpc.ServiceRegistrar, srv SlaveVirshServiceServer) {
	s.RegisterService(&SlaveVirshService_ServiceDesc, srv)
}

func _SlaveVirshService_GetCpuFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveVirshServiceServer).GetCpuFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveVirshService_GetCpuFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveVirshServiceServer).GetCpuFeatures(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SlaveVirshService_ServiceDesc is the grpc.ServiceDesc for SlaveVirshService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlaveVirshService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virsh.SlaveVirshService",
	HandlerType: (*SlaveVirshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpuFeatures",
			Handler:    _SlaveVirshService_GetCpuFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virsh.proto",
}
