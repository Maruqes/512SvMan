// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: nfs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NFSService_CreateSharedFolder_FullMethodName = "/nfs.NFSService/CreateSharedFolder"
	NFSService_MountFolder_FullMethodName        = "/nfs.NFSService/MountFolder"
	NFSService_UnmountFolder_FullMethodName      = "/nfs.NFSService/UnmountFolder"
)

// NFSServiceClient is the client API for NFSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFSServiceClient interface {
	CreateSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error)
	MountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*MountResponse, error)
	UnmountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*UnmountResponse, error)
}

type nFSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFSServiceClient(cc grpc.ClientConnInterface) NFSServiceClient {
	return &nFSServiceClient{cc}
}

func (c *nFSServiceClient) CreateSharedFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, NFSService_CreateSharedFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) MountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*MountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, NFSService_MountFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSServiceClient) UnmountFolder(ctx context.Context, in *FolderMount, opts ...grpc.CallOption) (*UnmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, NFSService_UnmountFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFSServiceServer is the server API for NFSService service.
// All implementations must embed UnimplementedNFSServiceServer
// for forward compatibility.
type NFSServiceServer interface {
	CreateSharedFolder(context.Context, *FolderMount) (*CreateResponse, error)
	MountFolder(context.Context, *FolderMount) (*MountResponse, error)
	UnmountFolder(context.Context, *FolderMount) (*UnmountResponse, error)
	mustEmbedUnimplementedNFSServiceServer()
}

// UnimplementedNFSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNFSServiceServer struct{}

func (UnimplementedNFSServiceServer) CreateSharedFolder(context.Context, *FolderMount) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedFolder not implemented")
}
func (UnimplementedNFSServiceServer) MountFolder(context.Context, *FolderMount) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountFolder not implemented")
}
func (UnimplementedNFSServiceServer) UnmountFolder(context.Context, *FolderMount) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmountFolder not implemented")
}
func (UnimplementedNFSServiceServer) mustEmbedUnimplementedNFSServiceServer() {}
func (UnimplementedNFSServiceServer) testEmbeddedByValue()                    {}

// UnsafeNFSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFSServiceServer will
// result in compilation errors.
type UnsafeNFSServiceServer interface {
	mustEmbedUnimplementedNFSServiceServer()
}

func RegisterNFSServiceServer(s grpc.ServiceRegistrar, srv NFSServiceServer) {
	// If the following call pancis, it indicates UnimplementedNFSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NFSService_ServiceDesc, srv)
}

func _NFSService_CreateSharedFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).CreateSharedFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_CreateSharedFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).CreateSharedFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_MountFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).MountFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_MountFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).MountFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFSService_UnmountFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServiceServer).UnmountFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFSService_UnmountFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServiceServer).UnmountFolder(ctx, req.(*FolderMount))
	}
	return interceptor(ctx, in, info, handler)
}

// NFSService_ServiceDesc is the grpc.ServiceDesc for NFSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nfs.NFSService",
	HandlerType: (*NFSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSharedFolder",
			Handler:    _NFSService_CreateSharedFolder_Handler,
		},
		{
			MethodName: "MountFolder",
			Handler:    _NFSService_MountFolder_Handler,
		},
		{
			MethodName: "UnmountFolder",
			Handler:    _NFSService_UnmountFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfs.proto",
}
