---
- name: Adjust Gluster volume replica and bricks
  hosts: gluster_nodes
  become: true
  collections:
    - ansible.builtin
    - gluster.gluster
  vars:
    primary_node: "{{ groups['gluster_nodes'][0] }}"
    desired_brick_paths: "{{ new_gluster_bricks | default(gluster_bricks) }}"
  pre_tasks:
    - name: Validate requested replica and brick inputs
      ansible.builtin.assert:
        that:
          - new_replica_count is defined
          - new_replica_count | int > 0
          - desired_brick_paths | length > 0
          - (desired_brick_paths | type_debug) in ['list', 'tuple', 'AnsibleSequence']
        fail_msg: >-
          Provide new_replica_count (>0) and ensure gluster_bricks/new_gluster_bricks
          is a list of brick paths per node.

    - name: Ensure brick directories exist on every node
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop: "{{ desired_brick_paths }}"

  tasks:
    - name: Initialise brick topology facts
      ansible.builtin.set_fact:
        target_bricks: []
      run_once: true
      delegate_to: "{{ primary_node }}"
      delegate_facts: true

    - name: Build desired brick endpoints
      ansible.builtin.set_fact:
        target_bricks: "{{ target_bricks + [
          (hostvars[item.0].gluster_peer_address
            | default(hostvars[item.0].ansible_host)
            | default(item.0)
          ) ~ ':' ~ item.1
        ] }}"
      loop: "{{ groups['gluster_nodes'] | product(desired_brick_paths) | list }}"
      run_once: true
      delegate_to: "{{ primary_node }}"
      delegate_facts: true

    - name: Normalise brick list for module usage
      ansible.builtin.set_fact:
        target_bricks: "{{ target_bricks | to_json | from_json }}"
      run_once: true
      delegate_to: "{{ primary_node }}"
      delegate_facts: true

    - name: Apply replica change with rebalance
      gluster.gluster.gluster_volume:
        state: present
        name: "{{ gluster_volume_name }}"
        bricks: "{{ hostvars[primary_node].target_bricks }}"
        replicas: "{{ new_replica_count | int }}"
        rebalance: true
      run_once: true
      delegate_to: "{{ primary_node }}"

    - name: Ensure volume is started after change
      gluster.gluster.gluster_volume:
        state: started
        name: "{{ gluster_volume_name }}"
      run_once: true
      delegate_to: "{{ primary_node }}"

    - name: Capture rebalance status
      ansible.builtin.command:
        argv:
          - gluster
          - --mode=script
          - volume
          - rebalance
          - "{{ gluster_volume_name }}"
          - status
      register: rebalance_status
      changed_when: false
      run_once: true
      delegate_to: "{{ primary_node }}"

    - name: Gather volume info for verification
      ansible.builtin.command:
        argv:
          - gluster
          - --mode=script
          - volume
          - info
          - "{{ gluster_volume_name }}"
      register: volume_info
      changed_when: false
      run_once: true
      delegate_to: "{{ primary_node }}"

    - name: Gather volume status for verification
      ansible.builtin.command:
        argv:
          - gluster
          - --mode=script
          - volume
          - status
          - "{{ gluster_volume_name }}"
      register: volume_status
      changed_when: false
      run_once: true
      delegate_to: "{{ primary_node }}"

    - name: Verify replica count reflected in volume info
      vars:
        replica_pattern: "{{ '(?im)replica(?:\\s*count)?\\s*[:=]?\\s*' ~ (new_replica_count | int) }}"
      ansible.builtin.assert:
        that:
          - "(volume_info.stdout | regex_search(replica_pattern)) is not none"
        fail_msg: >-
          Replica count not updated. Inspect `gluster volume info {{ gluster_volume_name }}`.
      run_once: true

    - name: Verify expected bricks are present
      ansible.builtin.assert:
        that: "{{ item in volume_info.stdout }}"
        fail_msg: "Expected brick {{ item }} missing from volume info."
      loop: "{{ hostvars[primary_node].target_bricks }}"
      run_once: true

    - name: Show verification summary
      ansible.builtin.debug:
        msg:
          - "Replica count set to {{ new_replica_count | int }}"
          - "Bricks applied: {{ hostvars[primary_node].target_bricks }}"
          - "Rebalance status:\n{{ rebalance_status.stdout }}"
          - "Volume status:\n{{ volume_status.stdout }}"
      run_once: true
