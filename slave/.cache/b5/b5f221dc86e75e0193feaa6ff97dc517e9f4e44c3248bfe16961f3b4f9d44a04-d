// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/network.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"fmt"
	"reflect"
	"time"
	"unsafe"
)

type IPAddrType int

const (
	IP_ADDR_TYPE_IPV4 = IPAddrType(( /*line :48:33*/_Ciconst_VIR_IP_ADDR_TYPE_IPV4 /*line :48:55*/))
	IP_ADDR_TYPE_IPV6 = IPAddrType(( /*line :49:33*/_Ciconst_VIR_IP_ADDR_TYPE_IPV6 /*line :49:55*/))
)

type NetworkXMLFlags uint

const (
	NETWORK_XML_INACTIVE = NetworkXMLFlags(( /*line :55:41*/_Ciconst_VIR_NETWORK_XML_INACTIVE /*line :55:66*/))
)

type NetworkCreateFlags uint

const (
	NETWORK_CREATE_VALIDATE = NetworkCreateFlags(( /*line :61:47*/_Ciconst_VIR_NETWORK_CREATE_VALIDATE /*line :61:75*/))
)

type NetworkDefineFlags uint

const (
	NETWORK_DEFINE_VALIDATE = NetworkDefineFlags(( /*line :67:47*/_Ciconst_VIR_NETWORK_DEFINE_VALIDATE /*line :67:75*/))
)

type NetworkUpdateCommand int

const (
	NETWORK_UPDATE_COMMAND_NONE      = NetworkUpdateCommand(( /*line :73:58*/_Ciconst_VIR_NETWORK_UPDATE_COMMAND_NONE /*line :73:90*/))
	NETWORK_UPDATE_COMMAND_MODIFY    = NetworkUpdateCommand(( /*line :74:58*/_Ciconst_VIR_NETWORK_UPDATE_COMMAND_MODIFY /*line :74:92*/))
	NETWORK_UPDATE_COMMAND_DELETE    = NetworkUpdateCommand(( /*line :75:58*/_Ciconst_VIR_NETWORK_UPDATE_COMMAND_DELETE /*line :75:92*/))
	NETWORK_UPDATE_COMMAND_ADD_LAST  = NetworkUpdateCommand(( /*line :76:58*/_Ciconst_VIR_NETWORK_UPDATE_COMMAND_ADD_LAST /*line :76:94*/))
	NETWORK_UPDATE_COMMAND_ADD_FIRST = NetworkUpdateCommand(( /*line :77:58*/_Ciconst_VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST /*line :77:95*/))
)

type NetworkUpdateSection int

const (
	NETWORK_SECTION_NONE              = NetworkUpdateSection(( /*line :83:59*/_Ciconst_VIR_NETWORK_SECTION_NONE /*line :83:84*/))
	NETWORK_SECTION_BRIDGE            = NetworkUpdateSection(( /*line :84:59*/_Ciconst_VIR_NETWORK_SECTION_BRIDGE /*line :84:86*/))
	NETWORK_SECTION_DOMAIN            = NetworkUpdateSection(( /*line :85:59*/_Ciconst_VIR_NETWORK_SECTION_DOMAIN /*line :85:86*/))
	NETWORK_SECTION_IP                = NetworkUpdateSection(( /*line :86:59*/_Ciconst_VIR_NETWORK_SECTION_IP /*line :86:82*/))
	NETWORK_SECTION_IP_DHCP_HOST      = NetworkUpdateSection(( /*line :87:59*/_Ciconst_VIR_NETWORK_SECTION_IP_DHCP_HOST /*line :87:92*/))
	NETWORK_SECTION_IP_DHCP_RANGE     = NetworkUpdateSection(( /*line :88:59*/_Ciconst_VIR_NETWORK_SECTION_IP_DHCP_RANGE /*line :88:93*/))
	NETWORK_SECTION_FORWARD           = NetworkUpdateSection(( /*line :89:59*/_Ciconst_VIR_NETWORK_SECTION_FORWARD /*line :89:87*/))
	NETWORK_SECTION_FORWARD_INTERFACE = NetworkUpdateSection(( /*line :90:59*/_Ciconst_VIR_NETWORK_SECTION_FORWARD_INTERFACE /*line :90:97*/))
	NETWORK_SECTION_FORWARD_PF        = NetworkUpdateSection(( /*line :91:59*/_Ciconst_VIR_NETWORK_SECTION_FORWARD_PF /*line :91:90*/))
	NETWORK_SECTION_PORTGROUP         = NetworkUpdateSection(( /*line :92:59*/_Ciconst_VIR_NETWORK_SECTION_PORTGROUP /*line :92:89*/))
	NETWORK_SECTION_DNS_HOST          = NetworkUpdateSection(( /*line :93:59*/_Ciconst_VIR_NETWORK_SECTION_DNS_HOST /*line :93:88*/))
	NETWORK_SECTION_DNS_TXT           = NetworkUpdateSection(( /*line :94:59*/_Ciconst_VIR_NETWORK_SECTION_DNS_TXT /*line :94:87*/))
	NETWORK_SECTION_DNS_SRV           = NetworkUpdateSection(( /*line :95:59*/_Ciconst_VIR_NETWORK_SECTION_DNS_SRV /*line :95:87*/))
)

type NetworkUpdateFlags uint

const (
	NETWORK_UPDATE_AFFECT_CURRENT = NetworkUpdateFlags(( /*line :101:53*/_Ciconst_VIR_NETWORK_UPDATE_AFFECT_CURRENT /*line :101:87*/))
	NETWORK_UPDATE_AFFECT_LIVE    = NetworkUpdateFlags(( /*line :102:53*/_Ciconst_VIR_NETWORK_UPDATE_AFFECT_LIVE /*line :102:84*/))
	NETWORK_UPDATE_AFFECT_CONFIG  = NetworkUpdateFlags(( /*line :103:53*/_Ciconst_VIR_NETWORK_UPDATE_AFFECT_CONFIG /*line :103:86*/))
)

type NetworkEventLifecycleType int

const (
	NETWORK_EVENT_DEFINED   = NetworkEventLifecycleType(( /*line :109:54*/_Ciconst_VIR_NETWORK_EVENT_DEFINED /*line :109:80*/))
	NETWORK_EVENT_UNDEFINED = NetworkEventLifecycleType(( /*line :110:54*/_Ciconst_VIR_NETWORK_EVENT_UNDEFINED /*line :110:82*/))
	NETWORK_EVENT_STARTED   = NetworkEventLifecycleType(( /*line :111:54*/_Ciconst_VIR_NETWORK_EVENT_STARTED /*line :111:80*/))
	NETWORK_EVENT_STOPPED   = NetworkEventLifecycleType(( /*line :112:54*/_Ciconst_VIR_NETWORK_EVENT_STOPPED /*line :112:80*/))
)

type NetworkEventID int

const (
	NETWORK_EVENT_ID_LIFECYCLE       = NetworkEventID(( /*line :118:52*/_Ciconst_VIR_NETWORK_EVENT_ID_LIFECYCLE /*line :118:83*/))
	NETWORK_EVENT_ID_METADATA_CHANGE = NetworkEventID(( /*line :119:52*/_Ciconst_VIR_NETWORK_EVENT_ID_METADATA_CHANGE /*line :119:89*/))
)

type NetworkMetadataType int

const (
	NETWORK_METADATA_DESCRIPTION = NetworkMetadataType(( /*line :125:53*/_Ciconst_VIR_NETWORK_METADATA_DESCRIPTION /*line :125:86*/))
	NETWORK_METADATA_TITLE       = NetworkMetadataType(( /*line :126:53*/_Ciconst_VIR_NETWORK_METADATA_TITLE /*line :126:80*/))
	NETWORK_METADATA_ELEMENT     = NetworkMetadataType(( /*line :127:53*/_Ciconst_VIR_NETWORK_METADATA_ELEMENT /*line :127:82*/))
)

type Network struct {
	ptr  /*line :131:6*/_Ctype_virNetworkPtr /*line :131:21*/
}

type NetworkDHCPLease struct {
	Iface      string
	ExpiryTime time.Time
	Type       IPAddrType
	Mac        string
	Iaid       string
	IPaddr     string
	Prefix     uint
	Hostname   string
	Clientid   string
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkFree
func (n *Network) Free() error {
	var err  /*line :148:10*/_Ctype_virError /*line :148:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :149:33*/n.ptr; _cgoBase1 := /*line :149:40*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :149:45*/_Cfunc_virNetworkFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkRef
func (c *Network) Ref() error {
	var err  /*line :158:10*/_Ctype_virError /*line :158:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :159:32*/c.ptr; _cgoBase1 := /*line :159:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :159:44*/_Cfunc_virNetworkRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkCreate
func (n *Network) Create() error {
	var err  /*line :168:10*/_Ctype_virError /*line :168:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :169:38*/n.ptr; _cgoBase1 := /*line :169:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :169:50*/_Cfunc_virNetworkCreateWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkDestroy
func (n *Network) Destroy() error {
	var err  /*line :178:10*/_Ctype_virError /*line :178:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :179:39*/n.ptr; _cgoBase1 := /*line :179:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :179:51*/_Cfunc_virNetworkDestroyWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkIsActive
func (n *Network) IsActive() (bool, error) {
	var err  /*line :188:10*/_Ctype_virError /*line :188:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :189:40*/n.ptr; _cgoBase1 := /*line :189:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :189:52*/_Cfunc_virNetworkIsActiveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkIsPersistent
func (n *Network) IsPersistent() (bool, error) {
	var err  /*line :201:10*/_Ctype_virError /*line :201:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :202:44*/n.ptr; _cgoBase1 := /*line :202:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :202:56*/_Cfunc_virNetworkIsPersistentWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetAutostart
func (n *Network) GetAutostart() (bool, error) {
	var out  /*line :214:10*/_Ctype_int /*line :214:15*/
	var err  /*line :215:10*/_Ctype_virError /*line :215:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :216:44*/n.ptr; var _cgo1 *_Ctype_int = /*line :216:51*/(*_Ctype_int /*line :216:58*/)(unsafe.Pointer(&out)); _cgoBase2 := /*line :216:83*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :216:88*/_Cfunc_virNetworkGetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	switch out {
	case 1:
		return true, nil
	default:
		return false, nil
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkSetAutostart
func (n *Network) SetAutostart(autostart bool) error {
	var cAutostart  /*line :230:17*/_Ctype_int /*line :230:22*/
	switch autostart {
	case true:
		cAutostart = 1
	default:
		cAutostart = 0
	}
	var err  /*line :237:10*/_Ctype_virError /*line :237:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :238:44*/n.ptr; var _cgo1 _Ctype_int = /*line :238:51*/cAutostart; _cgoBase2 := /*line :238:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :238:68*/_Cfunc_virNetworkSetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetName
func (n *Network) GetName() (string, error) {
	var err  /*line :247:10*/_Ctype_virError /*line :247:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :248:37*/n.ptr; _cgoBase1 := /*line :248:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :248:49*/_Cfunc_virNetworkGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :252:9*/_Cfunc_GoString /*line :252:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetUUID
func (n *Network) GetUUID() ([]byte, error) {
	var cUuid [( /*line :257:13*/_Ciconst_VIR_UUID_BUFLEN /*line :257:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :259:10*/_Ctype_virError /*line :259:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :260:39*/n.ptr; var _cgo1 *_Ctype_uchar = /*line :260:46*/(*_Ctype_uchar /*line :260:55*/)(cuidPtr); _cgoBase2 := /*line :260:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :260:72*/_Cfunc_virNetworkGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :264:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :264:28*/_Ciconst_VIR_UUID_BUFLEN /*line :264:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :264:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetUUIDString
func (n *Network) GetUUIDString() (string, error) {
	var cUuid [( /*line :269:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :269:36*/)]( /*line :269:39*/_Ctype_char /*line :269:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :271:10*/_Ctype_virError /*line :271:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :272:45*/n.ptr; var _cgo1 *_Ctype_char = /*line :272:52*/(*_Ctype_char /*line :272:60*/)(cuidPtr); _cgoBase2 := /*line :272:72*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :272:77*/_Cfunc_virNetworkGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :276:9*/_Cfunc_GoString /*line :276:18*/)((* /*line :276:22*/_Ctype_char /*line :276:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetBridgeName
func (n *Network) GetBridgeName() (string, error) {
	var err  /*line :281:10*/_Ctype_virError /*line :281:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :282:45*/n.ptr; _cgoBase1 := /*line :282:52*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :282:57*/_Cfunc_virNetworkGetBridgeNameWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	bridge := ( /*line :286:12*/_Cfunc_GoString /*line :286:21*/)(result)
	func() { _cgo0 := /*line :287:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :287:32*/_Cfunc_free(_cgo0); }()
	return bridge, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetXMLDesc
func (n *Network) GetXMLDesc(flags NetworkXMLFlags) (string, error) {
	var err  /*line :293:10*/_Ctype_virError /*line :293:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :294:42*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :294:55*/(flags); _cgoBase2 := /*line :294:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :294:69*/_Cfunc_virNetworkGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :298:9*/_Cfunc_GoString /*line :298:18*/)(result)
	func() { _cgo0 := /*line :299:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :299:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkUndefine
func (n *Network) Undefine() error {
	var err  /*line :305:10*/_Ctype_virError /*line :305:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :306:40*/n.ptr; _cgoBase1 := /*line :306:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :306:52*/_Cfunc_virNetworkUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkUpdate
func (n *Network) Update(cmd NetworkUpdateCommand, section NetworkUpdateSection, parentIndex int, xml string, flags NetworkUpdateFlags) error {
	cxml := ( /*line :315:10*/_Cfunc_CString /*line :315:18*/)(xml)
	defer func() func() { _cgo0 := /*line :316:15*/unsafe.Pointer(cxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :316:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :317:10*/_Ctype_virError /*line :317:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :318:38*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :318:51*/(cmd); var _cgo2 _Ctype_uint = _Ctype_uint /*line :318:64*/(section); var _cgo3 _Ctype_int = _Ctype_int /*line :318:80*/(parentIndex); var _cgo4 *_Ctype_char = /*line :318:95*/cxml; var _cgo5 _Ctype_uint = _Ctype_uint /*line :318:107*/(flags); _cgoBase6 := /*line :318:116*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :318:121*/_Cfunc_virNetworkUpdateWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetDHCPLeases
func (n *Network) GetDHCPLeases() ([]NetworkDHCPLease, error) {
	var cLeases * /*line :327:15*/_Ctype_virNetworkDHCPLeasePtr /*line :327:39*/
	var err  /*line :328:10*/_Ctype_virError /*line :328:20*/
	numLeases := func() _Ctype_int{ _cgo0 := /*line :329:48*/n.ptr; var _cgo1 *_Ctype_char = /*line :329:55*/nil; _cgoBase2 := /*line :329:89*/&cLeases; _cgo2 := /*line :329:60*/(**_Ctype_virNetworkDHCPLeasePtr /*line :329:87*/)(_cgoBase2); var _cgo3 _Ctype_uint = _Ctype_uint /*line :329:106*/(0); _cgoBase4 := /*line :329:111*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :329:116*/_Cfunc_virNetworkGetDHCPLeasesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if numLeases == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cLeases)),
		Len:  int(numLeases),
		Cap:  int(numLeases),
	}
	var leases []NetworkDHCPLease
	slice := *(*[] /*line :339:16*/_Ctype_virNetworkDHCPLeasePtr /*line :339:40*/)(unsafe.Pointer(&hdr))
	for _, clease := range slice {
		leases = append(leases, NetworkDHCPLease{
			Iface:      ( /*line :342:16*/_Cfunc_GoString /*line :342:25*/)(clease.iface),
			ExpiryTime: time.Unix(int64(clease.expirytime), 0),
			Type:       IPAddrType(clease._type),
			Mac:        ( /*line :345:16*/_Cfunc_GoString /*line :345:25*/)(clease.mac),
			Iaid:       ( /*line :346:16*/_Cfunc_GoString /*line :346:25*/)(clease.iaid),
			IPaddr:     ( /*line :347:16*/_Cfunc_GoString /*line :347:25*/)(clease.ipaddr),
			Prefix:     uint(clease.prefix),
			Hostname:   ( /*line :349:16*/_Cfunc_GoString /*line :349:25*/)(clease.hostname),
			Clientid:   ( /*line :350:16*/_Cfunc_GoString /*line :350:25*/)(clease.clientid),
		})
		func() { _cgo0 := /*line :352:36*/clease; _cgoCheckPointer(_cgo0, nil); /*line :352:43*/_Cfunc_virNetworkDHCPLeaseFreeWrapper(_cgo0); }()
	}
	func() { _cgo0 := /*line :354:9*/unsafe.Pointer(cLeases); _cgoCheckPointer(_cgo0, nil); /*line :354:33*/_Cfunc_free(_cgo0); }()
	return leases, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortLookupByUUIDString
func (n *Network) LookupNetworkPortByUUIDString(uuid string) (*NetworkPort, error) {
	cUuid := ( /*line :360:11*/_Cfunc_CString /*line :360:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :361:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :361:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :362:10*/_Ctype_virError /*line :362:20*/
	ptr := func() _Ctype_virNetworkPortPtr{ _cgo0 := /*line :363:51*/n.ptr; var _cgo1 *_Ctype_char = /*line :363:58*/cUuid; _cgoBase2 := /*line :363:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :363:70*/_Cfunc_virNetworkPortLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NetworkPort{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortLookupByUUID
func (n *Network) LookupNetworkPortByUUID(uuid []byte) (*NetworkPort, error) {
	if len(uuid) != ( /*line :372:18*/_Ciconst_VIR_UUID_BUFLEN /*line :372:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :374:8*/_Ciconst_VIR_UUID_BUFLEN /*line :374:24*/)))
	}
	cUuid := make([] /*line :376:18*/_Ctype_uchar /*line :376:25*/, ( /*line :376:27*/_Ciconst_VIR_UUID_BUFLEN /*line :376:43*/))
	for i := 0; i < ( /*line :377:18*/_Ciconst_VIR_UUID_BUFLEN /*line :377:34*/); i++ {
		cUuid[i] =  /*line :378:14*/_Ctype_uchar /*line :378:21*/(uuid[i])
	}
	var err  /*line :380:10*/_Ctype_virError /*line :380:20*/
	ptr := func() _Ctype_virNetworkPortPtr{ _cgo0 := /*line :381:45*/n.ptr; var _cgo1 *_Ctype_uchar = /*line :381:52*/&cUuid[0]; _cgoBase2 := /*line :381:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :381:68*/_Cfunc_virNetworkPortLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NetworkPort{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortCreateXML
func (n *Network) PortCreateXML(xmlConfig string, flags uint32) (*NetworkPort, error) {
	cXml := ( /*line :390:10*/_Cfunc_CString /*line :390:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :391:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :391:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :392:10*/_Ctype_virError /*line :392:20*/
	ptr := func() _Ctype_virNetworkPortPtr{ _cgo0 := /*line :393:42*/n.ptr; var _cgo1 *_Ctype_char = /*line :393:49*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :393:61*/(flags); _cgoBase3 := /*line :393:70*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :393:75*/_Cfunc_virNetworkPortCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NetworkPort{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkListAllPorts
func (n *Network) ListAllPorts(flags uint32) ([]NetworkPort, error) {
	var cList * /*line :402:13*/_Ctype_virNetworkPortPtr /*line :402:32*/
	var err  /*line :403:10*/_Ctype_virError /*line :403:20*/
	numPorts := func() _Ctype_int{ _cgo0 := /*line :404:46*/n.ptr; _cgoBase1 := /*line :404:77*/&cList; _cgo1 := /*line :404:53*/(**_Ctype_virNetworkPortPtr /*line :404:75*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :404:92*/(flags); _cgoBase3 := /*line :404:101*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :404:106*/_Cfunc_virNetworkListAllPortsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numPorts == -1 {
		return []NetworkPort{}, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numPorts),
		Cap:  int(numPorts),
	}
	var ports []NetworkPort
	slice := *(*[] /*line :414:16*/_Ctype_virNetworkPortPtr /*line :414:35*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		ports = append(ports, NetworkPort{ptr})
	}
	func() { _cgo0 := /*line :418:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :418:31*/_Cfunc_free(_cgo0); }()
	return ports, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkGetMetadata
func (n *Network) GetMetadata(metadataType NetworkMetadataType, uri string, flags NetworkUpdateFlags) (string, error) {
	var cUri * /*line :424:12*/_Ctype_char /*line :424:18*/
	if uri != "" {
		cUri = ( /*line :426:10*/_Cfunc_CString /*line :426:18*/)(uri)
		defer func() func() { _cgo0 := /*line :427:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :427:37*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :430:10*/_Ctype_virError /*line :430:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :431:43*/n.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :431:55*/(metadataType); var _cgo2 *_Ctype_char = /*line :431:71*/cUri; var _cgo3 _Ctype_uint = _Ctype_uint /*line :431:83*/(flags); _cgoBase4 := /*line :431:92*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :431:97*/_Cfunc_virNetworkGetMetadataWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == nil {
		return "", makeError(&err)

	}
	defer func() func() { _cgo0 := /*line :436:15*/unsafe.Pointer(result); return func() { _cgoCheckPointer(_cgo0, nil); /*line :436:38*/_Cfunc_free(_cgo0); }}()()
	return ( /*line :437:9*/_Cfunc_GoString /*line :437:18*/)(result), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkSetMetadata
func (n *Network) SetMetadata(metadataType NetworkMetadataType, metaDataCont, uriKey, uri string, flags NetworkUpdateFlags) error {
	var cMetaDataCont * /*line :442:21*/_Ctype_char /*line :442:27*/
	var cUriKey * /*line :443:15*/_Ctype_char /*line :443:21*/
	var cUri * /*line :444:12*/_Ctype_char /*line :444:18*/

	if metaDataCont != "" {
		cMetaDataCont = ( /*line :447:19*/_Cfunc_CString /*line :447:27*/)(metaDataCont)
		defer func() func() { _cgo0 := /*line :448:16*/unsafe.Pointer(cMetaDataCont); return func() { _cgoCheckPointer(_cgo0, nil); /*line :448:46*/_Cfunc_free(_cgo0); }}()()
	}

	if metadataType == NETWORK_METADATA_ELEMENT {
		if uriKey != "" {
			cUriKey = ( /*line :453:14*/_Cfunc_CString /*line :453:22*/)(uriKey)
			defer func() func() { _cgo0 := /*line :454:17*/unsafe.Pointer(cUriKey); return func() { _cgoCheckPointer(_cgo0, nil); /*line :454:41*/_Cfunc_free(_cgo0); }}()()
		}
		cUri = ( /*line :456:10*/_Cfunc_CString /*line :456:18*/)(uri)
		defer func() func() { _cgo0 := /*line :457:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :457:37*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :459:10*/_Ctype_virError /*line :459:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :460:43*/n.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :460:55*/(metadataType); var _cgo2 *_Ctype_char = /*line :460:71*/cMetaDataCont; var _cgo3 *_Ctype_char = /*line :460:86*/cUriKey; var _cgo4 *_Ctype_char = /*line :460:95*/cUri; var _cgo5 _Ctype_uint = _Ctype_uint /*line :460:107*/(flags); _cgoBase6 := /*line :460:116*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :460:121*/_Cfunc_virNetworkSetMetadataWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}
