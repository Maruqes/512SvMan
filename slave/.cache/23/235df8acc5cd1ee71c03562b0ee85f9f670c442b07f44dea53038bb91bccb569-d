// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/domain_checkpoint.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016-2019 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"reflect"
	"unsafe"
)

type DomainCheckpointCreateFlags uint

const (
	DOMAIN_CHECKPOINT_CREATE_REDEFINE          = DomainCheckpointCreateFlags(( /*line :46:75*/_Ciconst_VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE /*line :46:113*/))
	DOMAIN_CHECKPOINT_CREATE_QUIESCE           = DomainCheckpointCreateFlags(( /*line :47:75*/_Ciconst_VIR_DOMAIN_CHECKPOINT_CREATE_QUIESCE /*line :47:112*/))
	DOMAIN_CHECKPOINT_CREATE_REDEFINE_VALIDATE = DomainCheckpointCreateFlags(( /*line :48:75*/_Ciconst_VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE_VALIDATE /*line :48:122*/))
)

type DomainCheckpointListFlags uint

const (
	DOMAIN_CHECKPOINT_LIST_ROOTS       = DomainCheckpointListFlags(( /*line :54:65*/_Ciconst_VIR_DOMAIN_CHECKPOINT_LIST_ROOTS /*line :54:98*/))
	DOMAIN_CHECKPOINT_LIST_DESCENDANTS = DomainCheckpointListFlags(( /*line :55:65*/_Ciconst_VIR_DOMAIN_CHECKPOINT_LIST_DESCENDANTS /*line :55:104*/))
	DOMAIN_CHECKPOINT_LIST_LEAVES      = DomainCheckpointListFlags(( /*line :56:65*/_Ciconst_VIR_DOMAIN_CHECKPOINT_LIST_LEAVES /*line :56:99*/))
	DOMAIN_CHECKPOINT_LIST_NO_LEAVES   = DomainCheckpointListFlags(( /*line :57:65*/_Ciconst_VIR_DOMAIN_CHECKPOINT_LIST_NO_LEAVES /*line :57:102*/))
	DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL = DomainCheckpointListFlags(( /*line :58:65*/_Ciconst_VIR_DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL /*line :58:104*/))
)

type DomainCheckpointDeleteFlags uint

const (
	DOMAIN_CHECKPOINT_DELETE_CHILDREN      = DomainCheckpointDeleteFlags(( /*line :64:71*/_Ciconst_VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN /*line :64:109*/))
	DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY = DomainCheckpointDeleteFlags(( /*line :65:71*/_Ciconst_VIR_DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY /*line :65:114*/))
	DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY = DomainCheckpointDeleteFlags(( /*line :66:71*/_Ciconst_VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY /*line :66:114*/))
)

type DomainCheckpointXMLFlags uint

const (
	DOMAIN_CHECKPOINT_XML_SECURE    = DomainCheckpointXMLFlags(( /*line :72:61*/_Ciconst_VIR_DOMAIN_CHECKPOINT_XML_SECURE /*line :72:94*/))
	DOMAIN_CHECKPOINT_XML_NO_DOMAIN = DomainCheckpointXMLFlags(( /*line :73:61*/_Ciconst_VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN /*line :73:97*/))
	DOMAIN_CHECKPOINT_XML_SIZE      = DomainCheckpointXMLFlags(( /*line :74:61*/_Ciconst_VIR_DOMAIN_CHECKPOINT_XML_SIZE /*line :74:92*/))
)

type DomainCheckpoint struct {
	ptr  /*line :78:6*/_Ctype_virDomainCheckpointPtr /*line :78:30*/
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointFree
func (s *DomainCheckpoint) Free() error {
	var err  /*line :83:10*/_Ctype_virError /*line :83:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :84:42*/s.ptr; _cgoBase1 := /*line :84:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :84:54*/_Cfunc_virDomainCheckpointFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointRef
func (c *DomainCheckpoint) Ref() error {
	var err  /*line :93:10*/_Ctype_virError /*line :93:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :94:41*/c.ptr; _cgoBase1 := /*line :94:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :94:53*/_Cfunc_virDomainCheckpointRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointDelete
func (s *DomainCheckpoint) Delete(flags DomainCheckpointDeleteFlags) error {
	var err  /*line :103:10*/_Ctype_virError /*line :103:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :104:47*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :104:60*/(flags); _cgoBase2 := /*line :104:69*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :104:74*/_Cfunc_virDomainCheckpointDeleteWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointGetXMLDesc
func (s *DomainCheckpoint) GetXMLDesc(flags DomainCheckpointXMLFlags) (string, error) {
	var err  /*line :113:10*/_Ctype_virError /*line :113:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :114:51*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :114:64*/(flags); _cgoBase2 := /*line :114:73*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :114:78*/_Cfunc_virDomainCheckpointGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :118:9*/_Cfunc_GoString /*line :118:18*/)(result)
	func() { _cgo0 := /*line :119:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :119:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointGetName
func (s *DomainCheckpoint) GetName() (string, error) {
	var err  /*line :125:10*/_Ctype_virError /*line :125:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :126:46*/s.ptr; _cgoBase1 := /*line :126:53*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :126:58*/_Cfunc_virDomainCheckpointGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :130:9*/_Cfunc_GoString /*line :130:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointGetParent
func (s *DomainCheckpoint) GetParent(flags uint32) (*DomainCheckpoint, error) {
	var err  /*line :135:10*/_Ctype_virError /*line :135:20*/
	ptr := func() _Ctype_virDomainCheckpointPtr{ _cgo0 := /*line :136:47*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :136:60*/(flags); _cgoBase2 := /*line :136:69*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :136:74*/_Cfunc_virDomainCheckpointGetParentWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &DomainCheckpoint{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointListAllChildren
func (d *DomainCheckpoint) ListAllChildren(flags DomainCheckpointListFlags) ([]DomainCheckpoint, error) {
	var cList * /*line :145:13*/_Ctype_virDomainCheckpointPtr /*line :145:37*/
	var err  /*line :146:10*/_Ctype_virError /*line :146:20*/
	numVols := func() _Ctype_int{ _cgo0 := /*line :147:57*/d.ptr; _cgoBase1 := /*line :147:93*/&cList; _cgo1 := /*line :147:64*/(**_Ctype_virDomainCheckpointPtr /*line :147:91*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :147:108*/(flags); _cgoBase3 := /*line :147:117*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :147:122*/_Cfunc_virDomainCheckpointListAllChildrenWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numVols == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numVols),
		Cap:  int(numVols),
	}
	var pools []DomainCheckpoint
	slice := *(*[] /*line :157:16*/_Ctype_virDomainCheckpointPtr /*line :157:40*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, DomainCheckpoint{ptr})
	}
	func() { _cgo0 := /*line :161:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :161:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}
