// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/interface.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type InterfaceXMLFlags uint

const (
	INTERFACE_XML_INACTIVE = InterfaceXMLFlags(( /*line :45:45*/_Ciconst_VIR_INTERFACE_XML_INACTIVE /*line :45:72*/))
)

type InterfaceDefineFlags uint

const (
	INTERFACE_DEFINE_VALIDATE = InterfaceDefineFlags(( /*line :51:51*/_Ciconst_VIR_INTERFACE_DEFINE_VALIDATE /*line :51:81*/))
)

type Interface struct {
	ptr  /*line :55:6*/_Ctype_virInterfacePtr /*line :55:23*/
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceCreate
func (n *Interface) Create(flags uint32) error {
	var err  /*line :60:10*/_Ctype_virError /*line :60:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :61:40*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :61:53*/(flags); _cgoBase2 := /*line :61:62*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :61:67*/_Cfunc_virInterfaceCreateWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceDestroy
func (n *Interface) Destroy(flags uint32) error {
	var err  /*line :70:10*/_Ctype_virError /*line :70:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :71:41*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :71:54*/(flags); _cgoBase2 := /*line :71:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :71:68*/_Cfunc_virInterfaceDestroyWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceIsActive
func (n *Interface) IsActive() (bool, error) {
	var err  /*line :80:10*/_Ctype_virError /*line :80:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :81:42*/n.ptr; _cgoBase1 := /*line :81:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :81:54*/_Cfunc_virInterfaceIsActiveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceGetMACString
func (n *Interface) GetMACString() (string, error) {
	var err  /*line :93:10*/_Ctype_virError /*line :93:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :94:46*/n.ptr; _cgoBase1 := /*line :94:53*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :94:58*/_Cfunc_virInterfaceGetMACStringWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	mac := ( /*line :98:9*/_Cfunc_GoString /*line :98:18*/)(result)
	return mac, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceGetName
func (n *Interface) GetName() (string, error) {
	var err  /*line :104:10*/_Ctype_virError /*line :104:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :105:41*/n.ptr; _cgoBase1 := /*line :105:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :105:53*/_Cfunc_virInterfaceGetNameWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	name := ( /*line :109:10*/_Cfunc_GoString /*line :109:19*/)(result)
	return name, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceGetXMLDesc
func (n *Interface) GetXMLDesc(flags InterfaceXMLFlags) (string, error) {
	var err  /*line :115:10*/_Ctype_virError /*line :115:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :116:44*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :116:57*/(flags); _cgoBase2 := /*line :116:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :116:71*/_Cfunc_virInterfaceGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :120:9*/_Cfunc_GoString /*line :120:18*/)(result)
	func() { _cgo0 := /*line :121:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :121:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceUndefine
func (n *Interface) Undefine() error {
	var err  /*line :127:10*/_Ctype_virError /*line :127:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :128:42*/n.ptr; _cgoBase1 := /*line :128:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :128:54*/_Cfunc_virInterfaceUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceFree
func (n *Interface) Free() error {
	var err  /*line :137:10*/_Ctype_virError /*line :137:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :138:35*/n.ptr; _cgoBase1 := /*line :138:42*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :138:47*/_Cfunc_virInterfaceFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceRef
func (c *Interface) Ref() error {
	var err  /*line :147:10*/_Ctype_virError /*line :147:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :148:34*/c.ptr; _cgoBase1 := /*line :148:41*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :148:46*/_Cfunc_virInterfaceRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}
