// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/domain.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"fmt"
	"os"
	"reflect"
	"strconv"
	"strings"
	"unsafe"
)

const (
	DOMAIN_SEND_KEY_MAX_KEYS = uint32(( /*line :48:36*/_Ciconst_VIR_DOMAIN_SEND_KEY_MAX_KEYS /*line :48:65*/))
)

type DomainState int

const (
	DOMAIN_NOSTATE     = DomainState(( /*line :54:35*/_Ciconst_VIR_DOMAIN_NOSTATE /*line :54:54*/))
	DOMAIN_RUNNING     = DomainState(( /*line :55:35*/_Ciconst_VIR_DOMAIN_RUNNING /*line :55:54*/))
	DOMAIN_BLOCKED     = DomainState(( /*line :56:35*/_Ciconst_VIR_DOMAIN_BLOCKED /*line :56:54*/))
	DOMAIN_PAUSED      = DomainState(( /*line :57:35*/_Ciconst_VIR_DOMAIN_PAUSED /*line :57:53*/))
	DOMAIN_SHUTDOWN    = DomainState(( /*line :58:35*/_Ciconst_VIR_DOMAIN_SHUTDOWN /*line :58:55*/))
	DOMAIN_CRASHED     = DomainState(( /*line :59:35*/_Ciconst_VIR_DOMAIN_CRASHED /*line :59:54*/))
	DOMAIN_PMSUSPENDED = DomainState(( /*line :60:35*/_Ciconst_VIR_DOMAIN_PMSUSPENDED /*line :60:58*/))
	DOMAIN_SHUTOFF     = DomainState(( /*line :61:35*/_Ciconst_VIR_DOMAIN_SHUTOFF /*line :61:54*/))
)

type DomainMetadataType int

const (
	DOMAIN_METADATA_DESCRIPTION = DomainMetadataType(( /*line :67:51*/_Ciconst_VIR_DOMAIN_METADATA_DESCRIPTION /*line :67:83*/))
	DOMAIN_METADATA_TITLE       = DomainMetadataType(( /*line :68:51*/_Ciconst_VIR_DOMAIN_METADATA_TITLE /*line :68:77*/))
	DOMAIN_METADATA_ELEMENT     = DomainMetadataType(( /*line :69:51*/_Ciconst_VIR_DOMAIN_METADATA_ELEMENT /*line :69:79*/))
)

type DomainVcpuFlags uint

const (
	DOMAIN_VCPU_CONFIG       = DomainVcpuFlags(( /*line :75:45*/_Ciconst_VIR_DOMAIN_VCPU_CONFIG /*line :75:68*/))
	DOMAIN_VCPU_CURRENT      = DomainVcpuFlags(( /*line :76:45*/_Ciconst_VIR_DOMAIN_VCPU_CURRENT /*line :76:69*/))
	DOMAIN_VCPU_LIVE         = DomainVcpuFlags(( /*line :77:45*/_Ciconst_VIR_DOMAIN_VCPU_LIVE /*line :77:66*/))
	DOMAIN_VCPU_MAXIMUM      = DomainVcpuFlags(( /*line :78:45*/_Ciconst_VIR_DOMAIN_VCPU_MAXIMUM /*line :78:69*/))
	DOMAIN_VCPU_GUEST        = DomainVcpuFlags(( /*line :79:45*/_Ciconst_VIR_DOMAIN_VCPU_GUEST /*line :79:67*/))
	DOMAIN_VCPU_HOTPLUGGABLE = DomainVcpuFlags(( /*line :80:45*/_Ciconst_VIR_DOMAIN_VCPU_HOTPLUGGABLE /*line :80:74*/))
)

type DomainModificationImpact int

const (
	DOMAIN_AFFECT_CONFIG  = DomainModificationImpact(( /*line :86:51*/_Ciconst_VIR_DOMAIN_AFFECT_CONFIG /*line :86:76*/))
	DOMAIN_AFFECT_CURRENT = DomainModificationImpact(( /*line :87:51*/_Ciconst_VIR_DOMAIN_AFFECT_CURRENT /*line :87:77*/))
	DOMAIN_AFFECT_LIVE    = DomainModificationImpact(( /*line :88:51*/_Ciconst_VIR_DOMAIN_AFFECT_LIVE /*line :88:74*/))
)

type DomainMemoryModFlags uint

const (
	DOMAIN_MEM_CONFIG  = DomainMemoryModFlags(( /*line :94:44*/_Ciconst_VIR_DOMAIN_MEM_CONFIG /*line :94:66*/))
	DOMAIN_MEM_CURRENT = DomainMemoryModFlags(( /*line :95:44*/_Ciconst_VIR_DOMAIN_MEM_CURRENT /*line :95:67*/))
	DOMAIN_MEM_LIVE    = DomainMemoryModFlags(( /*line :96:44*/_Ciconst_VIR_DOMAIN_MEM_LIVE /*line :96:64*/))
	DOMAIN_MEM_MAXIMUM = DomainMemoryModFlags(( /*line :97:44*/_Ciconst_VIR_DOMAIN_MEM_MAXIMUM /*line :97:67*/))
)

type DomainDestroyFlags uint

const (
	DOMAIN_DESTROY_DEFAULT     = DomainDestroyFlags(( /*line :103:50*/_Ciconst_VIR_DOMAIN_DESTROY_DEFAULT /*line :103:77*/))
	DOMAIN_DESTROY_GRACEFUL    = DomainDestroyFlags(( /*line :104:50*/_Ciconst_VIR_DOMAIN_DESTROY_GRACEFUL /*line :104:78*/))
	DOMAIN_DESTROY_REMOVE_LOGS = DomainDestroyFlags(( /*line :105:50*/_Ciconst_VIR_DOMAIN_DESTROY_REMOVE_LOGS /*line :105:81*/))
)

type DomainShutdownFlags uint

const (
	DOMAIN_SHUTDOWN_DEFAULT        = DomainShutdownFlags(( /*line :111:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_DEFAULT /*line :111:83*/))
	DOMAIN_SHUTDOWN_ACPI_POWER_BTN = DomainShutdownFlags(( /*line :112:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN /*line :112:90*/))
	DOMAIN_SHUTDOWN_GUEST_AGENT    = DomainShutdownFlags(( /*line :113:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_GUEST_AGENT /*line :113:87*/))
	DOMAIN_SHUTDOWN_INITCTL        = DomainShutdownFlags(( /*line :114:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_INITCTL /*line :114:83*/))
	DOMAIN_SHUTDOWN_SIGNAL         = DomainShutdownFlags(( /*line :115:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_SIGNAL /*line :115:82*/))
	DOMAIN_SHUTDOWN_PARAVIRT       = DomainShutdownFlags(( /*line :116:55*/_Ciconst_VIR_DOMAIN_SHUTDOWN_PARAVIRT /*line :116:84*/))
)

type DomainUndefineFlagsValues int

const (
	DOMAIN_UNDEFINE_MANAGED_SAVE         = DomainUndefineFlagsValues(( /*line :122:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_MANAGED_SAVE /*line :122:100*/))         // Also remove any managed save
	DOMAIN_UNDEFINE_SNAPSHOTS_METADATA   = DomainUndefineFlagsValues(( /*line :123:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA /*line :123:106*/))   // If last use of domain, then also remove any snapshot metadata
	DOMAIN_UNDEFINE_NVRAM                = DomainUndefineFlagsValues(( /*line :124:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_NVRAM /*line :124:93*/))                // Also remove any nvram file
	DOMAIN_UNDEFINE_KEEP_NVRAM           = DomainUndefineFlagsValues(( /*line :125:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_KEEP_NVRAM /*line :125:98*/))           // Keep nvram file
	DOMAIN_UNDEFINE_CHECKPOINTS_METADATA = DomainUndefineFlagsValues(( /*line :126:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA /*line :126:108*/)) // If last use of domain, then also remove any checkpoint metadata
	DOMAIN_UNDEFINE_TPM                  = DomainUndefineFlagsValues(( /*line :127:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_TPM /*line :127:91*/))                  // Also remove any TPM state
	DOMAIN_UNDEFINE_KEEP_TPM             = DomainUndefineFlagsValues(( /*line :128:67*/_Ciconst_VIR_DOMAIN_UNDEFINE_KEEP_TPM /*line :128:96*/))             // Keep TPM state
)

type DomainDeviceModifyFlags uint

const (
	DOMAIN_DEVICE_MODIFY_CONFIG  = DomainDeviceModifyFlags(( /*line :134:57*/_Ciconst_VIR_DOMAIN_DEVICE_MODIFY_CONFIG /*line :134:89*/))
	DOMAIN_DEVICE_MODIFY_CURRENT = DomainDeviceModifyFlags(( /*line :135:57*/_Ciconst_VIR_DOMAIN_DEVICE_MODIFY_CURRENT /*line :135:90*/))
	DOMAIN_DEVICE_MODIFY_LIVE    = DomainDeviceModifyFlags(( /*line :136:57*/_Ciconst_VIR_DOMAIN_DEVICE_MODIFY_LIVE /*line :136:87*/))
	DOMAIN_DEVICE_MODIFY_FORCE   = DomainDeviceModifyFlags(( /*line :137:57*/_Ciconst_VIR_DOMAIN_DEVICE_MODIFY_FORCE /*line :137:88*/))
)

type DomainCreateFlags uint

const (
	DOMAIN_NONE               = DomainCreateFlags(( /*line :143:48*/_Ciconst_VIR_DOMAIN_NONE /*line :143:64*/))
	DOMAIN_START_PAUSED       = DomainCreateFlags(( /*line :144:48*/_Ciconst_VIR_DOMAIN_START_PAUSED /*line :144:72*/))
	DOMAIN_START_AUTODESTROY  = DomainCreateFlags(( /*line :145:48*/_Ciconst_VIR_DOMAIN_START_AUTODESTROY /*line :145:77*/))
	DOMAIN_START_BYPASS_CACHE = DomainCreateFlags(( /*line :146:48*/_Ciconst_VIR_DOMAIN_START_BYPASS_CACHE /*line :146:78*/))
	DOMAIN_START_FORCE_BOOT   = DomainCreateFlags(( /*line :147:48*/_Ciconst_VIR_DOMAIN_START_FORCE_BOOT /*line :147:76*/))
	DOMAIN_START_VALIDATE     = DomainCreateFlags(( /*line :148:48*/_Ciconst_VIR_DOMAIN_START_VALIDATE /*line :148:74*/))
	DOMAIN_START_RESET_NVRAM  = DomainCreateFlags(( /*line :149:48*/_Ciconst_VIR_DOMAIN_START_RESET_NVRAM /*line :149:77*/))
)

const DOMAIN_MEMORY_PARAM_UNLIMITED = ( /*line :152:39*/_Ciconst_VIR_DOMAIN_MEMORY_PARAM_UNLIMITED /*line :152:73*/)

type DomainEventType int

const (
	DOMAIN_EVENT_DEFINED     = DomainEventType(( /*line :157:45*/_Ciconst_VIR_DOMAIN_EVENT_DEFINED /*line :157:70*/))
	DOMAIN_EVENT_UNDEFINED   = DomainEventType(( /*line :158:45*/_Ciconst_VIR_DOMAIN_EVENT_UNDEFINED /*line :158:72*/))
	DOMAIN_EVENT_STARTED     = DomainEventType(( /*line :159:45*/_Ciconst_VIR_DOMAIN_EVENT_STARTED /*line :159:70*/))
	DOMAIN_EVENT_SUSPENDED   = DomainEventType(( /*line :160:45*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED /*line :160:72*/))
	DOMAIN_EVENT_RESUMED     = DomainEventType(( /*line :161:45*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED /*line :161:70*/))
	DOMAIN_EVENT_STOPPED     = DomainEventType(( /*line :162:45*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED /*line :162:70*/))
	DOMAIN_EVENT_SHUTDOWN    = DomainEventType(( /*line :163:45*/_Ciconst_VIR_DOMAIN_EVENT_SHUTDOWN /*line :163:71*/))
	DOMAIN_EVENT_PMSUSPENDED = DomainEventType(( /*line :164:45*/_Ciconst_VIR_DOMAIN_EVENT_PMSUSPENDED /*line :164:74*/))
	DOMAIN_EVENT_CRASHED     = DomainEventType(( /*line :165:45*/_Ciconst_VIR_DOMAIN_EVENT_CRASHED /*line :165:70*/))
)

type DomainEventWatchdogAction int

// The action that is to be taken due to the watchdog device firing
const (
	// No action, watchdog ignored
	DOMAIN_EVENT_WATCHDOG_NONE = DomainEventWatchdogAction(( /*line :173:57*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_NONE /*line :173:88*/))

	// Guest CPUs are paused
	DOMAIN_EVENT_WATCHDOG_PAUSE = DomainEventWatchdogAction(( /*line :176:58*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_PAUSE /*line :176:90*/))

	// Guest CPUs are reset
	DOMAIN_EVENT_WATCHDOG_RESET = DomainEventWatchdogAction(( /*line :179:58*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_RESET /*line :179:90*/))

	// Guest is forcibly powered off
	DOMAIN_EVENT_WATCHDOG_POWEROFF = DomainEventWatchdogAction(( /*line :182:61*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF /*line :182:96*/))

	// Guest is requested to gracefully shutdown
	DOMAIN_EVENT_WATCHDOG_SHUTDOWN = DomainEventWatchdogAction(( /*line :185:61*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN /*line :185:96*/))

	// No action, a debug message logged
	DOMAIN_EVENT_WATCHDOG_DEBUG = DomainEventWatchdogAction(( /*line :188:58*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_DEBUG /*line :188:90*/))

	// Inject a non-maskable interrupt into guest
	DOMAIN_EVENT_WATCHDOG_INJECTNMI = DomainEventWatchdogAction(( /*line :191:62*/_Ciconst_VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI /*line :191:98*/))
)

type DomainEventIOErrorAction int

// The action that is to be taken due to an IO error occurring
const (
	// No action, IO error ignored
	DOMAIN_EVENT_IO_ERROR_NONE = DomainEventIOErrorAction(( /*line :199:56*/_Ciconst_VIR_DOMAIN_EVENT_IO_ERROR_NONE /*line :199:87*/))

	// Guest CPUs are paused
	DOMAIN_EVENT_IO_ERROR_PAUSE = DomainEventIOErrorAction(( /*line :202:57*/_Ciconst_VIR_DOMAIN_EVENT_IO_ERROR_PAUSE /*line :202:89*/))

	// IO error reported to guest OS
	DOMAIN_EVENT_IO_ERROR_REPORT = DomainEventIOErrorAction(( /*line :205:58*/_Ciconst_VIR_DOMAIN_EVENT_IO_ERROR_REPORT /*line :205:91*/))
)

type DomainEventGraphicsPhase int

// The phase of the graphics client connection
const (
	// Initial socket connection established
	DOMAIN_EVENT_GRAPHICS_CONNECT = DomainEventGraphicsPhase(( /*line :213:59*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_CONNECT /*line :213:93*/))

	// Authentication & setup completed
	DOMAIN_EVENT_GRAPHICS_INITIALIZE = DomainEventGraphicsPhase(( /*line :216:62*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE /*line :216:99*/))

	// Final socket disconnection
	DOMAIN_EVENT_GRAPHICS_DISCONNECT = DomainEventGraphicsPhase(( /*line :219:62*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT /*line :219:99*/))
)

type DomainEventGraphicsAddressType int

const (
	// IPv4 address
	DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4 = DomainEventGraphicsAddressType(( /*line :226:70*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4 /*line :226:109*/))

	// IPv6 address
	DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6 = DomainEventGraphicsAddressType(( /*line :229:70*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6 /*line :229:109*/))

	// UNIX socket path
	DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX = DomainEventGraphicsAddressType(( /*line :232:70*/_Ciconst_VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX /*line :232:109*/))
)

type DomainBlockJobType int

const (
	// Placeholder
	DOMAIN_BLOCK_JOB_TYPE_UNKNOWN = DomainBlockJobType(( /*line :239:53*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN /*line :239:87*/))

	// Block Pull (virDomainBlockPull, or virDomainBlockRebase without
	// flags), job ends on completion
	DOMAIN_BLOCK_JOB_TYPE_PULL = DomainBlockJobType(( /*line :243:50*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_PULL /*line :243:81*/))

	// Block Copy (virDomainBlockCopy, or virDomainBlockRebase with
	// flags), job exists as long as mirroring is active
	DOMAIN_BLOCK_JOB_TYPE_COPY = DomainBlockJobType(( /*line :247:50*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_COPY /*line :247:81*/))

	// Block Commit (virDomainBlockCommit without flags), job ends on
	// completion
	DOMAIN_BLOCK_JOB_TYPE_COMMIT = DomainBlockJobType(( /*line :251:52*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT /*line :251:85*/))

	// Active Block Commit (virDomainBlockCommit with flags), job
	// exists as long as sync is active
	DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT = DomainBlockJobType(( /*line :255:59*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT /*line :255:99*/))

	// Live disk backup job
	DOMAIN_BLOCK_JOB_TYPE_BACKUP = DomainBlockJobType(( /*line :258:52*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_TYPE_BACKUP /*line :258:85*/))
)

type DomainRunningReason int

const (
	DOMAIN_RUNNING_UNKNOWN            = DomainRunningReason(( /*line :264:58*/_Ciconst_VIR_DOMAIN_RUNNING_UNKNOWN /*line :264:85*/))
	DOMAIN_RUNNING_BOOTED             = DomainRunningReason(( /*line :265:58*/_Ciconst_VIR_DOMAIN_RUNNING_BOOTED /*line :265:84*/))             /* normal startup from boot */
	DOMAIN_RUNNING_MIGRATED           = DomainRunningReason(( /*line :266:58*/_Ciconst_VIR_DOMAIN_RUNNING_MIGRATED /*line :266:86*/))           /* migrated from another host */
	DOMAIN_RUNNING_RESTORED           = DomainRunningReason(( /*line :267:58*/_Ciconst_VIR_DOMAIN_RUNNING_RESTORED /*line :267:86*/))           /* restored from a state file */
	DOMAIN_RUNNING_FROM_SNAPSHOT      = DomainRunningReason(( /*line :268:58*/_Ciconst_VIR_DOMAIN_RUNNING_FROM_SNAPSHOT /*line :268:91*/))      /* restored from snapshot */
	DOMAIN_RUNNING_UNPAUSED           = DomainRunningReason(( /*line :269:58*/_Ciconst_VIR_DOMAIN_RUNNING_UNPAUSED /*line :269:86*/))           /* returned from paused state */
	DOMAIN_RUNNING_MIGRATION_CANCELED = DomainRunningReason(( /*line :270:58*/_Ciconst_VIR_DOMAIN_RUNNING_MIGRATION_CANCELED /*line :270:96*/)) /* returned from migration */
	DOMAIN_RUNNING_SAVE_CANCELED      = DomainRunningReason(( /*line :271:58*/_Ciconst_VIR_DOMAIN_RUNNING_SAVE_CANCELED /*line :271:91*/))      /* returned from failed save process */
	DOMAIN_RUNNING_WAKEUP             = DomainRunningReason(( /*line :272:58*/_Ciconst_VIR_DOMAIN_RUNNING_WAKEUP /*line :272:84*/))             /* returned from pmsuspended due to wakeup event */
	DOMAIN_RUNNING_CRASHED            = DomainRunningReason(( /*line :273:58*/_Ciconst_VIR_DOMAIN_RUNNING_CRASHED /*line :273:85*/))            /* resumed from crashed */
	DOMAIN_RUNNING_POSTCOPY           = DomainRunningReason(( /*line :274:58*/_Ciconst_VIR_DOMAIN_RUNNING_POSTCOPY /*line :274:86*/))           /* running in post-copy migration mode */
	DOMAIN_RUNNING_POSTCOPY_FAILED    = DomainRunningReason(( /*line :275:58*/_Ciconst_VIR_DOMAIN_RUNNING_POSTCOPY_FAILED /*line :275:93*/))    /* running in post-copy migration mode after failure */
)

type DomainPausedReason int

const (
	DOMAIN_PAUSED_UNKNOWN         = DomainPausedReason(( /*line :281:53*/_Ciconst_VIR_DOMAIN_PAUSED_UNKNOWN /*line :281:79*/))         /* the reason is unknown */
	DOMAIN_PAUSED_USER            = DomainPausedReason(( /*line :282:53*/_Ciconst_VIR_DOMAIN_PAUSED_USER /*line :282:76*/))            /* paused on user request */
	DOMAIN_PAUSED_MIGRATION       = DomainPausedReason(( /*line :283:53*/_Ciconst_VIR_DOMAIN_PAUSED_MIGRATION /*line :283:81*/))       /* paused for offline migration */
	DOMAIN_PAUSED_SAVE            = DomainPausedReason(( /*line :284:53*/_Ciconst_VIR_DOMAIN_PAUSED_SAVE /*line :284:76*/))            /* paused for save */
	DOMAIN_PAUSED_DUMP            = DomainPausedReason(( /*line :285:53*/_Ciconst_VIR_DOMAIN_PAUSED_DUMP /*line :285:76*/))            /* paused for offline core dump */
	DOMAIN_PAUSED_IOERROR         = DomainPausedReason(( /*line :286:53*/_Ciconst_VIR_DOMAIN_PAUSED_IOERROR /*line :286:79*/))         /* paused due to a disk I/O error */
	DOMAIN_PAUSED_WATCHDOG        = DomainPausedReason(( /*line :287:53*/_Ciconst_VIR_DOMAIN_PAUSED_WATCHDOG /*line :287:80*/))        /* paused due to a watchdog event */
	DOMAIN_PAUSED_FROM_SNAPSHOT   = DomainPausedReason(( /*line :288:53*/_Ciconst_VIR_DOMAIN_PAUSED_FROM_SNAPSHOT /*line :288:85*/))   /* paused after restoring from snapshot */
	DOMAIN_PAUSED_SHUTTING_DOWN   = DomainPausedReason(( /*line :289:53*/_Ciconst_VIR_DOMAIN_PAUSED_SHUTTING_DOWN /*line :289:85*/))   /* paused during shutdown process */
	DOMAIN_PAUSED_SNAPSHOT        = DomainPausedReason(( /*line :290:53*/_Ciconst_VIR_DOMAIN_PAUSED_SNAPSHOT /*line :290:80*/))        /* paused while creating a snapshot */
	DOMAIN_PAUSED_CRASHED         = DomainPausedReason(( /*line :291:53*/_Ciconst_VIR_DOMAIN_PAUSED_CRASHED /*line :291:79*/))         /* paused due to a guest crash */
	DOMAIN_PAUSED_STARTING_UP     = DomainPausedReason(( /*line :292:53*/_Ciconst_VIR_DOMAIN_PAUSED_STARTING_UP /*line :292:83*/))     /* the domainis being started */
	DOMAIN_PAUSED_POSTCOPY        = DomainPausedReason(( /*line :293:53*/_Ciconst_VIR_DOMAIN_PAUSED_POSTCOPY /*line :293:80*/))        /* paused for post-copy migration */
	DOMAIN_PAUSED_POSTCOPY_FAILED = DomainPausedReason(( /*line :294:53*/_Ciconst_VIR_DOMAIN_PAUSED_POSTCOPY_FAILED /*line :294:87*/)) /* paused after failed post-copy */
	DOMAIN_PAUSED_API_ERROR       = DomainPausedReason(( /*line :295:53*/_Ciconst_VIR_DOMAIN_PAUSED_API_ERROR /*line :295:81*/))       /* Some APIs (e.g., migration, snapshot) internally need to suspend a domain. This paused state reason is used when resume operation at the end of such API fails.*/
)

type DomainXMLFlags uint

const (
	DOMAIN_XML_SECURE     = DomainXMLFlags(( /*line :301:41*/_Ciconst_VIR_DOMAIN_XML_SECURE /*line :301:63*/))     /* dump security sensitive information too */
	DOMAIN_XML_INACTIVE   = DomainXMLFlags(( /*line :302:41*/_Ciconst_VIR_DOMAIN_XML_INACTIVE /*line :302:65*/))   /* dump inactive domain information */
	DOMAIN_XML_UPDATE_CPU = DomainXMLFlags(( /*line :303:41*/_Ciconst_VIR_DOMAIN_XML_UPDATE_CPU /*line :303:67*/)) /* update guest CPU requirements according to host CPU */
	DOMAIN_XML_MIGRATABLE = DomainXMLFlags(( /*line :304:41*/_Ciconst_VIR_DOMAIN_XML_MIGRATABLE /*line :304:67*/)) /* dump XML suitable for migration */
)

type DomainEventDefinedDetailType int

const (
	DOMAIN_EVENT_DEFINED_ADDED         = DomainEventDefinedDetailType(( /*line :310:68*/_Ciconst_VIR_DOMAIN_EVENT_DEFINED_ADDED /*line :310:99*/))
	DOMAIN_EVENT_DEFINED_UPDATED       = DomainEventDefinedDetailType(( /*line :311:68*/_Ciconst_VIR_DOMAIN_EVENT_DEFINED_UPDATED /*line :311:101*/))
	DOMAIN_EVENT_DEFINED_RENAMED       = DomainEventDefinedDetailType(( /*line :312:68*/_Ciconst_VIR_DOMAIN_EVENT_DEFINED_RENAMED /*line :312:101*/))
	DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT = DomainEventDefinedDetailType(( /*line :313:68*/_Ciconst_VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT /*line :313:107*/))
)

type DomainEventUndefinedDetailType int

const (
	DOMAIN_EVENT_UNDEFINED_REMOVED = DomainEventUndefinedDetailType(( /*line :319:66*/_Ciconst_VIR_DOMAIN_EVENT_UNDEFINED_REMOVED /*line :319:101*/))
	DOMAIN_EVENT_UNDEFINED_RENAMED = DomainEventUndefinedDetailType(( /*line :320:66*/_Ciconst_VIR_DOMAIN_EVENT_UNDEFINED_RENAMED /*line :320:101*/))
)

type DomainEventStartedDetailType int

const (
	DOMAIN_EVENT_STARTED_BOOTED        = DomainEventStartedDetailType(( /*line :326:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_BOOTED /*line :326:100*/))
	DOMAIN_EVENT_STARTED_MIGRATED      = DomainEventStartedDetailType(( /*line :327:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_MIGRATED /*line :327:102*/))
	DOMAIN_EVENT_STARTED_RESTORED      = DomainEventStartedDetailType(( /*line :328:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_RESTORED /*line :328:102*/))
	DOMAIN_EVENT_STARTED_FROM_SNAPSHOT = DomainEventStartedDetailType(( /*line :329:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT /*line :329:107*/))
	DOMAIN_EVENT_STARTED_WAKEUP        = DomainEventStartedDetailType(( /*line :330:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_WAKEUP /*line :330:100*/))
	DOMAIN_EVENT_STARTED_RECREATED     = DomainEventStartedDetailType(( /*line :331:68*/_Ciconst_VIR_DOMAIN_EVENT_STARTED_RECREATED /*line :331:103*/))
)

type DomainEventSuspendedDetailType int

const (
	DOMAIN_EVENT_SUSPENDED_PAUSED          = DomainEventSuspendedDetailType(( /*line :337:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_PAUSED /*line :337:108*/))
	DOMAIN_EVENT_SUSPENDED_MIGRATED        = DomainEventSuspendedDetailType(( /*line :338:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED /*line :338:110*/))
	DOMAIN_EVENT_SUSPENDED_IOERROR         = DomainEventSuspendedDetailType(( /*line :339:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_IOERROR /*line :339:109*/))
	DOMAIN_EVENT_SUSPENDED_WATCHDOG        = DomainEventSuspendedDetailType(( /*line :340:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG /*line :340:110*/))
	DOMAIN_EVENT_SUSPENDED_RESTORED        = DomainEventSuspendedDetailType(( /*line :341:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_RESTORED /*line :341:110*/))
	DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT   = DomainEventSuspendedDetailType(( /*line :342:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT /*line :342:115*/))
	DOMAIN_EVENT_SUSPENDED_API_ERROR       = DomainEventSuspendedDetailType(( /*line :343:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR /*line :343:111*/))
	DOMAIN_EVENT_SUSPENDED_POSTCOPY        = DomainEventSuspendedDetailType(( /*line :344:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY /*line :344:110*/))
	DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED = DomainEventSuspendedDetailType(( /*line :345:74*/_Ciconst_VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED /*line :345:117*/))
)

type DomainEventResumedDetailType int

const (
	DOMAIN_EVENT_RESUMED_UNPAUSED        = DomainEventResumedDetailType(( /*line :351:70*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED_UNPAUSED /*line :351:104*/))
	DOMAIN_EVENT_RESUMED_MIGRATED        = DomainEventResumedDetailType(( /*line :352:70*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED_MIGRATED /*line :352:104*/))
	DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT   = DomainEventResumedDetailType(( /*line :353:70*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT /*line :353:109*/))
	DOMAIN_EVENT_RESUMED_POSTCOPY        = DomainEventResumedDetailType(( /*line :354:70*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED_POSTCOPY /*line :354:104*/))
	DOMAIN_EVENT_RESUMED_POSTCOPY_FAILED = DomainEventResumedDetailType(( /*line :355:70*/_Ciconst_VIR_DOMAIN_EVENT_RESUMED_POSTCOPY_FAILED /*line :355:111*/))
)

type DomainEventStoppedDetailType int

const (
	DOMAIN_EVENT_STOPPED_SHUTDOWN      = DomainEventStoppedDetailType(( /*line :361:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN /*line :361:102*/))
	DOMAIN_EVENT_STOPPED_DESTROYED     = DomainEventStoppedDetailType(( /*line :362:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_DESTROYED /*line :362:103*/))
	DOMAIN_EVENT_STOPPED_CRASHED       = DomainEventStoppedDetailType(( /*line :363:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_CRASHED /*line :363:101*/))
	DOMAIN_EVENT_STOPPED_MIGRATED      = DomainEventStoppedDetailType(( /*line :364:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_MIGRATED /*line :364:102*/))
	DOMAIN_EVENT_STOPPED_SAVED         = DomainEventStoppedDetailType(( /*line :365:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_SAVED /*line :365:99*/))
	DOMAIN_EVENT_STOPPED_FAILED        = DomainEventStoppedDetailType(( /*line :366:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_FAILED /*line :366:100*/))
	DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT = DomainEventStoppedDetailType(( /*line :367:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT /*line :367:107*/))
	DOMAIN_EVENT_STOPPED_RECREATED     = DomainEventStoppedDetailType(( /*line :368:68*/_Ciconst_VIR_DOMAIN_EVENT_STOPPED_RECREATED /*line :368:103*/))
)

type DomainEventShutdownDetailType int

const (
	DOMAIN_EVENT_SHUTDOWN_FINISHED = DomainEventShutdownDetailType(( /*line :374:65*/_Ciconst_VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED /*line :374:100*/))
	DOMAIN_EVENT_SHUTDOWN_GUEST    = DomainEventShutdownDetailType(( /*line :375:65*/_Ciconst_VIR_DOMAIN_EVENT_SHUTDOWN_GUEST /*line :375:97*/))
	DOMAIN_EVENT_SHUTDOWN_HOST     = DomainEventShutdownDetailType(( /*line :376:65*/_Ciconst_VIR_DOMAIN_EVENT_SHUTDOWN_HOST /*line :376:96*/))
)

type DomainMemoryStatTags int

const (
	DOMAIN_MEMORY_STAT_LAST            = DomainMemoryStatTags(( /*line :382:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_NR /*line :382:86*/))
	DOMAIN_MEMORY_STAT_SWAP_IN         = DomainMemoryStatTags(( /*line :383:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_SWAP_IN /*line :383:91*/))
	DOMAIN_MEMORY_STAT_SWAP_OUT        = DomainMemoryStatTags(( /*line :384:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_SWAP_OUT /*line :384:92*/))
	DOMAIN_MEMORY_STAT_MAJOR_FAULT     = DomainMemoryStatTags(( /*line :385:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT /*line :385:95*/))
	DOMAIN_MEMORY_STAT_MINOR_FAULT     = DomainMemoryStatTags(( /*line :386:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT /*line :386:95*/))
	DOMAIN_MEMORY_STAT_UNUSED          = DomainMemoryStatTags(( /*line :387:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_UNUSED /*line :387:90*/))
	DOMAIN_MEMORY_STAT_AVAILABLE       = DomainMemoryStatTags(( /*line :388:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_AVAILABLE /*line :388:93*/))
	DOMAIN_MEMORY_STAT_ACTUAL_BALLOON  = DomainMemoryStatTags(( /*line :389:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON /*line :389:98*/))
	DOMAIN_MEMORY_STAT_RSS             = DomainMemoryStatTags(( /*line :390:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_RSS /*line :390:87*/))
	DOMAIN_MEMORY_STAT_USABLE          = DomainMemoryStatTags(( /*line :391:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_USABLE /*line :391:90*/))
	DOMAIN_MEMORY_STAT_LAST_UPDATE     = DomainMemoryStatTags(( /*line :392:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE /*line :392:95*/))
	DOMAIN_MEMORY_STAT_DISK_CACHES     = DomainMemoryStatTags(( /*line :393:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_DISK_CACHES /*line :393:95*/))
	DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC = DomainMemoryStatTags(( /*line :394:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC /*line :394:99*/))
	DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL  = DomainMemoryStatTags(( /*line :395:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL /*line :395:98*/))
	DOMAIN_MEMORY_STAT_NR              = DomainMemoryStatTags(( /*line :396:60*/_Ciconst_VIR_DOMAIN_MEMORY_STAT_NR /*line :396:86*/))
)

type DomainCPUStatsTags string

const (
	DOMAIN_CPU_STATS_CPUTIME    = DomainCPUStatsTags(( /*line :402:51*/_Csconst_VIR_DOMAIN_CPU_STATS_CPUTIME /*line :402:80*/))
	DOMAIN_CPU_STATS_SYSTEMTIME = DomainCPUStatsTags(( /*line :403:51*/_Csconst_VIR_DOMAIN_CPU_STATS_SYSTEMTIME /*line :403:83*/))
	DOMAIN_CPU_STATS_USERTIME   = DomainCPUStatsTags(( /*line :404:51*/_Csconst_VIR_DOMAIN_CPU_STATS_USERTIME /*line :404:81*/))
	DOMAIN_CPU_STATS_VCPUTIME   = DomainCPUStatsTags(( /*line :405:51*/_Csconst_VIR_DOMAIN_CPU_STATS_VCPUTIME /*line :405:81*/))
)

type DomainInterfaceAddressesSource int

const (
	DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE = DomainInterfaceAddressesSource(( /*line :411:72*/_Ciconst_VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE /*line :411:113*/))
	DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT = DomainInterfaceAddressesSource(( /*line :412:72*/_Ciconst_VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT /*line :412:113*/))
	DOMAIN_INTERFACE_ADDRESSES_SRC_ARP   = DomainInterfaceAddressesSource(( /*line :413:72*/_Ciconst_VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP /*line :413:111*/))
)

type KeycodeSet int

const (
	KEYCODE_SET_LINUX  = KeycodeSet(( /*line :419:34*/_Ciconst_VIR_KEYCODE_SET_LINUX /*line :419:56*/))
	KEYCODE_SET_XT     = KeycodeSet(( /*line :420:34*/_Ciconst_VIR_KEYCODE_SET_XT /*line :420:53*/))
	KEYCODE_SET_ATSET1 = KeycodeSet(( /*line :421:34*/_Ciconst_VIR_KEYCODE_SET_ATSET1 /*line :421:57*/))
	KEYCODE_SET_ATSET2 = KeycodeSet(( /*line :422:34*/_Ciconst_VIR_KEYCODE_SET_ATSET2 /*line :422:57*/))
	KEYCODE_SET_ATSET3 = KeycodeSet(( /*line :423:34*/_Ciconst_VIR_KEYCODE_SET_ATSET3 /*line :423:57*/))
	KEYCODE_SET_OSX    = KeycodeSet(( /*line :424:34*/_Ciconst_VIR_KEYCODE_SET_OSX /*line :424:54*/))
	KEYCODE_SET_XT_KBD = KeycodeSet(( /*line :425:34*/_Ciconst_VIR_KEYCODE_SET_XT_KBD /*line :425:57*/))
	KEYCODE_SET_USB    = KeycodeSet(( /*line :426:34*/_Ciconst_VIR_KEYCODE_SET_USB /*line :426:54*/))
	KEYCODE_SET_WIN32  = KeycodeSet(( /*line :427:34*/_Ciconst_VIR_KEYCODE_SET_WIN32 /*line :427:56*/))
	KEYCODE_SET_RFB    = KeycodeSet(( /*line :428:34*/_Ciconst_VIR_KEYCODE_SET_RFB /*line :428:54*/))
	KEYCODE_SET_QNUM   = KeycodeSet(( /*line :429:34*/_Ciconst_VIR_KEYCODE_SET_QNUM /*line :429:55*/))
)

type ConnectDomainEventBlockJobStatus int

const (
	DOMAIN_BLOCK_JOB_COMPLETED = ConnectDomainEventBlockJobStatus(( /*line :435:64*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_COMPLETED /*line :435:95*/))
	DOMAIN_BLOCK_JOB_FAILED    = ConnectDomainEventBlockJobStatus(( /*line :436:64*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_FAILED /*line :436:92*/))
	DOMAIN_BLOCK_JOB_CANCELED  = ConnectDomainEventBlockJobStatus(( /*line :437:64*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_CANCELED /*line :437:94*/))
	DOMAIN_BLOCK_JOB_READY     = ConnectDomainEventBlockJobStatus(( /*line :438:64*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_READY /*line :438:91*/))
)

type ConnectDomainEventDiskChangeReason int

const (
	// OldSrcPath is set
	DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START = ConnectDomainEventDiskChangeReason(( /*line :445:81*/_Ciconst_VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START /*line :445:127*/))
	DOMAIN_EVENT_DISK_DROP_MISSING_ON_START   = ConnectDomainEventDiskChangeReason(( /*line :446:81*/_Ciconst_VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START /*line :446:125*/))
)

type ConnectDomainEventTrayChangeReason int

const (
	DOMAIN_EVENT_TRAY_CHANGE_OPEN  = ConnectDomainEventTrayChangeReason(( /*line :452:70*/_Ciconst_VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN /*line :452:104*/))
	DOMAIN_EVENT_TRAY_CHANGE_CLOSE = ConnectDomainEventTrayChangeReason(( /*line :453:70*/_Ciconst_VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE /*line :453:105*/))
)

type DomainProcessSignal int

const (
	DOMAIN_PROCESS_SIGNAL_NOP  = DomainProcessSignal(( /*line :459:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_NOP /*line :459:81*/))
	DOMAIN_PROCESS_SIGNAL_HUP  = DomainProcessSignal(( /*line :460:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_HUP /*line :460:81*/))
	DOMAIN_PROCESS_SIGNAL_INT  = DomainProcessSignal(( /*line :461:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_INT /*line :461:81*/))
	DOMAIN_PROCESS_SIGNAL_QUIT = DomainProcessSignal(( /*line :462:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_QUIT /*line :462:82*/))
	DOMAIN_PROCESS_SIGNAL_ILL  = DomainProcessSignal(( /*line :463:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_ILL /*line :463:81*/))
	DOMAIN_PROCESS_SIGNAL_TRAP = DomainProcessSignal(( /*line :464:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_TRAP /*line :464:82*/))
	DOMAIN_PROCESS_SIGNAL_ABRT = DomainProcessSignal(( /*line :465:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_ABRT /*line :465:82*/))
	DOMAIN_PROCESS_SIGNAL_BUS  = DomainProcessSignal(( /*line :466:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_BUS /*line :466:81*/))
	DOMAIN_PROCESS_SIGNAL_FPE  = DomainProcessSignal(( /*line :467:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_FPE /*line :467:81*/))
	DOMAIN_PROCESS_SIGNAL_KILL = DomainProcessSignal(( /*line :468:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_KILL /*line :468:82*/))

	DOMAIN_PROCESS_SIGNAL_USR1   = DomainProcessSignal(( /*line :470:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_USR1 /*line :470:84*/))
	DOMAIN_PROCESS_SIGNAL_SEGV   = DomainProcessSignal(( /*line :471:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_SEGV /*line :471:84*/))
	DOMAIN_PROCESS_SIGNAL_USR2   = DomainProcessSignal(( /*line :472:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_USR2 /*line :472:84*/))
	DOMAIN_PROCESS_SIGNAL_PIPE   = DomainProcessSignal(( /*line :473:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_PIPE /*line :473:84*/))
	DOMAIN_PROCESS_SIGNAL_ALRM   = DomainProcessSignal(( /*line :474:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_ALRM /*line :474:84*/))
	DOMAIN_PROCESS_SIGNAL_TERM   = DomainProcessSignal(( /*line :475:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_TERM /*line :475:84*/))
	DOMAIN_PROCESS_SIGNAL_STKFLT = DomainProcessSignal(( /*line :476:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_STKFLT /*line :476:86*/))
	DOMAIN_PROCESS_SIGNAL_CHLD   = DomainProcessSignal(( /*line :477:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_CHLD /*line :477:84*/))
	DOMAIN_PROCESS_SIGNAL_CONT   = DomainProcessSignal(( /*line :478:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_CONT /*line :478:84*/))
	DOMAIN_PROCESS_SIGNAL_STOP   = DomainProcessSignal(( /*line :479:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_STOP /*line :479:84*/))

	DOMAIN_PROCESS_SIGNAL_TSTP   = DomainProcessSignal(( /*line :481:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_TSTP /*line :481:84*/))
	DOMAIN_PROCESS_SIGNAL_TTIN   = DomainProcessSignal(( /*line :482:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_TTIN /*line :482:84*/))
	DOMAIN_PROCESS_SIGNAL_TTOU   = DomainProcessSignal(( /*line :483:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_TTOU /*line :483:84*/))
	DOMAIN_PROCESS_SIGNAL_URG    = DomainProcessSignal(( /*line :484:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_URG /*line :484:83*/))
	DOMAIN_PROCESS_SIGNAL_XCPU   = DomainProcessSignal(( /*line :485:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_XCPU /*line :485:84*/))
	DOMAIN_PROCESS_SIGNAL_XFSZ   = DomainProcessSignal(( /*line :486:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_XFSZ /*line :486:84*/))
	DOMAIN_PROCESS_SIGNAL_VTALRM = DomainProcessSignal(( /*line :487:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_VTALRM /*line :487:86*/))
	DOMAIN_PROCESS_SIGNAL_PROF   = DomainProcessSignal(( /*line :488:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_PROF /*line :488:84*/))
	DOMAIN_PROCESS_SIGNAL_WINCH  = DomainProcessSignal(( /*line :489:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_WINCH /*line :489:85*/))
	DOMAIN_PROCESS_SIGNAL_POLL   = DomainProcessSignal(( /*line :490:53*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_POLL /*line :490:84*/))

	DOMAIN_PROCESS_SIGNAL_PWR = DomainProcessSignal(( /*line :492:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_PWR /*line :492:80*/))
	DOMAIN_PROCESS_SIGNAL_SYS = DomainProcessSignal(( /*line :493:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_SYS /*line :493:80*/))
	DOMAIN_PROCESS_SIGNAL_RT0 = DomainProcessSignal(( /*line :494:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT0 /*line :494:80*/))
	DOMAIN_PROCESS_SIGNAL_RT1 = DomainProcessSignal(( /*line :495:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT1 /*line :495:80*/))
	DOMAIN_PROCESS_SIGNAL_RT2 = DomainProcessSignal(( /*line :496:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT2 /*line :496:80*/))
	DOMAIN_PROCESS_SIGNAL_RT3 = DomainProcessSignal(( /*line :497:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT3 /*line :497:80*/))
	DOMAIN_PROCESS_SIGNAL_RT4 = DomainProcessSignal(( /*line :498:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT4 /*line :498:80*/))
	DOMAIN_PROCESS_SIGNAL_RT5 = DomainProcessSignal(( /*line :499:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT5 /*line :499:80*/))
	DOMAIN_PROCESS_SIGNAL_RT6 = DomainProcessSignal(( /*line :500:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT6 /*line :500:80*/))
	DOMAIN_PROCESS_SIGNAL_RT7 = DomainProcessSignal(( /*line :501:50*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT7 /*line :501:80*/))

	DOMAIN_PROCESS_SIGNAL_RT8  = DomainProcessSignal(( /*line :503:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT8 /*line :503:81*/))
	DOMAIN_PROCESS_SIGNAL_RT9  = DomainProcessSignal(( /*line :504:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT9 /*line :504:81*/))
	DOMAIN_PROCESS_SIGNAL_RT10 = DomainProcessSignal(( /*line :505:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT10 /*line :505:82*/))
	DOMAIN_PROCESS_SIGNAL_RT11 = DomainProcessSignal(( /*line :506:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT11 /*line :506:82*/))
	DOMAIN_PROCESS_SIGNAL_RT12 = DomainProcessSignal(( /*line :507:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT12 /*line :507:82*/))
	DOMAIN_PROCESS_SIGNAL_RT13 = DomainProcessSignal(( /*line :508:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT13 /*line :508:82*/))
	DOMAIN_PROCESS_SIGNAL_RT14 = DomainProcessSignal(( /*line :509:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT14 /*line :509:82*/))
	DOMAIN_PROCESS_SIGNAL_RT15 = DomainProcessSignal(( /*line :510:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT15 /*line :510:82*/))
	DOMAIN_PROCESS_SIGNAL_RT16 = DomainProcessSignal(( /*line :511:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT16 /*line :511:82*/))
	DOMAIN_PROCESS_SIGNAL_RT17 = DomainProcessSignal(( /*line :512:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT17 /*line :512:82*/))
	DOMAIN_PROCESS_SIGNAL_RT18 = DomainProcessSignal(( /*line :513:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT18 /*line :513:82*/))

	DOMAIN_PROCESS_SIGNAL_RT19 = DomainProcessSignal(( /*line :515:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT19 /*line :515:82*/))
	DOMAIN_PROCESS_SIGNAL_RT20 = DomainProcessSignal(( /*line :516:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT20 /*line :516:82*/))
	DOMAIN_PROCESS_SIGNAL_RT21 = DomainProcessSignal(( /*line :517:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT21 /*line :517:82*/))
	DOMAIN_PROCESS_SIGNAL_RT22 = DomainProcessSignal(( /*line :518:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT22 /*line :518:82*/))
	DOMAIN_PROCESS_SIGNAL_RT23 = DomainProcessSignal(( /*line :519:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT23 /*line :519:82*/))
	DOMAIN_PROCESS_SIGNAL_RT24 = DomainProcessSignal(( /*line :520:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT24 /*line :520:82*/))
	DOMAIN_PROCESS_SIGNAL_RT25 = DomainProcessSignal(( /*line :521:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT25 /*line :521:82*/))
	DOMAIN_PROCESS_SIGNAL_RT26 = DomainProcessSignal(( /*line :522:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT26 /*line :522:82*/))
	DOMAIN_PROCESS_SIGNAL_RT27 = DomainProcessSignal(( /*line :523:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT27 /*line :523:82*/))

	DOMAIN_PROCESS_SIGNAL_RT28 = DomainProcessSignal(( /*line :525:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT28 /*line :525:82*/))
	DOMAIN_PROCESS_SIGNAL_RT29 = DomainProcessSignal(( /*line :526:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT29 /*line :526:82*/))
	DOMAIN_PROCESS_SIGNAL_RT30 = DomainProcessSignal(( /*line :527:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT30 /*line :527:82*/))
	DOMAIN_PROCESS_SIGNAL_RT31 = DomainProcessSignal(( /*line :528:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT31 /*line :528:82*/))
	DOMAIN_PROCESS_SIGNAL_RT32 = DomainProcessSignal(( /*line :529:51*/_Ciconst_VIR_DOMAIN_PROCESS_SIGNAL_RT32 /*line :529:82*/))
)

type DomainBlockedReason int

const (
	DOMAIN_BLOCKED_UNKNOWN = DomainBlockedReason(( /*line :535:47*/_Ciconst_VIR_DOMAIN_BLOCKED_UNKNOWN /*line :535:74*/))
)

type DomainControlState int

const (
	DOMAIN_CONTROL_OK       = DomainControlState(( /*line :541:47*/_Ciconst_VIR_DOMAIN_CONTROL_OK /*line :541:69*/))
	DOMAIN_CONTROL_JOB      = DomainControlState(( /*line :542:47*/_Ciconst_VIR_DOMAIN_CONTROL_JOB /*line :542:70*/))
	DOMAIN_CONTROL_OCCUPIED = DomainControlState(( /*line :543:47*/_Ciconst_VIR_DOMAIN_CONTROL_OCCUPIED /*line :543:75*/))
	DOMAIN_CONTROL_ERROR    = DomainControlState(( /*line :544:47*/_Ciconst_VIR_DOMAIN_CONTROL_ERROR /*line :544:72*/))
)

type DomainControlErrorReason int

const (
	DOMAIN_CONTROL_ERROR_REASON_NONE     = DomainControlErrorReason(( /*line :550:66*/_Ciconst_VIR_DOMAIN_CONTROL_ERROR_REASON_NONE /*line :550:103*/))
	DOMAIN_CONTROL_ERROR_REASON_UNKNOWN  = DomainControlErrorReason(( /*line :551:66*/_Ciconst_VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN /*line :551:106*/))
	DOMAIN_CONTROL_ERROR_REASON_MONITOR  = DomainControlErrorReason(( /*line :552:66*/_Ciconst_VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR /*line :552:106*/))
	DOMAIN_CONTROL_ERROR_REASON_INTERNAL = DomainControlErrorReason(( /*line :553:66*/_Ciconst_VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL /*line :553:107*/))
)

type DomainCrashedReason int

const (
	DOMAIN_CRASHED_UNKNOWN  = DomainCrashedReason(( /*line :559:48*/_Ciconst_VIR_DOMAIN_CRASHED_UNKNOWN /*line :559:75*/))
	DOMAIN_CRASHED_PANICKED = DomainCrashedReason(( /*line :560:48*/_Ciconst_VIR_DOMAIN_CRASHED_PANICKED /*line :560:76*/))
)

type DomainEventCrashedDetailType int

const (
	DOMAIN_EVENT_CRASHED_PANICKED    = DomainEventCrashedDetailType(( /*line :566:66*/_Ciconst_VIR_DOMAIN_EVENT_CRASHED_PANICKED /*line :566:100*/))
	DOMAIN_EVENT_CRASHED_CRASHLOADED = DomainEventCrashedDetailType(( /*line :567:66*/_Ciconst_VIR_DOMAIN_EVENT_CRASHED_CRASHLOADED /*line :567:103*/))
)

type DomainEventPMSuspendedDetailType int

const (
	DOMAIN_EVENT_PMSUSPENDED_MEMORY = DomainEventPMSuspendedDetailType(( /*line :573:69*/_Ciconst_VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY /*line :573:105*/))
	DOMAIN_EVENT_PMSUSPENDED_DISK   = DomainEventPMSuspendedDetailType(( /*line :574:69*/_Ciconst_VIR_DOMAIN_EVENT_PMSUSPENDED_DISK /*line :574:103*/))
)

type DomainNostateReason int

const (
	DOMAIN_NOSTATE_UNKNOWN = DomainNostateReason(( /*line :580:47*/_Ciconst_VIR_DOMAIN_NOSTATE_UNKNOWN /*line :580:74*/))
)

type DomainPMSuspendedReason int

const (
	DOMAIN_PMSUSPENDED_UNKNOWN = DomainPMSuspendedReason(( /*line :586:55*/_Ciconst_VIR_DOMAIN_PMSUSPENDED_UNKNOWN /*line :586:86*/))
)

type DomainPMSuspendedDiskReason int

const (
	DOMAIN_PMSUSPENDED_DISK_UNKNOWN = DomainPMSuspendedDiskReason(( /*line :592:64*/_Ciconst_VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN /*line :592:100*/))
)

type DomainShutdownReason int

const (
	DOMAIN_SHUTDOWN_UNKNOWN = DomainShutdownReason(( /*line :598:49*/_Ciconst_VIR_DOMAIN_SHUTDOWN_UNKNOWN /*line :598:77*/))
	DOMAIN_SHUTDOWN_USER    = DomainShutdownReason(( /*line :599:49*/_Ciconst_VIR_DOMAIN_SHUTDOWN_USER /*line :599:74*/))
)

type DomainShutoffReason int

const (
	DOMAIN_SHUTOFF_UNKNOWN       = DomainShutoffReason(( /*line :605:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_UNKNOWN /*line :605:80*/))
	DOMAIN_SHUTOFF_SHUTDOWN      = DomainShutoffReason(( /*line :606:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_SHUTDOWN /*line :606:81*/))
	DOMAIN_SHUTOFF_DESTROYED     = DomainShutoffReason(( /*line :607:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_DESTROYED /*line :607:82*/))
	DOMAIN_SHUTOFF_CRASHED       = DomainShutoffReason(( /*line :608:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_CRASHED /*line :608:80*/))
	DOMAIN_SHUTOFF_MIGRATED      = DomainShutoffReason(( /*line :609:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_MIGRATED /*line :609:81*/))
	DOMAIN_SHUTOFF_SAVED         = DomainShutoffReason(( /*line :610:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_SAVED /*line :610:78*/))
	DOMAIN_SHUTOFF_FAILED        = DomainShutoffReason(( /*line :611:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_FAILED /*line :611:79*/))
	DOMAIN_SHUTOFF_FROM_SNAPSHOT = DomainShutoffReason(( /*line :612:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT /*line :612:86*/))
	DOMAIN_SHUTOFF_DAEMON        = DomainShutoffReason(( /*line :613:53*/_Ciconst_VIR_DOMAIN_SHUTOFF_DAEMON /*line :613:79*/))
)

type DomainBlockCommitFlags uint

const (
	DOMAIN_BLOCK_COMMIT_SHALLOW         = DomainBlockCommitFlags(( /*line :619:63*/_Ciconst_VIR_DOMAIN_BLOCK_COMMIT_SHALLOW /*line :619:95*/))
	DOMAIN_BLOCK_COMMIT_DELETE          = DomainBlockCommitFlags(( /*line :620:63*/_Ciconst_VIR_DOMAIN_BLOCK_COMMIT_DELETE /*line :620:94*/))
	DOMAIN_BLOCK_COMMIT_ACTIVE          = DomainBlockCommitFlags(( /*line :621:63*/_Ciconst_VIR_DOMAIN_BLOCK_COMMIT_ACTIVE /*line :621:94*/))
	DOMAIN_BLOCK_COMMIT_RELATIVE        = DomainBlockCommitFlags(( /*line :622:63*/_Ciconst_VIR_DOMAIN_BLOCK_COMMIT_RELATIVE /*line :622:96*/))
	DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES = DomainBlockCommitFlags(( /*line :623:63*/_Ciconst_VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES /*line :623:103*/))
)

type DomainBlockCopyFlags uint

const (
	DOMAIN_BLOCK_COPY_SHALLOW            = DomainBlockCopyFlags(( /*line :629:62*/_Ciconst_VIR_DOMAIN_BLOCK_COPY_SHALLOW /*line :629:92*/))
	DOMAIN_BLOCK_COPY_REUSE_EXT          = DomainBlockCopyFlags(( /*line :630:62*/_Ciconst_VIR_DOMAIN_BLOCK_COPY_REUSE_EXT /*line :630:94*/))
	DOMAIN_BLOCK_COPY_TRANSIENT_JOB      = DomainBlockCopyFlags(( /*line :631:62*/_Ciconst_VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB /*line :631:98*/))
	DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES = DomainBlockCopyFlags(( /*line :632:62*/_Ciconst_VIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES /*line :632:103*/))
)

type DomainBlockRebaseFlags uint

const (
	DOMAIN_BLOCK_REBASE_SHALLOW         = DomainBlockRebaseFlags(( /*line :638:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_SHALLOW /*line :638:95*/))
	DOMAIN_BLOCK_REBASE_REUSE_EXT       = DomainBlockRebaseFlags(( /*line :639:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT /*line :639:97*/))
	DOMAIN_BLOCK_REBASE_COPY_RAW        = DomainBlockRebaseFlags(( /*line :640:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_COPY_RAW /*line :640:96*/))
	DOMAIN_BLOCK_REBASE_COPY            = DomainBlockRebaseFlags(( /*line :641:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_COPY /*line :641:92*/))
	DOMAIN_BLOCK_REBASE_RELATIVE        = DomainBlockRebaseFlags(( /*line :642:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_RELATIVE /*line :642:96*/))
	DOMAIN_BLOCK_REBASE_COPY_DEV        = DomainBlockRebaseFlags(( /*line :643:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_COPY_DEV /*line :643:96*/))
	DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES = DomainBlockRebaseFlags(( /*line :644:63*/_Ciconst_VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES /*line :644:103*/))
)

type DomainBlockJobAbortFlags uint

const (
	DOMAIN_BLOCK_JOB_ABORT_ASYNC = DomainBlockJobAbortFlags(( /*line :650:58*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC /*line :650:91*/))
	DOMAIN_BLOCK_JOB_ABORT_PIVOT = DomainBlockJobAbortFlags(( /*line :651:58*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT /*line :651:91*/))
)

type DomainBlockJobInfoFlags uint

const (
	DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES = DomainBlockJobInfoFlags(( /*line :657:66*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES /*line :657:108*/))
)

type DomainBlockJobSetSpeedFlags uint

const (
	DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES = DomainBlockJobSetSpeedFlags(( /*line :663:71*/_Ciconst_VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES /*line :663:114*/))
)

type DomainBlockPullFlags uint

const (
	DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES = DomainBlockPullFlags(( /*line :669:59*/_Ciconst_VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES /*line :669:97*/))
)

type DomainBlockResizeFlags uint

const (
	DOMAIN_BLOCK_RESIZE_BYTES    = DomainBlockResizeFlags(( /*line :675:56*/_Ciconst_VIR_DOMAIN_BLOCK_RESIZE_BYTES /*line :675:86*/))
	DOMAIN_BLOCK_RESIZE_CAPACITY = DomainBlockResizeFlags(( /*line :676:56*/_Ciconst_VIR_DOMAIN_BLOCK_RESIZE_CAPACITY /*line :676:89*/))
)

type Domain struct {
	ptr  /*line :680:6*/_Ctype_virDomainPtr /*line :680:20*/
}

type DomainChannelFlags uint

const (
	DOMAIN_CHANNEL_FORCE = DomainChannelFlags(( /*line :686:44*/_Ciconst_VIR_DOMAIN_CHANNEL_FORCE /*line :686:69*/))
)

type DomainConsoleFlags uint

const (
	DOMAIN_CONSOLE_FORCE = DomainConsoleFlags(( /*line :692:44*/_Ciconst_VIR_DOMAIN_CONSOLE_FORCE /*line :692:69*/))
	DOMAIN_CONSOLE_SAFE  = DomainConsoleFlags(( /*line :693:44*/_Ciconst_VIR_DOMAIN_CONSOLE_SAFE /*line :693:68*/))
)

type DomainCoreDumpFormat int

const (
	DOMAIN_CORE_DUMP_FORMAT_RAW          = DomainCoreDumpFormat(( /*line :699:62*/_Ciconst_VIR_DOMAIN_CORE_DUMP_FORMAT_RAW /*line :699:94*/))
	DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB   = DomainCoreDumpFormat(( /*line :700:62*/_Ciconst_VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB /*line :700:101*/))
	DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO    = DomainCoreDumpFormat(( /*line :701:62*/_Ciconst_VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO /*line :701:100*/))
	DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY = DomainCoreDumpFormat(( /*line :702:62*/_Ciconst_VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY /*line :702:103*/))
	DOMAIN_CORE_DUMP_FORMAT_WIN_DMP      = DomainCoreDumpFormat(( /*line :703:62*/_Ciconst_VIR_DOMAIN_CORE_DUMP_FORMAT_WIN_DMP /*line :703:98*/))
)

type DomainDefineFlags uint

const (
	DOMAIN_DEFINE_VALIDATE = DomainDefineFlags(( /*line :709:45*/_Ciconst_VIR_DOMAIN_DEFINE_VALIDATE /*line :709:72*/))
)

type DomainJobType int

const (
	DOMAIN_JOB_NONE      = DomainJobType(( /*line :715:39*/_Ciconst_VIR_DOMAIN_JOB_NONE /*line :715:59*/))
	DOMAIN_JOB_BOUNDED   = DomainJobType(( /*line :716:39*/_Ciconst_VIR_DOMAIN_JOB_BOUNDED /*line :716:62*/))
	DOMAIN_JOB_UNBOUNDED = DomainJobType(( /*line :717:39*/_Ciconst_VIR_DOMAIN_JOB_UNBOUNDED /*line :717:64*/))
	DOMAIN_JOB_COMPLETED = DomainJobType(( /*line :718:39*/_Ciconst_VIR_DOMAIN_JOB_COMPLETED /*line :718:64*/))
	DOMAIN_JOB_FAILED    = DomainJobType(( /*line :719:39*/_Ciconst_VIR_DOMAIN_JOB_FAILED /*line :719:61*/))
	DOMAIN_JOB_CANCELLED = DomainJobType(( /*line :720:39*/_Ciconst_VIR_DOMAIN_JOB_CANCELLED /*line :720:64*/))
)

type DomainGetJobStatsFlags uint

const (
	DOMAIN_JOB_STATS_COMPLETED      = DomainGetJobStatsFlags(( /*line :726:59*/_Ciconst_VIR_DOMAIN_JOB_STATS_COMPLETED /*line :726:90*/))
	DOMAIN_JOB_STATS_KEEP_COMPLETED = DomainGetJobStatsFlags(( /*line :727:59*/_Ciconst_VIR_DOMAIN_JOB_STATS_KEEP_COMPLETED /*line :727:95*/))
)

type DomainNumatuneMemMode int

const (
	DOMAIN_NUMATUNE_MEM_STRICT      = DomainNumatuneMemMode(( /*line :733:58*/_Ciconst_VIR_DOMAIN_NUMATUNE_MEM_STRICT /*line :733:89*/))
	DOMAIN_NUMATUNE_MEM_PREFERRED   = DomainNumatuneMemMode(( /*line :734:58*/_Ciconst_VIR_DOMAIN_NUMATUNE_MEM_PREFERRED /*line :734:92*/))
	DOMAIN_NUMATUNE_MEM_INTERLEAVE  = DomainNumatuneMemMode(( /*line :735:58*/_Ciconst_VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE /*line :735:93*/))
	DOMAIN_NUMATUNE_MEM_RESTRICTIVE = DomainNumatuneMemMode(( /*line :736:58*/_Ciconst_VIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE /*line :736:94*/))
)

type DomainOpenGraphicsFlags uint

const (
	DOMAIN_OPEN_GRAPHICS_SKIPAUTH = DomainOpenGraphicsFlags(( /*line :742:58*/_Ciconst_VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH /*line :742:92*/))
)

type DomainSetUserPasswordFlags uint

const (
	DOMAIN_PASSWORD_ENCRYPTED = DomainSetUserPasswordFlags(( /*line :748:57*/_Ciconst_VIR_DOMAIN_PASSWORD_ENCRYPTED /*line :748:87*/))
)

type DomainRebootFlagValues uint

const (
	DOMAIN_REBOOT_DEFAULT        = DomainRebootFlagValues(( /*line :754:56*/_Ciconst_VIR_DOMAIN_REBOOT_DEFAULT /*line :754:82*/))
	DOMAIN_REBOOT_ACPI_POWER_BTN = DomainRebootFlagValues(( /*line :755:56*/_Ciconst_VIR_DOMAIN_REBOOT_ACPI_POWER_BTN /*line :755:89*/))
	DOMAIN_REBOOT_GUEST_AGENT    = DomainRebootFlagValues(( /*line :756:56*/_Ciconst_VIR_DOMAIN_REBOOT_GUEST_AGENT /*line :756:86*/))
	DOMAIN_REBOOT_INITCTL        = DomainRebootFlagValues(( /*line :757:56*/_Ciconst_VIR_DOMAIN_REBOOT_INITCTL /*line :757:82*/))
	DOMAIN_REBOOT_SIGNAL         = DomainRebootFlagValues(( /*line :758:56*/_Ciconst_VIR_DOMAIN_REBOOT_SIGNAL /*line :758:81*/))
	DOMAIN_REBOOT_PARAVIRT       = DomainRebootFlagValues(( /*line :759:56*/_Ciconst_VIR_DOMAIN_REBOOT_PARAVIRT /*line :759:83*/))
)

type DomainSaveRestoreFlags uint

const (
	DOMAIN_SAVE_BYPASS_CACHE = DomainSaveRestoreFlags(( /*line :765:52*/_Ciconst_VIR_DOMAIN_SAVE_BYPASS_CACHE /*line :765:81*/))
	DOMAIN_SAVE_RUNNING      = DomainSaveRestoreFlags(( /*line :766:52*/_Ciconst_VIR_DOMAIN_SAVE_RUNNING /*line :766:76*/))
	DOMAIN_SAVE_PAUSED       = DomainSaveRestoreFlags(( /*line :767:52*/_Ciconst_VIR_DOMAIN_SAVE_PAUSED /*line :767:75*/))
	DOMAIN_SAVE_RESET_NVRAM  = DomainSaveRestoreFlags(( /*line :768:52*/_Ciconst_VIR_DOMAIN_SAVE_RESET_NVRAM /*line :768:80*/))
)

type DomainSetTimeFlags uint

const (
	DOMAIN_TIME_SYNC = DomainSetTimeFlags(( /*line :774:40*/_Ciconst_VIR_DOMAIN_TIME_SYNC /*line :774:61*/))
)

type DomainDiskErrorCode int

const (
	DOMAIN_DISK_ERROR_NONE     = DomainDiskErrorCode(( /*line :780:51*/_Ciconst_VIR_DOMAIN_DISK_ERROR_NONE /*line :780:78*/))
	DOMAIN_DISK_ERROR_UNSPEC   = DomainDiskErrorCode(( /*line :781:51*/_Ciconst_VIR_DOMAIN_DISK_ERROR_UNSPEC /*line :781:80*/))
	DOMAIN_DISK_ERROR_NO_SPACE = DomainDiskErrorCode(( /*line :782:51*/_Ciconst_VIR_DOMAIN_DISK_ERROR_NO_SPACE /*line :782:82*/))
)

type DomainStatsTypes int

const (
	DOMAIN_STATS_STATE     = DomainStatsTypes(( /*line :788:44*/_Ciconst_VIR_DOMAIN_STATS_STATE /*line :788:67*/))
	DOMAIN_STATS_CPU_TOTAL = DomainStatsTypes(( /*line :789:44*/_Ciconst_VIR_DOMAIN_STATS_CPU_TOTAL /*line :789:71*/))
	DOMAIN_STATS_BALLOON   = DomainStatsTypes(( /*line :790:44*/_Ciconst_VIR_DOMAIN_STATS_BALLOON /*line :790:69*/))
	DOMAIN_STATS_VCPU      = DomainStatsTypes(( /*line :791:44*/_Ciconst_VIR_DOMAIN_STATS_VCPU /*line :791:66*/))
	DOMAIN_STATS_INTERFACE = DomainStatsTypes(( /*line :792:44*/_Ciconst_VIR_DOMAIN_STATS_INTERFACE /*line :792:71*/))
	DOMAIN_STATS_BLOCK     = DomainStatsTypes(( /*line :793:44*/_Ciconst_VIR_DOMAIN_STATS_BLOCK /*line :793:67*/))
	DOMAIN_STATS_PERF      = DomainStatsTypes(( /*line :794:44*/_Ciconst_VIR_DOMAIN_STATS_PERF /*line :794:66*/))
	DOMAIN_STATS_IOTHREAD  = DomainStatsTypes(( /*line :795:44*/_Ciconst_VIR_DOMAIN_STATS_IOTHREAD /*line :795:70*/))
	DOMAIN_STATS_MEMORY    = DomainStatsTypes(( /*line :796:44*/_Ciconst_VIR_DOMAIN_STATS_MEMORY /*line :796:68*/))
	DOMAIN_STATS_DIRTYRATE = DomainStatsTypes(( /*line :797:44*/_Ciconst_VIR_DOMAIN_STATS_DIRTYRATE /*line :797:71*/))
	DOMAIN_STATS_VM        = DomainStatsTypes(( /*line :798:44*/_Ciconst_VIR_DOMAIN_STATS_VM /*line :798:64*/))
)

type DomainCoreDumpFlags uint

const (
	DUMP_CRASH        = DomainCoreDumpFlags(( /*line :804:42*/_Ciconst_VIR_DUMP_CRASH /*line :804:57*/))
	DUMP_LIVE         = DomainCoreDumpFlags(( /*line :805:42*/_Ciconst_VIR_DUMP_LIVE /*line :805:56*/))
	DUMP_BYPASS_CACHE = DomainCoreDumpFlags(( /*line :806:42*/_Ciconst_VIR_DUMP_BYPASS_CACHE /*line :806:64*/))
	DUMP_RESET        = DomainCoreDumpFlags(( /*line :807:42*/_Ciconst_VIR_DUMP_RESET /*line :807:57*/))
	DUMP_MEMORY_ONLY  = DomainCoreDumpFlags(( /*line :808:42*/_Ciconst_VIR_DUMP_MEMORY_ONLY /*line :808:63*/))
)

type DomainMemoryFlags uint

const (
	MEMORY_VIRTUAL  = DomainMemoryFlags(( /*line :814:38*/_Ciconst_VIR_MEMORY_VIRTUAL /*line :814:57*/))
	MEMORY_PHYSICAL = DomainMemoryFlags(( /*line :815:38*/_Ciconst_VIR_MEMORY_PHYSICAL /*line :815:58*/))
)

type DomainMigrateFlags uint

const (
	MIGRATE_LIVE                          = DomainMigrateFlags(( /*line :821:61*/_Ciconst_VIR_MIGRATE_LIVE /*line :821:78*/))
	MIGRATE_PEER2PEER                     = DomainMigrateFlags(( /*line :822:61*/_Ciconst_VIR_MIGRATE_PEER2PEER /*line :822:83*/))
	MIGRATE_TUNNELLED                     = DomainMigrateFlags(( /*line :823:61*/_Ciconst_VIR_MIGRATE_TUNNELLED /*line :823:83*/))
	MIGRATE_PERSIST_DEST                  = DomainMigrateFlags(( /*line :824:61*/_Ciconst_VIR_MIGRATE_PERSIST_DEST /*line :824:86*/))
	MIGRATE_UNDEFINE_SOURCE               = DomainMigrateFlags(( /*line :825:61*/_Ciconst_VIR_MIGRATE_UNDEFINE_SOURCE /*line :825:89*/))
	MIGRATE_PAUSED                        = DomainMigrateFlags(( /*line :826:61*/_Ciconst_VIR_MIGRATE_PAUSED /*line :826:80*/))
	MIGRATE_NON_SHARED_DISK               = DomainMigrateFlags(( /*line :827:61*/_Ciconst_VIR_MIGRATE_NON_SHARED_DISK /*line :827:89*/))
	MIGRATE_NON_SHARED_INC                = DomainMigrateFlags(( /*line :828:61*/_Ciconst_VIR_MIGRATE_NON_SHARED_INC /*line :828:88*/))
	MIGRATE_CHANGE_PROTECTION             = DomainMigrateFlags(( /*line :829:61*/_Ciconst_VIR_MIGRATE_CHANGE_PROTECTION /*line :829:91*/))
	MIGRATE_UNSAFE                        = DomainMigrateFlags(( /*line :830:61*/_Ciconst_VIR_MIGRATE_UNSAFE /*line :830:80*/))
	MIGRATE_OFFLINE                       = DomainMigrateFlags(( /*line :831:61*/_Ciconst_VIR_MIGRATE_OFFLINE /*line :831:81*/))
	MIGRATE_COMPRESSED                    = DomainMigrateFlags(( /*line :832:61*/_Ciconst_VIR_MIGRATE_COMPRESSED /*line :832:84*/))
	MIGRATE_ABORT_ON_ERROR                = DomainMigrateFlags(( /*line :833:61*/_Ciconst_VIR_MIGRATE_ABORT_ON_ERROR /*line :833:88*/))
	MIGRATE_AUTO_CONVERGE                 = DomainMigrateFlags(( /*line :834:61*/_Ciconst_VIR_MIGRATE_AUTO_CONVERGE /*line :834:87*/))
	MIGRATE_RDMA_PIN_ALL                  = DomainMigrateFlags(( /*line :835:61*/_Ciconst_VIR_MIGRATE_RDMA_PIN_ALL /*line :835:86*/))
	MIGRATE_POSTCOPY                      = DomainMigrateFlags(( /*line :836:61*/_Ciconst_VIR_MIGRATE_POSTCOPY /*line :836:82*/))
	MIGRATE_TLS                           = DomainMigrateFlags(( /*line :837:61*/_Ciconst_VIR_MIGRATE_TLS /*line :837:77*/))
	MIGRATE_PARALLEL                      = DomainMigrateFlags(( /*line :838:61*/_Ciconst_VIR_MIGRATE_PARALLEL /*line :838:82*/))
	MIGRATE_NON_SHARED_SYNCHRONOUS_WRITES = DomainMigrateFlags(( /*line :839:61*/_Ciconst_VIR_MIGRATE_NON_SHARED_SYNCHRONOUS_WRITES /*line :839:103*/))
	MIGRATE_POSTCOPY_RESUME               = DomainMigrateFlags(( /*line :840:61*/_Ciconst_VIR_MIGRATE_POSTCOPY_RESUME /*line :840:89*/))
	MIGRATE_ZEROCOPY                      = DomainMigrateFlags(( /*line :841:61*/_Ciconst_VIR_MIGRATE_ZEROCOPY /*line :841:82*/))
)

type DomainMigrateMaxSpeedFlags uint

const (
	MIGRATE_MAX_SPEED_POSTCOPY = DomainMigrateMaxSpeedFlags(( /*line :847:58*/_Ciconst_VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY /*line :847:96*/))
)

type DomainSaveImageXMLFlags uint

const (
	DOMAIN_SAVE_IMAGE_XML_SECURE = DomainSaveImageXMLFlags(( /*line :853:57*/_Ciconst_VIR_DOMAIN_SAVE_IMAGE_XML_SECURE /*line :853:90*/))
)

type VcpuState int

const (
	VCPU_OFFLINE = VcpuState(( /*line :859:27*/_Ciconst_VIR_VCPU_OFFLINE /*line :859:44*/))
	VCPU_RUNNING = VcpuState(( /*line :860:27*/_Ciconst_VIR_VCPU_RUNNING /*line :860:44*/))
	VCPU_BLOCKED = VcpuState(( /*line :861:27*/_Ciconst_VIR_VCPU_BLOCKED /*line :861:44*/))
)

type VcpuHostCpuState int

const (
	VCPU_INFO_CPU_OFFLINE     = VcpuHostCpuState(( /*line :867:47*/_Ciconst_VIR_VCPU_INFO_CPU_OFFLINE /*line :867:73*/))
	VCPU_INFO_CPU_UNAVAILABLE = VcpuHostCpuState(( /*line :868:47*/_Ciconst_VIR_VCPU_INFO_CPU_UNAVAILABLE /*line :868:77*/))
)

type DomainJobOperationType int

const (
	DOMAIN_JOB_OPERATION_UNKNOWN         = DomainJobOperationType(( /*line :874:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_UNKNOWN /*line :874:97*/))
	DOMAIN_JOB_OPERATION_START           = DomainJobOperationType(( /*line :875:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_START /*line :875:95*/))
	DOMAIN_JOB_OPERATION_SAVE            = DomainJobOperationType(( /*line :876:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_SAVE /*line :876:94*/))
	DOMAIN_JOB_OPERATION_RESTORE         = DomainJobOperationType(( /*line :877:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_RESTORE /*line :877:97*/))
	DOMAIN_JOB_OPERATION_MIGRATION_IN    = DomainJobOperationType(( /*line :878:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN /*line :878:102*/))
	DOMAIN_JOB_OPERATION_MIGRATION_OUT   = DomainJobOperationType(( /*line :879:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT /*line :879:103*/))
	DOMAIN_JOB_OPERATION_SNAPSHOT        = DomainJobOperationType(( /*line :880:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_SNAPSHOT /*line :880:98*/))
	DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT = DomainJobOperationType(( /*line :881:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT /*line :881:105*/))
	DOMAIN_JOB_OPERATION_DUMP            = DomainJobOperationType(( /*line :882:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_DUMP /*line :882:94*/))
	DOMAIN_JOB_OPERATION_BACKUP          = DomainJobOperationType(( /*line :883:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_BACKUP /*line :883:96*/))
	DOMAIN_JOB_OPERATION_SNAPSHOT_DELETE = DomainJobOperationType(( /*line :884:64*/_Ciconst_VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_DELETE /*line :884:105*/))
)

type DomainBackupBeginFlags uint

const (
	DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL = DomainBackupBeginFlags(( /*line :890:62*/_Ciconst_VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL /*line :890:101*/))
)

type DomainBlockInfo struct {
	Capacity   uint64
	Allocation uint64
	Physical   uint64
}

type DomainInfo struct {
	State     DomainState
	MaxMem    uint64
	Memory    uint64
	NrVirtCpu uint
	CpuTime   uint64
}

type DomainMemoryStat struct {
	Tag int32
	Val uint64
}

type DomainVcpuInfo struct {
	Number  uint32
	State   int32
	CpuTime uint64
	Cpu     int32
	CpuMap  []bool
}

type DomainGuestInfoTypes int

const (
	DOMAIN_GUEST_INFO_USERS      = DomainGuestInfoTypes(( /*line :923:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_USERS /*line :923:82*/))
	DOMAIN_GUEST_INFO_OS         = DomainGuestInfoTypes(( /*line :924:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_OS /*line :924:79*/))
	DOMAIN_GUEST_INFO_TIMEZONE   = DomainGuestInfoTypes(( /*line :925:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_TIMEZONE /*line :925:85*/))
	DOMAIN_GUEST_INFO_HOSTNAME   = DomainGuestInfoTypes(( /*line :926:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_HOSTNAME /*line :926:85*/))
	DOMAIN_GUEST_INFO_FILESYSTEM = DomainGuestInfoTypes(( /*line :927:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_FILESYSTEM /*line :927:87*/))
	DOMAIN_GUEST_INFO_DISKS      = DomainGuestInfoTypes(( /*line :928:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_DISKS /*line :928:82*/))
	DOMAIN_GUEST_INFO_INTERFACES = DomainGuestInfoTypes(( /*line :929:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_INTERFACES /*line :929:87*/))
	DOMAIN_GUEST_INFO_LOAD       = DomainGuestInfoTypes(( /*line :930:54*/_Ciconst_VIR_DOMAIN_GUEST_INFO_LOAD /*line :930:81*/))
)

type DomainAgentSetResponseTimeoutValues int

const (
	DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK   = DomainAgentSetResponseTimeoutValues(( /*line :936:78*/_Ciconst_VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK /*line :936:118*/))
	DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT = DomainAgentSetResponseTimeoutValues(( /*line :937:78*/_Ciconst_VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT /*line :937:120*/))
	DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT  = DomainAgentSetResponseTimeoutValues(( /*line :938:78*/_Ciconst_VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT /*line :938:119*/))
)

type DomainGetHostnameFlags uint

const (
	DOMAIN_GET_HOSTNAME_AGENT = DomainGetHostnameFlags(( /*line :944:53*/_Ciconst_VIR_DOMAIN_GET_HOSTNAME_AGENT /*line :944:83*/))
	DOMAIN_GET_HOSTNAME_LEASE = DomainGetHostnameFlags(( /*line :945:53*/_Ciconst_VIR_DOMAIN_GET_HOSTNAME_LEASE /*line :945:83*/))
)

type DomainMemoryFailureRecipientType uint

const (
	DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_HYPERVISOR = DomainMemoryFailureRecipientType(( /*line :951:86*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_HYPERVISOR /*line :951:139*/))

	DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_GUEST = DomainMemoryFailureRecipientType(( /*line :953:81*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_GUEST /*line :953:129*/))
)

type DomainMemoryFailureActionType uint

const (
	DOMAIN_EVENT_MEMORY_FAILURE_ACTION_IGNORE = DomainMemoryFailureActionType(( /*line :959:76*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_IGNORE /*line :959:122*/))

	DOMAIN_EVENT_MEMORY_FAILURE_ACTION_INJECT = DomainMemoryFailureActionType(( /*line :961:76*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_INJECT /*line :961:122*/))

	DOMAIN_EVENT_MEMORY_FAILURE_ACTION_FATAL = DomainMemoryFailureActionType(( /*line :963:75*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_FATAL /*line :963:120*/))

	DOMAIN_EVENT_MEMORY_FAILURE_ACTION_RESET = DomainMemoryFailureActionType(( /*line :965:75*/_Ciconst_VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_RESET /*line :965:120*/))
)

type DomainMemoryFailureFlags uint

const (
	DOMAIN_MEMORY_FAILURE_ACTION_REQUIRED = DomainMemoryFailureFlags(( /*line :971:67*/_Ciconst_VIR_DOMAIN_MEMORY_FAILURE_ACTION_REQUIRED /*line :971:109*/))
	DOMAIN_MEMORY_FAILURE_RECURSIVE       = DomainMemoryFailureFlags(( /*line :972:67*/_Ciconst_VIR_DOMAIN_MEMORY_FAILURE_RECURSIVE /*line :972:103*/))
)

type DomainAuthorizedSSHKeysFlags uint

const (
	DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND = DomainAuthorizedSSHKeysFlags(( /*line :978:71*/_Ciconst_VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND /*line :978:113*/))
	DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE = DomainAuthorizedSSHKeysFlags(( /*line :979:71*/_Ciconst_VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE /*line :979:113*/))
)

type DomainMessageType uint

const (
	DOMAIN_MESSAGE_DEPRECATION = DomainMessageType(( /*line :985:49*/_Ciconst_VIR_DOMAIN_MESSAGE_DEPRECATION /*line :985:80*/))
	DOMAIN_MESSAGE_TAINTING    = DomainMessageType(( /*line :986:49*/_Ciconst_VIR_DOMAIN_MESSAGE_TAINTING /*line :986:77*/))
	DOMAIN_MESSAGE_IOERRORS    = DomainMessageType(( /*line :987:49*/_Ciconst_VIR_DOMAIN_MESSAGE_IOERRORS /*line :987:77*/))
)

type DomainDirtyRateStatus uint

const (
	DOMAIN_DIRTYRATE_UNSTARTED = DomainDirtyRateStatus(( /*line :993:53*/_Ciconst_VIR_DOMAIN_DIRTYRATE_UNSTARTED /*line :993:84*/))
	DOMAIN_DIRTYRATE_MEASURING = DomainDirtyRateStatus(( /*line :994:53*/_Ciconst_VIR_DOMAIN_DIRTYRATE_MEASURING /*line :994:84*/))
	DOMAIN_DIRTYRATE_MEASURED  = DomainDirtyRateStatus(( /*line :995:53*/_Ciconst_VIR_DOMAIN_DIRTYRATE_MEASURED /*line :995:83*/))
)

type DomainDirtyRateCalcFlags uint

const (
	DOMAIN_DIRTYRATE_MODE_PAGE_SAMPLING = DomainDirtyRateCalcFlags(( /*line :1001:65*/_Ciconst_VIR_DOMAIN_DIRTYRATE_MODE_PAGE_SAMPLING /*line :1001:105*/))
	DOMAIN_DIRTYRATE_MODE_DIRTY_BITMAP  = DomainDirtyRateCalcFlags(( /*line :1002:65*/_Ciconst_VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_BITMAP /*line :1002:104*/))
	DOMAIN_DIRTYRATE_MODE_DIRTY_RING    = DomainDirtyRateCalcFlags(( /*line :1003:65*/_Ciconst_VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_RING /*line :1003:102*/))
)

type DomainAbortJobFlags uint

const (
	DOMAIN_ABORT_JOB_POSTCOPY = DomainAbortJobFlags(( /*line :1009:50*/_Ciconst_VIR_DOMAIN_ABORT_JOB_POSTCOPY /*line :1009:80*/))
)

type DomainFDAssociateFlags uint

const (
	DOMAIN_FD_ASSOCIATE_SECLABEL_RESTORE  = DomainFDAssociateFlags(( /*line :1015:65*/_Ciconst_VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_RESTORE /*line :1015:106*/))
	DOMAIN_FD_ASSOCIATE_SECLABEL_WRITABLE = DomainFDAssociateFlags(( /*line :1016:65*/_Ciconst_VIR_DOMAIN_FD_ASSOCIATE_SECLABEL_WRITABLE /*line :1016:107*/))
)

type DomainGraphicsReloadType uint

const (
	DOMAIN_GRAPHICS_RELOAD_TYPE_ANY = DomainGraphicsReloadType(( /*line :1022:61*/_Ciconst_VIR_DOMAIN_GRAPHICS_RELOAD_TYPE_ANY /*line :1022:97*/))
	DOMAIN_GRAPHICS_RELOAD_TYPE_VNC = DomainGraphicsReloadType(( /*line :1023:61*/_Ciconst_VIR_DOMAIN_GRAPHICS_RELOAD_TYPE_VNC /*line :1023:97*/))
)

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainFree
func (d *Domain) Free() error {
	var err  /*line :1028:10*/_Ctype_virError /*line :1028:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1029:32*/d.ptr; _cgoBase1 := /*line :1029:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1029:44*/_Cfunc_virDomainFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainRef
func (c *Domain) Ref() error {
	var err  /*line :1038:10*/_Ctype_virError /*line :1038:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1039:31*/c.ptr; _cgoBase1 := /*line :1039:38*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1039:43*/_Cfunc_virDomainRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCreate
func (d *Domain) Create() error {
	var err  /*line :1048:10*/_Ctype_virError /*line :1048:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1049:37*/d.ptr; _cgoBase1 := /*line :1049:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1049:49*/_Cfunc_virDomainCreateWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCreateWithFlags
func (d *Domain) CreateWithFlags(flags DomainCreateFlags) error {
	var err  /*line :1058:10*/_Ctype_virError /*line :1058:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1059:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1059:59*/(flags); _cgoBase2 := /*line :1059:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1059:73*/_Cfunc_virDomainCreateWithFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCreateWithFiles
func (d *Domain) CreateWithFiles(files []os.File, flags DomainCreateFlags) error {
	nfiles := len(files)
	cfiles := make([] /*line :1069:19*/_Ctype_int /*line :1069:24*/, nfiles)
	for i := 0; i < nfiles; i++ {
		cfiles[i] =  /*line :1071:15*/_Ctype_int /*line :1071:20*/(files[i].Fd())
	}

	var err  /*line :1074:10*/_Ctype_virError /*line :1074:20*/
	var cfilesPtr * /*line :1075:17*/_Ctype_int /*line :1075:22*/ = nil
	if nfiles > 0 {
		cfilesPtr = &cfiles[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :1079:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1079:59*/(nfiles); var _cgo2 *_Ctype_int = /*line :1079:69*/cfilesPtr; var _cgo3 _Ctype_uint = _Ctype_uint /*line :1079:86*/(flags); _cgoBase4 := /*line :1079:95*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1079:100*/_Cfunc_virDomainCreateWithFilesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDestroy
func (d *Domain) Destroy() error {
	var err  /*line :1088:10*/_Ctype_virError /*line :1088:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1089:38*/d.ptr; _cgoBase1 := /*line :1089:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1089:50*/_Cfunc_virDomainDestroyWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainShutdown
func (d *Domain) Shutdown() error {
	var err  /*line :1098:10*/_Ctype_virError /*line :1098:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1099:39*/d.ptr; _cgoBase1 := /*line :1099:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1099:51*/_Cfunc_virDomainShutdownWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainReboot
func (d *Domain) Reboot(flags DomainRebootFlagValues) error {
	var err  /*line :1108:10*/_Ctype_virError /*line :1108:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1109:37*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1109:50*/(flags); _cgoBase2 := /*line :1109:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1109:64*/_Cfunc_virDomainRebootWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainIsActive
func (d *Domain) IsActive() (bool, error) {
	var err  /*line :1118:10*/_Ctype_virError /*line :1118:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1119:39*/d.ptr; _cgoBase1 := /*line :1119:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1119:51*/_Cfunc_virDomainIsActiveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainIsPersistent
func (d *Domain) IsPersistent() (bool, error) {
	var err  /*line :1131:10*/_Ctype_virError /*line :1131:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1132:43*/d.ptr; _cgoBase1 := /*line :1132:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1132:55*/_Cfunc_virDomainIsPersistentWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainIsUpdated
func (d *Domain) IsUpdated() (bool, error) {
	var err  /*line :1144:10*/_Ctype_virError /*line :1144:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1145:40*/d.ptr; _cgoBase1 := /*line :1145:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1145:52*/_Cfunc_virDomainIsUpdatedWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetAutostart
func (d *Domain) SetAutostart(autostart bool) error {
	var cAutostart  /*line :1157:17*/_Ctype_int /*line :1157:22*/
	switch autostart {
	case true:
		cAutostart = 1
	default:
		cAutostart = 0
	}
	var err  /*line :1164:10*/_Ctype_virError /*line :1164:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1165:43*/d.ptr; var _cgo1 _Ctype_int = /*line :1165:50*/cAutostart; _cgoBase2 := /*line :1165:62*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1165:67*/_Cfunc_virDomainSetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetAutostart
func (d *Domain) GetAutostart() (bool, error) {
	var out  /*line :1174:10*/_Ctype_int /*line :1174:15*/
	var err  /*line :1175:10*/_Ctype_virError /*line :1175:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1176:43*/d.ptr; var _cgo1 *_Ctype_int = /*line :1176:50*/(*_Ctype_int /*line :1176:57*/)(unsafe.Pointer(&out)); _cgoBase2 := /*line :1176:82*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1176:87*/_Cfunc_virDomainGetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	switch out {
	case 1:
		return true, nil
	default:
		return false, nil
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetAutostartOnce
func (d *Domain) SetAutostartOnce(autostart bool) error {
	var cAutostart  /*line :1190:17*/_Ctype_int /*line :1190:22*/
	switch autostart {
	case true:
		cAutostart = 1
	default:
		cAutostart = 0
	}
	var err  /*line :1197:10*/_Ctype_virError /*line :1197:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1198:47*/d.ptr; var _cgo1 _Ctype_int = /*line :1198:54*/cAutostart; _cgoBase2 := /*line :1198:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1198:71*/_Cfunc_virDomainSetAutostartOnceWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetAutostartOnce
func (d *Domain) GetAutostartOnce() (bool, error) {
	var out  /*line :1207:10*/_Ctype_int /*line :1207:15*/
	var err  /*line :1208:10*/_Ctype_virError /*line :1208:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1209:47*/d.ptr; var _cgo1 *_Ctype_int = /*line :1209:54*/(*_Ctype_int /*line :1209:61*/)(unsafe.Pointer(&out)); _cgoBase2 := /*line :1209:86*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1209:91*/_Cfunc_virDomainGetAutostartOnceWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	switch out {
	case 1:
		return true, nil
	default:
		return false, nil
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetBlockInfo
func (d *Domain) GetBlockInfo(disk string, flags uint32) (*DomainBlockInfo, error) {
	var cinfo  /*line :1223:12*/_Ctype_virDomainBlockInfo /*line :1223:32*/
	cDisk := ( /*line :1224:11*/_Cfunc_CString /*line :1224:19*/)(disk)
	defer func() func() { _cgo0 := /*line :1225:15*/unsafe.Pointer(cDisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1225:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1226:10*/_Ctype_virError /*line :1226:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1227:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :1227:50*/cDisk; var _cgo2 *_Ctype_struct__virDomainBlockInfo = /*line :1227:57*/&cinfo; var _cgo3 _Ctype_uint = _Ctype_uint /*line :1227:71*/(flags); _cgoBase4 := /*line :1227:80*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1227:85*/_Cfunc_virDomainGetBlockInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == -1 {
		return nil, makeError(&err)
	}

	return &DomainBlockInfo{
		Capacity:   uint64(cinfo.capacity),
		Allocation: uint64(cinfo.allocation),
		Physical:   uint64(cinfo.physical),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetName
func (d *Domain) GetName() (string, error) {
	var err  /*line :1241:10*/_Ctype_virError /*line :1241:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :1242:36*/d.ptr; _cgoBase1 := /*line :1242:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1242:48*/_Cfunc_virDomainGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :1246:9*/_Cfunc_GoString /*line :1246:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetState
func (d *Domain) GetState() (DomainState, int, error) {
	var cState  /*line :1251:13*/_Ctype_int /*line :1251:18*/
	var cReason  /*line :1252:14*/_Ctype_int /*line :1252:19*/
	var err  /*line :1253:10*/_Ctype_virError /*line :1253:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1254:39*/d.ptr; var _cgo1 *_Ctype_int = /*line :1255:3*/(*_Ctype_int /*line :1255:10*/)(unsafe.Pointer(&cState)); var _cgo2 *_Ctype_int = /*line :1256:3*/(*_Ctype_int /*line :1256:10*/)(unsafe.Pointer(&cReason)); var _cgo3 _Ctype_uint = /*line :1257:3*/0; _cgoBase4 := /*line :1257:6*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1257:11*/_Cfunc_virDomainGetStateWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if int(result) == -1 {
		return 0, 0, makeError(&err)
	}
	return DomainState(cState), int(cReason), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetID
func (d *Domain) GetID() (uint, error) {
	var err  /*line :1266:10*/_Ctype_virError /*line :1266:20*/
	id := func() _Ctype_uint{ _cgo0 := /*line :1267:32*/d.ptr; _cgoBase1 := /*line :1267:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1267:44*/_Cfunc_virDomainGetIDWrapper(_cgo0, _cgo1); }()
	if id == ^ /*line :1268:12*/_Ctype_uint /*line :1268:18*/(0) {
		return uint(id), makeError(&err)
	}
	return uint(id), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetUUID
func (d *Domain) GetUUID() ([]byte, error) {
	var cUuid [( /*line :1276:13*/_Ciconst_VIR_UUID_BUFLEN /*line :1276:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :1278:10*/_Ctype_virError /*line :1278:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1279:38*/d.ptr; var _cgo1 *_Ctype_uchar = /*line :1279:45*/(*_Ctype_uchar /*line :1279:54*/)(cuidPtr); _cgoBase2 := /*line :1279:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1279:71*/_Cfunc_virDomainGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :1283:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :1283:28*/_Ciconst_VIR_UUID_BUFLEN /*line :1283:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :1283:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetUUIDString
func (d *Domain) GetUUIDString() (string, error) {
	var cUuid [( /*line :1288:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :1288:36*/)]( /*line :1288:39*/_Ctype_char /*line :1288:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :1290:10*/_Ctype_virError /*line :1290:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1291:44*/d.ptr; var _cgo1 *_Ctype_char = /*line :1291:51*/(*_Ctype_char /*line :1291:59*/)(cuidPtr); _cgoBase2 := /*line :1291:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1291:76*/_Cfunc_virDomainGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :1295:9*/_Cfunc_GoString /*line :1295:18*/)((* /*line :1295:22*/_Ctype_char /*line :1295:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetInfo
func (d *Domain) GetInfo() (*DomainInfo, error) {
	var cinfo  /*line :1300:12*/_Ctype_virDomainInfo /*line :1300:27*/
	var err  /*line :1301:10*/_Ctype_virError /*line :1301:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1302:38*/d.ptr; var _cgo1 *_Ctype_struct__virDomainInfo = /*line :1302:45*/&cinfo; _cgoBase2 := /*line :1302:53*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1302:58*/_Cfunc_virDomainGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return nil, makeError(&err)
	}
	return &DomainInfo{
		State:     DomainState(cinfo.state),
		MaxMem:    uint64(cinfo.maxMem),
		Memory:    uint64(cinfo.memory),
		NrVirtCpu: uint(cinfo.nrVirtCpu),
		CpuTime:   uint64(cinfo.cpuTime),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetXMLDesc
func (d *Domain) GetXMLDesc(flags DomainXMLFlags) (string, error) {
	var err  /*line :1317:10*/_Ctype_virError /*line :1317:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :1318:41*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1318:54*/(flags); _cgoBase2 := /*line :1318:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1318:68*/_Cfunc_virDomainGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :1322:9*/_Cfunc_GoString /*line :1322:18*/)(result)
	func() { _cgo0 := /*line :1323:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :1323:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

type DomainCPUStats struct {
	CpuTimeSet    bool
	CpuTime       uint64
	UserTimeSet   bool
	UserTime      uint64
	SystemTimeSet bool
	SystemTime    uint64
	VcpuTimeSet   bool
	VcpuTime      uint64
}

func getCPUStatsFieldInfo(params *DomainCPUStats) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :1340:3*/_Csconst_VIR_DOMAIN_CPU_STATS_CPUTIME /*line :1340:32*/): typedParamsFieldInfo{
			set: &params.CpuTimeSet,
			ul:  &params.CpuTime,
		},
		( /*line :1344:3*/_Csconst_VIR_DOMAIN_CPU_STATS_USERTIME /*line :1344:33*/): typedParamsFieldInfo{
			set: &params.UserTimeSet,
			ul:  &params.UserTime,
		},
		( /*line :1348:3*/_Csconst_VIR_DOMAIN_CPU_STATS_SYSTEMTIME /*line :1348:35*/): typedParamsFieldInfo{
			set: &params.SystemTimeSet,
			ul:  &params.SystemTime,
		},
		( /*line :1352:3*/_Csconst_VIR_DOMAIN_CPU_STATS_VCPUTIME /*line :1352:33*/): typedParamsFieldInfo{
			set: &params.VcpuTimeSet,
			ul:  &params.VcpuTime,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetCPUStats
func (d *Domain) GetCPUStats(startCpu int, nCpus uint, flags uint32) ([]DomainCPUStats, error) {
	var err  /*line :1361:10*/_Ctype_virError /*line :1361:20*/
	if nCpus == 0 {
		if startCpu == -1 {
			nCpus = 1
		} else {
			ret := func() _Ctype_int{ _cgo0 := /*line :1366:41*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :1366:48*/nil; var _cgo2 _Ctype_uint = /*line :1366:53*/0; var _cgo3 _Ctype_int = /*line :1366:56*/0; var _cgo4 _Ctype_uint = /*line :1366:59*/0; var _cgo5 _Ctype_uint = /*line :1366:62*/0; _cgoBase6 := /*line :1366:65*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :1366:70*/_Cfunc_virDomainGetCPUStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
			if ret == -1 {
				return []DomainCPUStats{}, makeError(&err)
			}
			nCpus = uint(ret)
		}
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :1374:39*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :1374:46*/nil; var _cgo2 _Ctype_uint = /*line :1374:51*/0; var _cgo3 _Ctype_int = _Ctype_int /*line :1374:59*/(startCpu); var _cgo4 _Ctype_uint = _Ctype_uint /*line :1374:77*/(nCpus); var _cgo5 _Ctype_uint = /*line :1374:86*/0; _cgoBase6 := /*line :1374:89*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :1374:94*/_Cfunc_virDomainGetCPUStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == -1 {
		return []DomainCPUStats{}, makeError(&err)
	}
	cnparams :=  /*line :1378:14*/_Ctype_int /*line :1378:19*/(ret)

	var cnallocparams  /*line :1380:20*/_Ctype_int /*line :1380:25*/
	if startCpu == -1 {
		cnallocparams = cnparams
	} else {
		cnallocparams = cnparams *  /*line :1384:30*/_Ctype_int /*line :1384:35*/(nCpus)
	}
	cparams := typedParamsNew(cnallocparams)
	defer ( /*line :1387:8*/_Cfunc_virTypedParamsFreeWrapper /*line :1387:34*/)(cparams, cnallocparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :1388:38*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :1388:45*/cparams; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1388:60*/(cnparams); var _cgo3 _Ctype_int = _Ctype_int /*line :1388:77*/(startCpu); var _cgo4 _Ctype_uint = _Ctype_uint /*line :1388:95*/(nCpus); var _cgo5 _Ctype_uint = _Ctype_uint /*line :1388:110*/(flags); _cgoBase6 := /*line :1388:119*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :1388:124*/_Cfunc_virDomainGetCPUStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == -1 {
		return []DomainCPUStats{}, makeError(&err)
	}

	stats := make([]DomainCPUStats, nCpus)
	for i := 0; i < int(nCpus); i++ {
		coffset :=  /*line :1395:14*/_Ctype_int /*line :1395:19*/(i) * cnparams
		info := getCPUStatsFieldInfo(&stats[i])
		var cparamscpu * /*line :1397:19*/_Ctype_virTypedParameter /*line :1397:38*/
		cparamscpu = (* /*line :1398:18*/_Ctype_virTypedParameter /*line :1398:37*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cparams)) +
			(unsafe.Sizeof(*cparams) * uintptr(coffset))))
		_, gerr := typedParamsUnpack(cparamscpu, cnparams, info)
		if gerr != nil {
			return []DomainCPUStats{}, gerr
		}
	}
	return stats, nil
}

type DomainInterfaceParameters struct {
	BandwidthInAverageSet  bool
	BandwidthInAverage     uint
	BandwidthInPeakSet     bool
	BandwidthInPeak        uint
	BandwidthInBurstSet    bool
	BandwidthInBurst       uint
	BandwidthInFloorSet    bool
	BandwidthInFloor       uint
	BandwidthOutAverageSet bool
	BandwidthOutAverage    uint
	BandwidthOutPeakSet    bool
	BandwidthOutPeak       uint
	BandwidthOutBurstSet   bool
	BandwidthOutBurst      uint
}

func getInterfaceParameterFieldInfo(params *DomainInterfaceParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :1427:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_IN_AVERAGE /*line :1427:35*/): typedParamsFieldInfo{
			set: &params.BandwidthInAverageSet,
			ui:  &params.BandwidthInAverage,
		},
		( /*line :1431:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_IN_PEAK /*line :1431:32*/): typedParamsFieldInfo{
			set: &params.BandwidthInPeakSet,
			ui:  &params.BandwidthInPeak,
		},
		( /*line :1435:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_IN_BURST /*line :1435:33*/): typedParamsFieldInfo{
			set: &params.BandwidthInBurstSet,
			ui:  &params.BandwidthInBurst,
		},
		( /*line :1439:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_IN_FLOOR /*line :1439:33*/): typedParamsFieldInfo{
			set: &params.BandwidthInFloorSet,
			ui:  &params.BandwidthInFloor,
		},
		( /*line :1443:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE /*line :1443:36*/): typedParamsFieldInfo{
			set: &params.BandwidthOutAverageSet,
			ui:  &params.BandwidthOutAverage,
		},
		( /*line :1447:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_OUT_PEAK /*line :1447:33*/): typedParamsFieldInfo{
			set: &params.BandwidthOutPeakSet,
			ui:  &params.BandwidthOutPeak,
		},
		( /*line :1451:3*/_Csconst_VIR_DOMAIN_BANDWIDTH_OUT_BURST /*line :1451:34*/): typedParamsFieldInfo{
			set: &params.BandwidthOutBurstSet,
			ui:  &params.BandwidthOutBurst,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetInterfaceParameters
func (d *Domain) GetInterfaceParameters(device string, flags DomainModificationImpact) (*DomainInterfaceParameters, error) {
	params := &DomainInterfaceParameters{}
	info := getInterfaceParameterFieldInfo(params)

	var cnparams  /*line :1463:15*/_Ctype_int /*line :1463:20*/

	cdevice := ( /*line :1465:13*/_Cfunc_CString /*line :1465:21*/)(device)
	defer func() func() { _cgo0 := /*line :1466:15*/unsafe.Pointer(cdevice); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1466:39*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1467:10*/_Ctype_virError /*line :1467:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1468:50*/d.ptr; var _cgo1 *_Ctype_char = /*line :1468:57*/cdevice; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :1468:66*/nil; var _cgo3 *_Ctype_int = /*line :1468:71*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1468:88*/(0); _cgoBase5 := /*line :1468:93*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1468:98*/_Cfunc_virDomainGetInterfaceParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :1474:8*/_Cfunc_virTypedParamsFreeWrapper /*line :1474:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :1475:49*/d.ptr; var _cgo1 *_Ctype_char = /*line :1475:56*/cdevice; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :1475:65*/cparams; var _cgo3 *_Ctype_int = /*line :1475:74*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1475:91*/(flags); _cgoBase5 := /*line :1475:100*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1475:105*/_Cfunc_virDomainGetInterfaceParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetInterfaceParameters
func (d *Domain) SetInterfaceParameters(device string, params *DomainInterfaceParameters, flags DomainModificationImpact) error {
	info := getInterfaceParameterFieldInfo(params)

	cdevice := ( /*line :1492:13*/_Cfunc_CString /*line :1492:21*/)(device)
	defer func() func() { _cgo0 := /*line :1493:15*/unsafe.Pointer(cdevice); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1493:39*/_Cfunc_free(_cgo0); }}()()

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :1500:8*/_Cfunc_virTypedParamsFreeWrapper /*line :1500:34*/)(cparams, cnparams)

	var err  /*line :1502:10*/_Ctype_virError /*line :1502:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1503:50*/d.ptr; var _cgo1 *_Ctype_char = /*line :1503:57*/cdevice; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :1503:66*/cparams; var _cgo3 _Ctype_int = /*line :1503:75*/cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1503:91*/(flags); _cgoBase5 := /*line :1503:100*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1503:105*/_Cfunc_virDomainSetInterfaceParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetMetadata
func (d *Domain) GetMetadata(metadataType DomainMetadataType, uri string, flags DomainModificationImpact) (string, error) {
	var cUri * /*line :1513:12*/_Ctype_char /*line :1513:18*/
	if uri != "" {
		cUri = ( /*line :1515:10*/_Cfunc_CString /*line :1515:18*/)(uri)
		defer func() func() { _cgo0 := /*line :1516:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1516:37*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :1519:10*/_Ctype_virError /*line :1519:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :1520:42*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1520:54*/(metadataType); var _cgo2 *_Ctype_char = /*line :1520:70*/cUri; var _cgo3 _Ctype_uint = _Ctype_uint /*line :1520:82*/(flags); _cgoBase4 := /*line :1520:91*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1520:96*/_Cfunc_virDomainGetMetadataWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == nil {
		return "", makeError(&err)

	}
	defer func() func() { _cgo0 := /*line :1525:15*/unsafe.Pointer(result); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1525:38*/_Cfunc_free(_cgo0); }}()()
	return ( /*line :1526:9*/_Cfunc_GoString /*line :1526:18*/)(result), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMetadata
func (d *Domain) SetMetadata(metadataType DomainMetadataType, metaDataCont, uriKey, uri string, flags DomainModificationImpact) error {
	var cMetaDataCont * /*line :1531:21*/_Ctype_char /*line :1531:27*/
	var cUriKey * /*line :1532:15*/_Ctype_char /*line :1532:21*/
	var cUri * /*line :1533:12*/_Ctype_char /*line :1533:18*/

	if metaDataCont != "" {
		cMetaDataCont = ( /*line :1536:19*/_Cfunc_CString /*line :1536:27*/)(metaDataCont)
		defer func() func() { _cgo0 := /*line :1537:16*/unsafe.Pointer(cMetaDataCont); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1537:46*/_Cfunc_free(_cgo0); }}()()
	}

	if metadataType == DOMAIN_METADATA_ELEMENT {
		if uriKey != "" {
			cUriKey = ( /*line :1542:14*/_Cfunc_CString /*line :1542:22*/)(uriKey)
			defer func() func() { _cgo0 := /*line :1543:17*/unsafe.Pointer(cUriKey); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1543:41*/_Cfunc_free(_cgo0); }}()()
		}
		cUri = ( /*line :1545:10*/_Cfunc_CString /*line :1545:18*/)(uri)
		defer func() func() { _cgo0 := /*line :1546:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1546:37*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :1548:10*/_Ctype_virError /*line :1548:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1549:42*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1549:54*/(metadataType); var _cgo2 *_Ctype_char = /*line :1549:70*/cMetaDataCont; var _cgo3 *_Ctype_char = /*line :1549:85*/cUriKey; var _cgo4 *_Ctype_char = /*line :1549:94*/cUri; var _cgo5 _Ctype_uint = _Ctype_uint /*line :1549:106*/(flags); _cgoBase6 := /*line :1549:115*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :1549:120*/_Cfunc_virDomainSetMetadataWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainUndefine
func (d *Domain) Undefine() error {
	var err  /*line :1558:10*/_Ctype_virError /*line :1558:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1559:39*/d.ptr; _cgoBase1 := /*line :1559:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1559:51*/_Cfunc_virDomainUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainUndefineFlags
func (d *Domain) UndefineFlags(flags DomainUndefineFlagsValues) error {
	var err  /*line :1568:10*/_Ctype_virError /*line :1568:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1569:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1569:57*/(flags); _cgoBase2 := /*line :1569:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1569:71*/_Cfunc_virDomainUndefineFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMaxMemory
func (d *Domain) SetMaxMemory(memory uint64) error {
	var err  /*line :1578:10*/_Ctype_virError /*line :1578:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1579:43*/d.ptr; var _cgo1 _Ctype_ulong = _Ctype_ulong /*line :1579:57*/(memory); _cgoBase2 := /*line :1579:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1579:72*/_Cfunc_virDomainSetMaxMemoryWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMemory
func (d *Domain) SetMemory(memory uint64) error {
	var err  /*line :1588:10*/_Ctype_virError /*line :1588:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1589:40*/d.ptr; var _cgo1 _Ctype_ulong = _Ctype_ulong /*line :1589:54*/(memory); _cgoBase2 := /*line :1589:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1589:69*/_Cfunc_virDomainSetMemoryWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMemoryFlags
func (d *Domain) SetMemoryFlags(memory uint64, flags DomainMemoryModFlags) error {
	var err  /*line :1598:10*/_Ctype_virError /*line :1598:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1599:45*/d.ptr; var _cgo1 _Ctype_ulong = _Ctype_ulong /*line :1599:59*/(memory); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1599:75*/(flags); _cgoBase3 := /*line :1599:84*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1599:89*/_Cfunc_virDomainSetMemoryFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMemoryStatsPeriod
func (d *Domain) SetMemoryStatsPeriod(period int, flags DomainMemoryModFlags) error {
	var err  /*line :1608:10*/_Ctype_virError /*line :1608:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1609:51*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1609:63*/(period); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1609:79*/(flags); _cgoBase3 := /*line :1609:88*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1609:93*/_Cfunc_virDomainSetMemoryStatsPeriodWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetVcpus
func (d *Domain) SetVcpus(vcpu uint) error {
	var err  /*line :1618:10*/_Ctype_virError /*line :1618:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1619:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1619:52*/(vcpu); _cgoBase2 := /*line :1619:60*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1619:65*/_Cfunc_virDomainSetVcpusWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetVcpusFlags
func (d *Domain) SetVcpusFlags(vcpu uint, flags DomainVcpuFlags) error {
	var err  /*line :1628:10*/_Ctype_virError /*line :1628:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1629:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1629:57*/(vcpu); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1629:71*/(flags); _cgoBase3 := /*line :1629:80*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1629:85*/_Cfunc_virDomainSetVcpusFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSuspend
func (d *Domain) Suspend() error {
	var err  /*line :1638:10*/_Ctype_virError /*line :1638:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1639:38*/d.ptr; _cgoBase1 := /*line :1639:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1639:50*/_Cfunc_virDomainSuspendWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainResume
func (d *Domain) Resume() error {
	var err  /*line :1648:10*/_Ctype_virError /*line :1648:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1649:37*/d.ptr; _cgoBase1 := /*line :1649:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1649:49*/_Cfunc_virDomainResumeWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAbortJob
func (d *Domain) AbortJob() error {
	var err  /*line :1658:10*/_Ctype_virError /*line :1658:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1659:39*/d.ptr; _cgoBase1 := /*line :1659:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1659:51*/_Cfunc_virDomainAbortJobWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAbortJobFlags
func (d *Domain) AbortJobFlags(flags DomainAbortJobFlags) error {
	var err  /*line :1668:10*/_Ctype_virError /*line :1668:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1669:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1669:57*/(flags); _cgoBase2 := /*line :1669:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1669:71*/_Cfunc_virDomainAbortJobFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDestroyFlags
func (d *Domain) DestroyFlags(flags DomainDestroyFlags) error {
	var err  /*line :1678:10*/_Ctype_virError /*line :1678:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1679:43*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1679:56*/(flags); _cgoBase2 := /*line :1679:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1679:70*/_Cfunc_virDomainDestroyFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainShutdownFlags
func (d *Domain) ShutdownFlags(flags DomainShutdownFlags) error {
	var err  /*line :1688:10*/_Ctype_virError /*line :1688:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1689:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1689:57*/(flags); _cgoBase2 := /*line :1689:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1689:71*/_Cfunc_virDomainShutdownFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAttachDevice
func (d *Domain) AttachDevice(xml string) error {
	cXml := ( /*line :1698:10*/_Cfunc_CString /*line :1698:18*/)(xml)
	defer func() func() { _cgo0 := /*line :1699:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1699:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1700:10*/_Ctype_virError /*line :1700:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1701:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :1701:50*/cXml; _cgoBase2 := /*line :1701:56*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1701:61*/_Cfunc_virDomainAttachDeviceWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAttachDeviceFlags
func (d *Domain) AttachDeviceFlags(xml string, flags DomainDeviceModifyFlags) error {
	cXml := ( /*line :1710:10*/_Cfunc_CString /*line :1710:18*/)(xml)
	defer func() func() { _cgo0 := /*line :1711:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1711:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1712:10*/_Ctype_virError /*line :1712:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1713:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :1713:55*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1713:67*/(flags); _cgoBase3 := /*line :1713:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1713:81*/_Cfunc_virDomainAttachDeviceFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDetachDevice
func (d *Domain) DetachDevice(xml string) error {
	cXml := ( /*line :1722:10*/_Cfunc_CString /*line :1722:18*/)(xml)
	defer func() func() { _cgo0 := /*line :1723:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1723:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1724:10*/_Ctype_virError /*line :1724:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1725:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :1725:50*/cXml; _cgoBase2 := /*line :1725:56*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1725:61*/_Cfunc_virDomainDetachDeviceWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDetachDeviceFlags
func (d *Domain) DetachDeviceFlags(xml string, flags DomainDeviceModifyFlags) error {
	cXml := ( /*line :1734:10*/_Cfunc_CString /*line :1734:18*/)(xml)
	defer func() func() { _cgo0 := /*line :1735:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1735:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1736:10*/_Ctype_virError /*line :1736:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1737:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :1737:55*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1737:67*/(flags); _cgoBase3 := /*line :1737:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1737:81*/_Cfunc_virDomainDetachDeviceFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDetachDeviceAlias
func (d *Domain) DetachDeviceAlias(alias string, flags DomainDeviceModifyFlags) error {
	cAlias := ( /*line :1746:12*/_Cfunc_CString /*line :1746:20*/)(alias)
	defer func() func() { _cgo0 := /*line :1747:15*/unsafe.Pointer(cAlias); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1747:38*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1748:10*/_Ctype_virError /*line :1748:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1749:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :1749:55*/cAlias; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1749:69*/(flags); _cgoBase3 := /*line :1749:78*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1749:83*/_Cfunc_virDomainDetachDeviceAliasWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainUpdateDeviceFlags
func (d *Domain) UpdateDeviceFlags(xml string, flags DomainDeviceModifyFlags) error {
	cXml := ( /*line :1758:10*/_Cfunc_CString /*line :1758:18*/)(xml)
	defer func() func() { _cgo0 := /*line :1759:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1759:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1760:10*/_Ctype_virError /*line :1760:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1761:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :1761:55*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1761:67*/(flags); _cgoBase3 := /*line :1761:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1761:81*/_Cfunc_virDomainUpdateDeviceFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainScreenshot
func (d *Domain) Screenshot(stream *Stream, screen, flags uint32) (string, error) {
	var err  /*line :1770:10*/_Ctype_virError /*line :1770:20*/
	cType := func() *_Ctype_char{ _cgo0 := /*line :1771:40*/d.ptr; _cgo1 := /*line :1771:47*/stream.ptr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1771:65*/(screen); var _cgo3 _Ctype_uint = _Ctype_uint /*line :1771:81*/(flags); _cgoBase4 := /*line :1771:90*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1771:95*/_Cfunc_virDomainScreenshotWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if cType == nil {
		return "", makeError(&err)
	}
	defer func() func() { _cgo0 := /*line :1775:15*/unsafe.Pointer(cType); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1775:37*/_Cfunc_free(_cgo0); }}()()

	mimeType := ( /*line :1777:14*/_Cfunc_GoString /*line :1777:23*/)(cType)
	return mimeType, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSendKey
func (d *Domain) SendKey(codeset, holdtime uint, keycodes []uint, flags uint32) error {
	var err  /*line :1783:10*/_Ctype_virError /*line :1783:20*/
	nkeycodes := len(keycodes)
	ckeycodes := make([] /*line :1785:22*/_Ctype_uint /*line :1785:28*/, nkeycodes)
	for i, keycode := range keycodes {
		ckeycodes[i] =  /*line :1787:18*/_Ctype_uint /*line :1787:24*/(keycode)
	}

	var ckeycodesPtr * /*line :1790:20*/_Ctype_uint /*line :1790:26*/ = nil
	if nkeycodes > 0 {
		ckeycodesPtr = &ckeycodes[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :1794:38*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1794:51*/(codeset); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1794:68*/(holdtime); var _cgo3 *_Ctype_uint = /*line :1794:80*/ckeycodesPtr; var _cgo4 _Ctype_int = _Ctype_int /*line :1794:99*/(nkeycodes); var _cgo5 _Ctype_uint = _Ctype_uint /*line :1794:118*/(flags); _cgoBase6 := /*line :1794:127*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :1794:132*/_Cfunc_virDomainSendKeyWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if result == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainBlockStats struct {
	RdBytesSet         bool
	RdBytes            int64
	RdReqSet           bool
	RdReq              int64
	RdTotalTimesSet    bool
	RdTotalTimes       int64
	WrBytesSet         bool
	WrBytes            int64
	WrReqSet           bool
	WrReq              int64
	WrTotalTimesSet    bool
	WrTotalTimes       int64
	FlushReqSet        bool
	FlushReq           int64
	FlushTotalTimesSet bool
	FlushTotalTimes    int64
	ErrsSet            bool
	Errs               int64
}

func getBlockStatsFieldInfo(params *DomainBlockStats) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :1825:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_READ_BYTES /*line :1825:37*/): typedParamsFieldInfo{
			set: &params.RdBytesSet,
			l:   &params.RdBytes,
		},
		( /*line :1829:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_READ_REQ /*line :1829:35*/): typedParamsFieldInfo{
			set: &params.RdReqSet,
			l:   &params.RdReq,
		},
		( /*line :1833:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES /*line :1833:43*/): typedParamsFieldInfo{
			set: &params.RdTotalTimesSet,
			l:   &params.RdTotalTimes,
		},
		( /*line :1837:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES /*line :1837:38*/): typedParamsFieldInfo{
			set: &params.WrBytesSet,
			l:   &params.WrBytes,
		},
		( /*line :1841:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_WRITE_REQ /*line :1841:36*/): typedParamsFieldInfo{
			set: &params.WrReqSet,
			l:   &params.WrReq,
		},
		( /*line :1845:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES /*line :1845:44*/): typedParamsFieldInfo{
			set: &params.WrTotalTimesSet,
			l:   &params.WrTotalTimes,
		},
		( /*line :1849:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ /*line :1849:36*/): typedParamsFieldInfo{
			set: &params.FlushReqSet,
			l:   &params.FlushReq,
		},
		( /*line :1853:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES /*line :1853:44*/): typedParamsFieldInfo{
			set: &params.FlushTotalTimesSet,
			l:   &params.FlushTotalTimes,
		},
		( /*line :1857:3*/_Csconst_VIR_DOMAIN_BLOCK_STATS_ERRS /*line :1857:31*/): typedParamsFieldInfo{
			set: &params.ErrsSet,
			l:   &params.Errs,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockStatsFlags
func (d *Domain) BlockStatsFlags(disk string, flags uint32) (*DomainBlockStats, error) {
	params := &DomainBlockStats{}
	info := getBlockStatsFieldInfo(params)

	var cnparams  /*line :1869:15*/_Ctype_int /*line :1869:20*/

	cdisk := ( /*line :1871:11*/_Cfunc_CString /*line :1871:19*/)(disk)
	defer func() func() { _cgo0 := /*line :1872:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1872:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1873:10*/_Ctype_virError /*line :1873:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1874:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :1874:50*/cdisk; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :1874:57*/nil; var _cgo3 *_Ctype_int = /*line :1874:62*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1874:79*/(0); _cgoBase5 := /*line :1874:84*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1874:89*/_Cfunc_virDomainBlockStatsFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :1880:8*/_Cfunc_virTypedParamsFreeWrapper /*line :1880:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :1881:42*/d.ptr; var _cgo1 *_Ctype_char = /*line :1881:49*/cdisk; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :1881:56*/cparams; var _cgo3 *_Ctype_int = /*line :1881:65*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1881:82*/(flags); _cgoBase5 := /*line :1881:91*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1881:96*/_Cfunc_virDomainBlockStatsFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockStats
func (d *Domain) BlockStats(path string) (*DomainBlockStats, error) {
	cPath := ( /*line :1896:11*/_Cfunc_CString /*line :1896:19*/)(path)
	defer func() func() { _cgo0 := /*line :1897:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1897:37*/_Cfunc_free(_cgo0); }}()()

	size :=  /*line :1899:10*/_Ctype_size_t /*line :1899:18*/(unsafe.Sizeof( /*line :1899:33*/_Ctype_struct__virDomainBlockStats /*line :1899:62*/{}))

	cStats := ( /*line :1901:13*/_Ctype_virDomainBlockStatsPtr /*line :1901:37*/)(( /*line :1901:39*/_Cfunc__CMalloc /*line :1901:46*/)(size))
	defer func() func() { _cgo0 := /*line :1902:15*/unsafe.Pointer(cStats); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1902:38*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :1904:10*/_Ctype_virError /*line :1904:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1905:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :1905:48*/cPath; var _cgo2 *_Ctype_struct__virDomainBlockStats = /*line :1905:55*/(_Ctype_virDomainBlockStatsPtr /*line :1905:80*/)(cStats); var _cgo3 _Ctype_size_t = /*line :1905:91*/size; _cgoBase4 := /*line :1905:97*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1905:102*/_Cfunc_virDomainBlockStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result != 0 {
		return nil, makeError(&err)
	}
	return &DomainBlockStats{
		WrReqSet:   true,
		WrReq:      int64(cStats.wr_req),
		RdReqSet:   true,
		RdReq:      int64(cStats.rd_req),
		RdBytesSet: true,
		RdBytes:    int64(cStats.rd_bytes),
		WrBytesSet: true,
		WrBytes:    int64(cStats.wr_bytes),
	}, nil
}

type DomainInterfaceStats struct {
	RxBytesSet   bool
	RxBytes      int64
	RxPacketsSet bool
	RxPackets    int64
	RxErrsSet    bool
	RxErrs       int64
	RxDropSet    bool
	RxDrop       int64
	TxBytesSet   bool
	TxBytes      int64
	TxPacketsSet bool
	TxPackets    int64
	TxErrsSet    bool
	TxErrs       int64
	TxDropSet    bool
	TxDrop       int64
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainInterfaceStats
func (d *Domain) InterfaceStats(path string) (*DomainInterfaceStats, error) {
	cPath := ( /*line :1943:11*/_Cfunc_CString /*line :1943:19*/)(path)
	defer func() func() { _cgo0 := /*line :1944:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1944:37*/_Cfunc_free(_cgo0); }}()()

	size :=  /*line :1946:10*/_Ctype_size_t /*line :1946:18*/(unsafe.Sizeof( /*line :1946:33*/_Ctype_struct__virDomainInterfaceStats /*line :1946:66*/{}))

	cStats := ( /*line :1948:13*/_Ctype_virDomainInterfaceStatsPtr /*line :1948:41*/)(( /*line :1948:43*/_Cfunc__CMalloc /*line :1948:50*/)(size))
	defer func() func() { _cgo0 := /*line :1949:15*/unsafe.Pointer(cStats); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1949:38*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :1951:10*/_Ctype_virError /*line :1951:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :1952:45*/d.ptr; var _cgo1 *_Ctype_char = /*line :1952:52*/cPath; var _cgo2 *_Ctype_struct__virDomainInterfaceStats = /*line :1952:59*/(_Ctype_virDomainInterfaceStatsPtr /*line :1952:88*/)(cStats); var _cgo3 _Ctype_size_t = /*line :1952:99*/size; _cgoBase4 := /*line :1952:105*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1952:110*/_Cfunc_virDomainInterfaceStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result != 0 {
		return nil, makeError(&err)
	}
	return &DomainInterfaceStats{
		RxBytesSet:   true,
		RxBytes:      int64(cStats.rx_bytes),
		RxPacketsSet: true,
		RxPackets:    int64(cStats.rx_packets),
		RxErrsSet:    true,
		RxErrs:       int64(cStats.rx_errs),
		RxDropSet:    true,
		RxDrop:       int64(cStats.rx_drop),
		TxBytesSet:   true,
		TxBytes:      int64(cStats.tx_bytes),
		TxPacketsSet: true,
		TxPackets:    int64(cStats.tx_packets),
		TxErrsSet:    true,
		TxErrs:       int64(cStats.tx_errs),
		TxDropSet:    true,
		TxDrop:       int64(cStats.tx_drop),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMemoryStats
func (d *Domain) MemoryStats(nrStats uint32, flags uint32) ([]DomainMemoryStat, error) {
	cstats := make([] /*line :1979:19*/_Ctype_virDomainMemoryStatStruct /*line :1979:46*/, nrStats)

	var err  /*line :1981:10*/_Ctype_virError /*line :1981:20*/
	var cstatsPtr * /*line :1982:17*/_Ctype_virDomainMemoryStatStruct /*line :1982:44*/ = nil
	if nrStats > 0 {
		cstatsPtr = &cstats[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :1986:42*/d.ptr; var _cgo1 *_Ctype_struct__virDomainMemoryStat = /*line :1986:49*/cstatsPtr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1986:66*/(nrStats); var _cgo3 _Ctype_uint = _Ctype_uint /*line :1986:83*/(flags); _cgoBase4 := /*line :1986:92*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1986:97*/_Cfunc_virDomainMemoryStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result == -1 {
		return []DomainMemoryStat{}, makeError(&err)
	}

	out := make([]DomainMemoryStat, 0)
	for i := 0; i < int(result); i++ {
		out = append(out, DomainMemoryStat{
			Tag: int32(cstats[i].tag),
			Val: uint64(cstats[i].val),
		})
	}
	return out, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetConnect
//
// Contrary to the native C API behaviour, the Go API will
// acquire a reference on the returned Connect, which must
// be released by calling Close()
func (d *Domain) DomainGetConnect() (*Connect, error) {
	var err  /*line :2008:10*/_Ctype_virError /*line :2008:20*/
	ptr := func() _Ctype_virConnectPtr{ _cgo0 := /*line :2009:38*/d.ptr; _cgoBase1 := /*line :2009:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :2009:50*/_Cfunc_virDomainGetConnectWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil, makeError(&err)
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :2014:32*/ptr; _cgoBase1 := /*line :2014:37*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :2014:42*/_Cfunc_virConnectRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &Connect{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetVcpus
func (d *Domain) GetVcpus() ([]DomainVcpuInfo, error) {
	var cnodeinfo  /*line :2024:16*/_Ctype_virNodeInfo /*line :2024:29*/
	var err  /*line :2025:10*/_Ctype_virError /*line :2025:20*/
	ptr := func() _Ctype_virConnectPtr{ _cgo0 := /*line :2026:38*/d.ptr; _cgoBase1 := /*line :2026:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :2026:50*/_Cfunc_virDomainGetConnectWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return []DomainVcpuInfo{}, makeError(&err)
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :2030:33*/ptr; var _cgo1 *_Ctype_struct__virNodeInfo = /*line :2030:38*/&cnodeinfo; _cgoBase2 := /*line :2030:50*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2030:55*/_Cfunc_virNodeGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return []DomainVcpuInfo{}, makeError(&err)
	}

	var cdominfo  /*line :2035:15*/_Ctype_virDomainInfo /*line :2035:30*/
	ret = func() _Ctype_int{ _cgo0 := /*line :2036:34*/d.ptr; var _cgo1 *_Ctype_struct__virDomainInfo = /*line :2036:41*/&cdominfo; _cgoBase2 := /*line :2036:52*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2036:57*/_Cfunc_virDomainGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return []DomainVcpuInfo{}, makeError(&err)
	}

	nvcpus := int(cdominfo.nrVirtCpu)
	npcpus := int(cnodeinfo.nodes * cnodeinfo.sockets * cnodeinfo.cores * cnodeinfo.threads)
	maplen := ((npcpus + 7) / 8)
	ccpumaps := make([] /*line :2044:21*/_Ctype_uchar /*line :2044:28*/, maplen*nvcpus)
	cinfo := make([] /*line :2045:18*/_Ctype_virVcpuInfo /*line :2045:31*/, nvcpus)

	ret = func() _Ctype_int{ _cgo0 := /*line :2047:35*/d.ptr; var _cgo1 *_Ctype_struct__virVcpuInfo = /*line :2047:42*/&cinfo[0]; var _cgo2 _Ctype_int = _Ctype_int /*line :2047:58*/(nvcpus); var _cgo3 *_Ctype_uchar = /*line :2047:68*/&ccpumaps[0]; var _cgo4 _Ctype_int = _Ctype_int /*line :2047:87*/(maplen); _cgoBase5 := /*line :2047:97*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2047:102*/_Cfunc_virDomainGetVcpusWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return []DomainVcpuInfo{}, makeError(&err)
	}

	info := make([]DomainVcpuInfo, int(ret))
	for i := 0; i < int(ret); i++ {
		affinity := make([]bool, npcpus)
		for j := 0; j < npcpus; j++ {
			byte := (i * maplen) + (j / 8)
			bit := j % 8

			affinity[j] = (ccpumaps[byte] & (1 << uint(bit))) != 0
		}

		info[i] = DomainVcpuInfo{
			Number:  uint32(cinfo[i].number),
			State:   int32(cinfo[i].state),
			CpuTime: uint64(cinfo[i].cpuTime),
			Cpu:     int32(cinfo[i].cpu),
			CpuMap:  affinity,
		}
	}

	return info, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetVcpusFlags
func (d *Domain) GetVcpusFlags(flags DomainVcpuFlags) (int32, error) {
	var err  /*line :2076:10*/_Ctype_virError /*line :2076:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :2077:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2077:57*/(flags); _cgoBase2 := /*line :2077:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2077:71*/_Cfunc_virDomainGetVcpusFlagsWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return 0, makeError(&err)
	}
	return int32(result), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPinVcpu
func (d *Domain) PinVcpu(vcpu uint, cpuMap []bool) error {
	maplen := (len(cpuMap) + 7) / 8
	ccpumap := make([] /*line :2087:20*/_Ctype_uchar /*line :2087:27*/, maplen)
	for i := 0; i < len(cpuMap); i++ {
		if cpuMap[i] {
			byte := i / 8
			bit := i % 8
			ccpumap[byte] |= (1 << uint(bit))
		}
	}

	var err  /*line :2096:10*/_Ctype_virError /*line :2096:20*/
	var ccpumapPtr * /*line :2097:18*/_Ctype_uchar /*line :2097:25*/ = nil
	if maplen > 0 {
		ccpumapPtr = &ccpumap[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :2101:38*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2101:51*/(vcpu); var _cgo2 *_Ctype_uchar = /*line :2101:59*/ccpumapPtr; var _cgo3 _Ctype_int = _Ctype_int /*line :2101:76*/(maplen); _cgoBase4 := /*line :2101:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2101:91*/_Cfunc_virDomainPinVcpuWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPinVcpuFlags
func (d *Domain) PinVcpuFlags(vcpu uint, cpuMap []bool, flags DomainModificationImpact) error {
	maplen := (len(cpuMap) + 7) / 8
	ccpumap := make([] /*line :2113:20*/_Ctype_uchar /*line :2113:27*/, maplen)
	for i := 0; i < len(cpuMap); i++ {
		if cpuMap[i] {
			byte := i / 8
			bit := i % 8
			ccpumap[byte] |= (1 << uint(bit))
		}
	}

	var err  /*line :2122:10*/_Ctype_virError /*line :2122:20*/
	var ccpumapPtr * /*line :2123:18*/_Ctype_uchar /*line :2123:25*/ = nil
	if maplen > 0 {
		ccpumapPtr = &ccpumap[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :2127:43*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2127:56*/(vcpu); var _cgo2 *_Ctype_uchar = /*line :2127:64*/ccpumapPtr; var _cgo3 _Ctype_int = _Ctype_int /*line :2127:81*/(maplen); var _cgo4 _Ctype_uint = _Ctype_uint /*line :2127:97*/(flags); _cgoBase5 := /*line :2127:106*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2127:111*/_Cfunc_virDomainPinVcpuFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()

	if result == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainIPAddress struct {
	Type   IPAddrType
	Addr   string
	Prefix uint
}

type DomainInterface struct {
	Name   string
	Hwaddr string
	Addrs  []DomainIPAddress
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainInterfaceAddresses
func (d *Domain) ListAllInterfaceAddresses(src DomainInterfaceAddressesSource) ([]DomainInterface, error) {
	var cList * /*line :2150:13*/_Ctype_virDomainInterfacePtr /*line :2150:36*/
	var err  /*line :2151:10*/_Ctype_virError /*line :2151:20*/
	numIfaces := int(func() _Ctype_int{ _cgo0 := /*line :2152:56*/d.ptr; _cgoBase1 := /*line :2152:91*/&cList; _cgo1 := /*line :2152:63*/(**_Ctype_virDomainInterfacePtr /*line :2152:89*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2152:106*/(src); var _cgo3 _Ctype_uint = /*line :2152:113*/0; _cgoBase4 := /*line :2152:116*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2152:121*/_Cfunc_virDomainInterfaceAddressesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }())
	if numIfaces == -1 {
		return nil, makeError(&err)
	}

	ifaces := make([]DomainInterface, numIfaces)

	for i := 0; i < numIfaces; i++ {
		var ciface * /*line :2160:15*/_Ctype_virDomainInterface /*line :2160:35*/
		ciface = *(** /*line :2161:16*/_Ctype_virDomainInterface /*line :2161:36*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cList)) + (unsafe.Sizeof(ciface) * uintptr(i))))

		ifaces[i].Name = ( /*line :2163:20*/_Cfunc_GoString /*line :2163:29*/)(ciface.name)
		ifaces[i].Hwaddr = ( /*line :2164:22*/_Cfunc_GoString /*line :2164:31*/)(ciface.hwaddr)

		numAddr := int(ciface.naddrs)

		ifaces[i].Addrs = make([]DomainIPAddress, numAddr)

		for k := 0; k < numAddr; k++ {
			var caddr * /*line :2171:15*/_Ctype_virDomainIPAddress /*line :2171:35*/
			caddr = (* /*line :2172:14*/_Ctype_virDomainIPAddress /*line :2172:34*/)(unsafe.Pointer(uintptr(unsafe.Pointer(ciface.addrs)) + (unsafe.Sizeof(*caddr) * uintptr(k))))
			ifaces[i].Addrs[k] = DomainIPAddress{}
			ifaces[i].Addrs[k].Type = IPAddrType(caddr._type)
			ifaces[i].Addrs[k].Addr = ( /*line :2175:30*/_Cfunc_GoString /*line :2175:39*/)(caddr.addr)
			ifaces[i].Addrs[k].Prefix = uint(caddr.prefix)

		}
		func() { _cgo0 := /*line :2179:35*/ciface; _cgoCheckPointer(_cgo0, nil); /*line :2179:42*/_Cfunc_virDomainInterfaceFreeWrapper(_cgo0); }()
	}
	func() { _cgo0 := /*line :2181:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :2181:31*/_Cfunc_free(_cgo0); }()
	return ifaces, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotCurrent
func (d *Domain) SnapshotCurrent(flags uint32) (*DomainSnapshot, error) {
	var err  /*line :2187:10*/_Ctype_virError /*line :2187:20*/
	result := func() _Ctype_virDomainSnapshotPtr{ _cgo0 := /*line :2188:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2188:59*/(flags); _cgoBase2 := /*line :2188:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2188:73*/_Cfunc_virDomainSnapshotCurrentWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return nil, makeError(&err)
	}
	return &DomainSnapshot{ptr: result}, nil

}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotNum
func (d *Domain) SnapshotNum(flags DomainSnapshotListFlags) (int, error) {
	var err  /*line :2198:10*/_Ctype_virError /*line :2198:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :2199:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2199:59*/(flags); _cgoBase2 := /*line :2199:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2199:73*/_Cfunc_virDomainSnapshotNumWrapper(_cgo0, _cgo1, _cgo2); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotLookupByName
func (d *Domain) SnapshotLookupByName(name string, flags uint32) (*DomainSnapshot, error) {
	cName := ( /*line :2208:11*/_Cfunc_CString /*line :2208:19*/)(name)
	defer func() func() { _cgo0 := /*line :2209:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2209:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2210:10*/_Ctype_virError /*line :2210:20*/
	ptr := func() _Ctype_virDomainSnapshotPtr{ _cgo0 := /*line :2211:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :2211:55*/cName; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2211:68*/(flags); _cgoBase3 := /*line :2211:77*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2211:82*/_Cfunc_virDomainSnapshotLookupByNameWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &DomainSnapshot{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointLookupByName
func (d *Domain) CheckpointLookupByName(name string, flags uint32) (*DomainCheckpoint, error) {
	cName := ( /*line :2220:11*/_Cfunc_CString /*line :2220:19*/)(name)
	defer func() func() { _cgo0 := /*line :2221:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2221:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2222:10*/_Ctype_virError /*line :2222:20*/
	ptr := func() _Ctype_virDomainCheckpointPtr{ _cgo0 := /*line :2223:50*/d.ptr; var _cgo1 *_Ctype_char = /*line :2223:57*/cName; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2223:70*/(flags); _cgoBase3 := /*line :2223:79*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2223:84*/_Cfunc_virDomainCheckpointLookupByNameWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &DomainCheckpoint{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotListNames
func (d *Domain) SnapshotListNames(flags DomainSnapshotListFlags) ([]string, error) {
	const maxNames = 1024
	var names [maxNames](* /*line :2233:24*/_Ctype_char /*line :2233:30*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :2235:10*/_Ctype_virError /*line :2235:20*/
	numNames := func() _Ctype_int{ _cgo0 := /*line :2237:3*/d.ptr; _cgo1 := /*line :2238:3*/(**_Ctype_char /*line :2238:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :2239:3*/maxNames; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2239:19*/(flags); _cgoBase4 := /*line :2239:28*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2239:33*/_Cfunc_virDomainSnapshotListNamesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if numNames == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numNames)
	for k := 0; k < int(numNames); k++ {
		goNames[k] = ( /*line :2245:16*/_Cfunc_GoString /*line :2245:25*/)(names[k])
		func() { _cgo0 := /*line :2246:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :2246:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainListAllSnapshots
func (d *Domain) ListAllSnapshots(flags DomainSnapshotListFlags) ([]DomainSnapshot, error) {
	var cList * /*line :2253:13*/_Ctype_virDomainSnapshotPtr /*line :2253:35*/
	var err  /*line :2254:10*/_Ctype_virError /*line :2254:20*/
	numVols := func() _Ctype_int{ _cgo0 := /*line :2255:48*/d.ptr; _cgoBase1 := /*line :2255:82*/&cList; _cgo1 := /*line :2255:55*/(**_Ctype_virDomainSnapshotPtr /*line :2255:80*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2255:97*/(flags); _cgoBase3 := /*line :2255:106*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2255:111*/_Cfunc_virDomainListAllSnapshotsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numVols == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numVols),
		Cap:  int(numVols),
	}
	var pools []DomainSnapshot
	slice := *(*[] /*line :2265:16*/_Ctype_virDomainSnapshotPtr /*line :2265:38*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, DomainSnapshot{ptr})
	}
	func() { _cgo0 := /*line :2269:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :2269:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainListAllCheckpoints
func (d *Domain) ListAllCheckpoints(flags DomainCheckpointListFlags) ([]DomainCheckpoint, error) {
	var cList * /*line :2275:13*/_Ctype_virDomainCheckpointPtr /*line :2275:37*/
	var err  /*line :2276:10*/_Ctype_virError /*line :2276:20*/
	numCps := func() _Ctype_int{ _cgo0 := /*line :2277:49*/d.ptr; _cgoBase1 := /*line :2277:85*/&cList; _cgo1 := /*line :2277:56*/(**_Ctype_virDomainCheckpointPtr /*line :2277:83*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2277:100*/(flags); _cgoBase3 := /*line :2277:109*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2277:114*/_Cfunc_virDomainListAllCheckpointsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numCps == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numCps),
		Cap:  int(numCps),
	}
	var cps []DomainCheckpoint
	slice := *(*[] /*line :2287:16*/_Ctype_virDomainCheckpointPtr /*line :2287:40*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		cps = append(cps, DomainCheckpoint{ptr})
	}
	func() { _cgo0 := /*line :2291:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :2291:31*/_Cfunc_free(_cgo0); }()
	return cps, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockCommit
func (d *Domain) BlockCommit(disk string, base string, top string, bandwidth uint64, flags DomainBlockCommitFlags) error {
	cdisk := ( /*line :2297:11*/_Cfunc_CString /*line :2297:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2298:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2298:37*/_Cfunc_free(_cgo0); }}()()
	var cbase * /*line :2299:13*/_Ctype_char /*line :2299:19*/
	if base != "" {
		cbase = ( /*line :2301:11*/_Cfunc_CString /*line :2301:19*/)(base)
		defer func() func() { _cgo0 := /*line :2302:16*/unsafe.Pointer(cbase); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2302:38*/_Cfunc_free(_cgo0); }}()()
	}
	var ctop * /*line :2304:12*/_Ctype_char /*line :2304:18*/
	if top != "" {
		ctop = ( /*line :2306:10*/_Cfunc_CString /*line :2306:18*/)(top)
		defer func() func() { _cgo0 := /*line :2307:16*/unsafe.Pointer(ctop); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2307:37*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :2309:10*/_Ctype_virError /*line :2309:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2310:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :2310:46*/cdisk; var _cgo2 *_Ctype_char = /*line :2310:53*/cbase; var _cgo3 *_Ctype_char = /*line :2310:60*/ctop; var _cgo4 _Ctype_ulong = _Ctype_ulong /*line :2310:73*/(bandwidth); var _cgo5 _Ctype_uint = _Ctype_uint /*line :2310:92*/(flags); _cgoBase6 := /*line :2310:101*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :2310:106*/_Cfunc_virDomainBlockCommitWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

type DomainBlockCopyParameters struct {
	BandwidthSet   bool
	Bandwidth      uint64
	GranularitySet bool
	Granularity    uint
	BufSizeSet     bool
	BufSize        uint64
}

func getBlockCopyParameterFieldInfo(params *DomainBlockCopyParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2328:3*/_Csconst_VIR_DOMAIN_BLOCK_COPY_BANDWIDTH /*line :2328:35*/): typedParamsFieldInfo{
			set: &params.BandwidthSet,
			ul:  &params.Bandwidth,
		},
		( /*line :2332:3*/_Csconst_VIR_DOMAIN_BLOCK_COPY_GRANULARITY /*line :2332:37*/): typedParamsFieldInfo{
			set: &params.GranularitySet,
			ui:  &params.Granularity,
		},
		( /*line :2336:3*/_Csconst_VIR_DOMAIN_BLOCK_COPY_BUF_SIZE /*line :2336:34*/): typedParamsFieldInfo{
			set: &params.BufSizeSet,
			ul:  &params.BufSize,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockCopy
func (d *Domain) BlockCopy(disk string, destxml string, params *DomainBlockCopyParameters, flags DomainBlockCopyFlags) error {
	cdisk := ( /*line :2345:11*/_Cfunc_CString /*line :2345:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2346:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2346:37*/_Cfunc_free(_cgo0); }}()()
	cdestxml := ( /*line :2347:14*/_Cfunc_CString /*line :2347:22*/)(destxml)
	defer func() func() { _cgo0 := /*line :2348:15*/unsafe.Pointer(cdestxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2348:40*/_Cfunc_free(_cgo0); }}()()

	info := getBlockCopyParameterFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :2357:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2357:34*/)(cparams, cnparams)

	var err  /*line :2359:10*/_Ctype_virError /*line :2359:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2360:37*/d.ptr; var _cgo1 *_Ctype_char = /*line :2360:44*/cdisk; var _cgo2 *_Ctype_char = /*line :2360:51*/cdestxml; var _cgo3 *_Ctype_struct__virTypedParameter = /*line :2360:61*/cparams; var _cgo4 _Ctype_int = /*line :2360:70*/cnparams; var _cgo5 _Ctype_uint = _Ctype_uint /*line :2360:86*/(flags); _cgoBase6 := /*line :2360:95*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :2360:100*/_Cfunc_virDomainBlockCopyWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockJobAbort
func (d *Domain) BlockJobAbort(disk string, flags DomainBlockJobAbortFlags) error {
	cdisk := ( /*line :2370:11*/_Cfunc_CString /*line :2370:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2371:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2371:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2372:10*/_Ctype_virError /*line :2372:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2373:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :2373:48*/cdisk; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2373:61*/(flags); _cgoBase3 := /*line :2373:70*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2373:75*/_Cfunc_virDomainBlockJobAbortWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockJobSetSpeed
func (d *Domain) BlockJobSetSpeed(disk string, bandwidth uint64, flags DomainBlockJobSetSpeedFlags) error {
	cdisk := ( /*line :2382:11*/_Cfunc_CString /*line :2382:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2383:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2383:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2384:10*/_Ctype_virError /*line :2384:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2385:44*/d.ptr; var _cgo1 *_Ctype_char = /*line :2385:51*/cdisk; var _cgo2 _Ctype_ulong = _Ctype_ulong /*line :2385:65*/(bandwidth); var _cgo3 _Ctype_uint = _Ctype_uint /*line :2385:84*/(flags); _cgoBase4 := /*line :2385:93*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2385:98*/_Cfunc_virDomainBlockJobSetSpeedWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockPull
func (d *Domain) BlockPull(disk string, bandwidth uint64, flags DomainBlockPullFlags) error {
	cdisk := ( /*line :2394:11*/_Cfunc_CString /*line :2394:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2395:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2395:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2396:10*/_Ctype_virError /*line :2396:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2397:37*/d.ptr; var _cgo1 *_Ctype_char = /*line :2397:44*/cdisk; var _cgo2 _Ctype_ulong = _Ctype_ulong /*line :2397:58*/(bandwidth); var _cgo3 _Ctype_uint = _Ctype_uint /*line :2397:77*/(flags); _cgoBase4 := /*line :2397:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2397:91*/_Cfunc_virDomainBlockPullWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockRebase
func (d *Domain) BlockRebase(disk string, base string, bandwidth uint64, flags DomainBlockRebaseFlags) error {
	cdisk := ( /*line :2406:11*/_Cfunc_CString /*line :2406:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2407:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2407:37*/_Cfunc_free(_cgo0); }}()()
	var cbase * /*line :2408:13*/_Ctype_char /*line :2408:19*/
	if base != "" {
		cbase = ( /*line :2410:11*/_Cfunc_CString /*line :2410:19*/)(base)
		defer func() func() { _cgo0 := /*line :2411:16*/unsafe.Pointer(cbase); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2411:38*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :2413:10*/_Ctype_virError /*line :2413:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2414:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :2414:46*/cdisk; var _cgo2 *_Ctype_char = /*line :2414:53*/cbase; var _cgo3 _Ctype_ulong = _Ctype_ulong /*line :2414:67*/(bandwidth); var _cgo4 _Ctype_uint = _Ctype_uint /*line :2414:86*/(flags); _cgoBase5 := /*line :2414:95*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2414:100*/_Cfunc_virDomainBlockRebaseWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockResize
func (d *Domain) BlockResize(disk string, size uint64, flags DomainBlockResizeFlags) error {
	cdisk := ( /*line :2423:11*/_Cfunc_CString /*line :2423:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2424:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2424:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2425:10*/_Ctype_virError /*line :2425:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2426:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :2426:46*/cdisk; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :2426:64*/(size); var _cgo3 _Ctype_uint = _Ctype_uint /*line :2426:78*/(flags); _cgoBase4 := /*line :2426:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2426:92*/_Cfunc_virDomainBlockResizeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBlockPeek
func (d *Domain) BlockPeek(disk string, offset uint64, size uint64, flags uint32) ([]byte, error) {
	cdisk := ( /*line :2435:11*/_Cfunc_CString /*line :2435:19*/)(disk)
	defer func() func() { _cgo0 := /*line :2436:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2436:37*/_Cfunc_free(_cgo0); }}()()
	data := make([]byte, size)
	var err  /*line :2438:10*/_Ctype_virError /*line :2438:20*/

	var dataPtr unsafe.Pointer = nil
	if size > 0 {
		dataPtr = unsafe.Pointer(&data[0])
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :2444:37*/d.ptr; var _cgo1 *_Ctype_char = /*line :2444:44*/cdisk; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :2444:62*/(offset); var _cgo3 _Ctype_size_t = _Ctype_size_t /*line :2444:80*/(size); _cgo4 := /*line :2444:88*/dataPtr; var _cgo5 _Ctype_uint = _Ctype_uint /*line :2444:103*/(flags); _cgoBase6 := /*line :2444:112*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo4, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :2444:117*/_Cfunc_virDomainBlockPeekWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == -1 {
		return []byte{}, makeError(&err)
	}

	return data, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMemoryPeek
func (d *Domain) MemoryPeek(start uint64, size uint64, flags DomainMemoryFlags) ([]byte, error) {
	data := make([]byte, size)
	var err  /*line :2455:10*/_Ctype_virError /*line :2455:20*/

	var dataPtr unsafe.Pointer = nil
	if size > 0 {
		dataPtr = unsafe.Pointer(&data[0])
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :2461:38*/d.ptr; var _cgo1 _Ctype_ulonglong = _Ctype_ulonglong /*line :2461:56*/(start); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :2461:73*/(size); _cgo3 := /*line :2461:81*/dataPtr; var _cgo4 _Ctype_uint = _Ctype_uint /*line :2461:96*/(flags); _cgoBase5 := /*line :2461:105*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo3, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2461:110*/_Cfunc_virDomainMemoryPeekWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return []byte{}, makeError(&err)
	}

	return data, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrate
func (d *Domain) Migrate(dconn *Connect, flags DomainMigrateFlags, dname string, uri string, bandwidth uint64) (*Domain, error) {
	var cdname * /*line :2471:14*/_Ctype_char /*line :2471:20*/
	if dname != "" {
		cdname = ( /*line :2473:12*/_Cfunc_CString /*line :2473:20*/)(dname)
		defer func() func() { _cgo0 := /*line :2474:16*/unsafe.Pointer(cdname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2474:39*/_Cfunc_free(_cgo0); }}()()
	}
	var curi * /*line :2476:12*/_Ctype_char /*line :2476:18*/
	if uri != "" {
		curi = ( /*line :2478:10*/_Cfunc_CString /*line :2478:18*/)(uri)
		defer func() func() { _cgo0 := /*line :2479:16*/unsafe.Pointer(curi); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2479:37*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2482:10*/_Ctype_virError /*line :2482:20*/
	ret := func() _Ctype_virDomainPtr{ _cgo0 := /*line :2483:35*/d.ptr; _cgo1 := /*line :2483:42*/dconn.ptr; var _cgo2 _Ctype_ulong = _Ctype_ulong /*line :2483:60*/(flags); var _cgo3 *_Ctype_char = /*line :2483:69*/cdname; var _cgo4 *_Ctype_char = /*line :2483:77*/curi; var _cgo5 _Ctype_ulong = _Ctype_ulong /*line :2483:90*/(bandwidth); _cgoBase6 := /*line :2483:103*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :2483:108*/_Cfunc_virDomainMigrateWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == nil {
		return nil, makeError(&err)
	}

	return &Domain{
		ptr: ret,
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrate2
func (d *Domain) Migrate2(dconn *Connect, dxml string, flags DomainMigrateFlags, dname string, uri string, bandwidth uint64) (*Domain, error) {
	var cdxml * /*line :2495:13*/_Ctype_char /*line :2495:19*/
	if dxml != "" {
		cdxml = ( /*line :2497:11*/_Cfunc_CString /*line :2497:19*/)(dxml)
		defer func() func() { _cgo0 := /*line :2498:16*/unsafe.Pointer(cdxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2498:38*/_Cfunc_free(_cgo0); }}()()
	}
	var cdname * /*line :2500:14*/_Ctype_char /*line :2500:20*/
	if dname != "" {
		cdname = ( /*line :2502:12*/_Cfunc_CString /*line :2502:20*/)(dname)
		defer func() func() { _cgo0 := /*line :2503:16*/unsafe.Pointer(cdname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2503:39*/_Cfunc_free(_cgo0); }}()()
	}
	var curi * /*line :2505:12*/_Ctype_char /*line :2505:18*/
	if uri != "" {
		curi = ( /*line :2507:10*/_Cfunc_CString /*line :2507:18*/)(uri)
		defer func() func() { _cgo0 := /*line :2508:16*/unsafe.Pointer(curi); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2508:37*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2511:10*/_Ctype_virError /*line :2511:20*/
	ret := func() _Ctype_virDomainPtr{ _cgo0 := /*line :2512:36*/d.ptr; _cgo1 := /*line :2512:43*/dconn.ptr; var _cgo2 *_Ctype_char = /*line :2512:54*/cdxml; var _cgo3 _Ctype_ulong = _Ctype_ulong /*line :2512:68*/(flags); var _cgo4 *_Ctype_char = /*line :2512:77*/cdname; var _cgo5 *_Ctype_char = /*line :2512:85*/curi; var _cgo6 _Ctype_ulong = _Ctype_ulong /*line :2512:98*/(bandwidth); _cgoBase7 := /*line :2512:111*/&err; _cgo7 := _cgoBase7; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase7, 0 == 0); return /*line :2512:116*/_Cfunc_virDomainMigrate2Wrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7); }()
	if ret == nil {
		return nil, makeError(&err)
	}

	return &Domain{
		ptr: ret,
	}, nil
}

type DomainMigrateParameters struct {
	URISet                       bool
	URI                          string
	DestNameSet                  bool
	DestName                     string
	DestXMLSet                   bool
	DestXML                      string
	PersistXMLSet                bool
	PersistXML                   string
	BandwidthSet                 bool
	Bandwidth                    uint64
	GraphicsURISet               bool
	GraphicsURI                  string
	ListenAddressSet             bool
	ListenAddress                string
	MigrateDisksSet              bool
	MigrateDisks                 []string
	DisksPortSet                 bool
	DisksPort                    int
	CompressionSet               bool
	Compression                  string
	CompressionMTLevelSet        bool
	CompressionMTLevel           int
	CompressionMTThreadsSet      bool
	CompressionMTThreads         int
	CompressionMTDThreadsSet     bool
	CompressionMTDThreads        int
	CompressionXBZRLECacheSet    bool
	CompressionXBZRLECache       uint64
	AutoConvergeInitialSet       bool
	AutoConvergeInitial          int
	AutoConvergeIncrementSet     bool
	AutoConvergeIncrement        int
	ParallelConnectionsSet       bool
	ParallelConnections          int
	TLSDestinationSet            bool
	TLSDestination               string
	DisksURISet                  bool
	DisksURI                     string
	CompressionZlibLevelSet      bool
	CompressionZlibLevel         int
	CompressionZstdLevelSet      bool
	CompressionZstdLevel         int
	MigrateDisksDetectZeroesSet  bool
	MigrateDisksDetectZeroes     bool // Deprecated: wrong type & unused. Delete in v2.nnn
	MigrateDisksDetectZeroesList []string
	BandwidthAvailSwitchoverSet  bool
	BandwidthAvailSwitchover     uint64
}

func getMigrateParameterFieldInfo(params *DomainMigrateParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2574:3*/_Csconst_VIR_MIGRATE_PARAM_URI /*line :2574:25*/): typedParamsFieldInfo{
			set: &params.URISet,
			s:   &params.URI,
		},
		( /*line :2578:3*/_Csconst_VIR_MIGRATE_PARAM_DEST_NAME /*line :2578:31*/): typedParamsFieldInfo{
			set: &params.DestNameSet,
			s:   &params.DestName,
		},
		( /*line :2582:3*/_Csconst_VIR_MIGRATE_PARAM_DEST_XML /*line :2582:30*/): typedParamsFieldInfo{
			set: &params.DestXMLSet,
			s:   &params.DestXML,
		},
		( /*line :2586:3*/_Csconst_VIR_MIGRATE_PARAM_PERSIST_XML /*line :2586:33*/): typedParamsFieldInfo{
			set: &params.PersistXMLSet,
			s:   &params.PersistXML,
		},
		( /*line :2590:3*/_Csconst_VIR_MIGRATE_PARAM_BANDWIDTH /*line :2590:31*/): typedParamsFieldInfo{
			set: &params.BandwidthSet,
			ul:  &params.Bandwidth,
		},
		( /*line :2594:3*/_Csconst_VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY /*line :2594:40*/): typedParamsFieldInfo{
			set: &params.BandwidthSet,
			ul:  &params.Bandwidth,
		},
		( /*line :2598:3*/_Csconst_VIR_MIGRATE_PARAM_GRAPHICS_URI /*line :2598:34*/): typedParamsFieldInfo{
			set: &params.GraphicsURISet,
			s:   &params.GraphicsURI,
		},
		( /*line :2602:3*/_Csconst_VIR_MIGRATE_PARAM_LISTEN_ADDRESS /*line :2602:36*/): typedParamsFieldInfo{
			set: &params.ListenAddressSet,
			s:   &params.ListenAddress,
		},
		( /*line :2606:3*/_Csconst_VIR_MIGRATE_PARAM_MIGRATE_DISKS /*line :2606:35*/): typedParamsFieldInfo{
			set: &params.MigrateDisksSet,
			sl:  &params.MigrateDisks,
		},
		( /*line :2610:3*/_Csconst_VIR_MIGRATE_PARAM_DISKS_PORT /*line :2610:32*/): typedParamsFieldInfo{
			set: &params.DisksPortSet,
			i:   &params.DisksPort,
		},
		( /*line :2614:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION /*line :2614:33*/): typedParamsFieldInfo{
			set: &params.CompressionSet,
			s:   &params.Compression,
		},
		( /*line :2618:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL /*line :2618:42*/): typedParamsFieldInfo{
			set: &params.CompressionMTLevelSet,
			i:   &params.CompressionMTLevel,
		},
		( /*line :2622:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS /*line :2622:44*/): typedParamsFieldInfo{
			set: &params.CompressionMTThreadsSet,
			i:   &params.CompressionMTThreads,
		},
		( /*line :2626:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS /*line :2626:45*/): typedParamsFieldInfo{
			set: &params.CompressionMTDThreadsSet,
			i:   &params.CompressionMTDThreads,
		},
		( /*line :2630:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE /*line :2630:46*/): typedParamsFieldInfo{
			set: &params.CompressionXBZRLECacheSet,
			ul:  &params.CompressionXBZRLECache,
		},
		( /*line :2634:3*/_Csconst_VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL /*line :2634:43*/): typedParamsFieldInfo{
			set: &params.AutoConvergeInitialSet,
			i:   &params.AutoConvergeInitial,
		},
		( /*line :2638:3*/_Csconst_VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT /*line :2638:45*/): typedParamsFieldInfo{
			set: &params.AutoConvergeIncrementSet,
			i:   &params.AutoConvergeIncrement,
		},
		( /*line :2642:3*/_Csconst_VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS /*line :2642:42*/): typedParamsFieldInfo{
			set: &params.ParallelConnectionsSet,
			i:   &params.ParallelConnections,
		},
		( /*line :2646:3*/_Csconst_VIR_MIGRATE_PARAM_TLS_DESTINATION /*line :2646:37*/): typedParamsFieldInfo{
			set: &params.TLSDestinationSet,
			s:   &params.TLSDestination,
		},
		( /*line :2650:3*/_Csconst_VIR_MIGRATE_PARAM_DISKS_URI /*line :2650:31*/): typedParamsFieldInfo{
			set: &params.DisksURISet,
			s:   &params.DisksURI,
		},
		( /*line :2654:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_ZLIB_LEVEL /*line :2654:44*/): typedParamsFieldInfo{
			set: &params.CompressionZlibLevelSet,
			i:   &params.CompressionZlibLevel,
		},
		( /*line :2658:3*/_Csconst_VIR_MIGRATE_PARAM_COMPRESSION_ZSTD_LEVEL /*line :2658:44*/): typedParamsFieldInfo{
			set: &params.CompressionZstdLevelSet,
			i:   &params.CompressionZstdLevel,
		},
		( /*line :2662:3*/_Csconst_VIR_MIGRATE_PARAM_MIGRATE_DISKS_DETECT_ZEROES /*line :2662:49*/): typedParamsFieldInfo{
			set: &params.MigrateDisksDetectZeroesSet,
			sl:  &params.MigrateDisksDetectZeroesList,
		},
		( /*line :2666:3*/_Csconst_VIR_MIGRATE_PARAM_BANDWIDTH_AVAIL_SWITCHOVER /*line :2666:48*/): typedParamsFieldInfo{
			set: &params.BandwidthAvailSwitchoverSet,
			ul:  &params.BandwidthAvailSwitchover,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrate3
func (d *Domain) Migrate3(dconn *Connect, params *DomainMigrateParameters, flags DomainMigrateFlags) (*Domain, error) {

	info := getMigrateParameterFieldInfo(params)
	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return nil, gerr
	}

	defer ( /*line :2682:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2682:34*/)(cparams, cnparams)

	var err  /*line :2684:10*/_Ctype_virError /*line :2684:20*/
	ret := func() _Ctype_virDomainPtr{ _cgo0 := /*line :2685:36*/d.ptr; _cgo1 := /*line :2685:43*/dconn.ptr; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :2685:54*/cparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2685:69*/(cnparams); var _cgo4 _Ctype_uint = _Ctype_uint /*line :2685:87*/(flags); _cgoBase5 := /*line :2685:96*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2685:101*/_Cfunc_virDomainMigrate3Wrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == nil {
		return nil, makeError(&err)
	}

	return &Domain{
		ptr: ret,
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateToURI
func (d *Domain) MigrateToURI(duri string, flags DomainMigrateFlags, dname string, bandwidth uint64) error {
	cduri := ( /*line :2697:11*/_Cfunc_CString /*line :2697:19*/)(duri)
	defer func() func() { _cgo0 := /*line :2698:15*/unsafe.Pointer(cduri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2698:37*/_Cfunc_free(_cgo0); }}()()

	var cdname * /*line :2700:14*/_Ctype_char /*line :2700:20*/
	if dname != "" {
		cdname = ( /*line :2702:12*/_Cfunc_CString /*line :2702:20*/)(dname)
		defer func() func() { _cgo0 := /*line :2703:16*/unsafe.Pointer(cdname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2703:39*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2706:10*/_Ctype_virError /*line :2706:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2707:40*/d.ptr; var _cgo1 *_Ctype_char = /*line :2707:47*/cduri; var _cgo2 _Ctype_ulong = _Ctype_ulong /*line :2707:61*/(flags); var _cgo3 *_Ctype_char = /*line :2707:70*/cdname; var _cgo4 _Ctype_ulong = _Ctype_ulong /*line :2707:85*/(bandwidth); _cgoBase5 := /*line :2707:98*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2707:103*/_Cfunc_virDomainMigrateToURIWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateToURI2
func (d *Domain) MigrateToURI2(dconnuri string, miguri string, dxml string, flags DomainMigrateFlags, dname string, bandwidth uint64) error {
	var cdconnuri * /*line :2717:17*/_Ctype_char /*line :2717:23*/
	if dconnuri != "" {
		cdconnuri = ( /*line :2719:15*/_Cfunc_CString /*line :2719:23*/)(dconnuri)
		defer func() func() { _cgo0 := /*line :2720:16*/unsafe.Pointer(cdconnuri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2720:42*/_Cfunc_free(_cgo0); }}()()
	}
	var cmiguri * /*line :2722:15*/_Ctype_char /*line :2722:21*/
	if miguri != "" {
		cmiguri = ( /*line :2724:13*/_Cfunc_CString /*line :2724:21*/)(miguri)
		defer func() func() { _cgo0 := /*line :2725:16*/unsafe.Pointer(cmiguri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2725:40*/_Cfunc_free(_cgo0); }}()()
	}
	var cdxml * /*line :2727:13*/_Ctype_char /*line :2727:19*/
	if dxml != "" {
		cdxml = ( /*line :2729:11*/_Cfunc_CString /*line :2729:19*/)(dxml)
		defer func() func() { _cgo0 := /*line :2730:16*/unsafe.Pointer(cdxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2730:38*/_Cfunc_free(_cgo0); }}()()
	}
	var cdname * /*line :2732:14*/_Ctype_char /*line :2732:20*/
	if dname != "" {
		cdname = ( /*line :2734:12*/_Cfunc_CString /*line :2734:20*/)(dname)
		defer func() func() { _cgo0 := /*line :2735:16*/unsafe.Pointer(cdname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2735:39*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2738:10*/_Ctype_virError /*line :2738:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2739:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :2739:48*/cdconnuri; var _cgo2 *_Ctype_char = /*line :2739:59*/cmiguri; var _cgo3 *_Ctype_char = /*line :2739:68*/cdxml; var _cgo4 _Ctype_ulong = _Ctype_ulong /*line :2739:82*/(flags); var _cgo5 *_Ctype_char = /*line :2739:91*/cdname; var _cgo6 _Ctype_ulong = _Ctype_ulong /*line :2739:106*/(bandwidth); _cgoBase7 := /*line :2739:119*/&err; _cgo7 := _cgoBase7; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase7, 0 == 0); return /*line :2739:124*/_Cfunc_virDomainMigrateToURI2Wrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateToURI3
func (d *Domain) MigrateToURI3(dconnuri string, params *DomainMigrateParameters, flags DomainMigrateFlags) error {
	var cdconnuri * /*line :2749:17*/_Ctype_char /*line :2749:23*/
	if dconnuri != "" {
		cdconnuri = ( /*line :2751:15*/_Cfunc_CString /*line :2751:23*/)(dconnuri)
		defer func() func() { _cgo0 := /*line :2752:16*/unsafe.Pointer(cdconnuri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2752:42*/_Cfunc_free(_cgo0); }}()()
	}

	info := getMigrateParameterFieldInfo(params)
	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :2761:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2761:34*/)(cparams, cnparams)

	var err  /*line :2763:10*/_Ctype_virError /*line :2763:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2764:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :2764:48*/cdconnuri; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :2764:59*/cparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2764:74*/(cnparams); var _cgo4 _Ctype_uint = _Ctype_uint /*line :2764:92*/(flags); _cgoBase5 := /*line :2764:101*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2764:106*/_Cfunc_virDomainMigrateToURI3Wrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateGetCompressionCache
func (d *Domain) MigrateGetCompressionCache(flags uint32) (uint64, error) {
	var cacheSize  /*line :2774:16*/_Ctype_ulonglong /*line :2774:27*/

	var err  /*line :2776:10*/_Ctype_virError /*line :2776:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2777:54*/d.ptr; var _cgo1 *_Ctype_ulonglong = /*line :2777:61*/&cacheSize; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2777:79*/(flags); _cgoBase3 := /*line :2777:88*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2777:93*/_Cfunc_virDomainMigrateGetCompressionCacheWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return uint64(cacheSize), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateSetCompressionCache
func (d *Domain) MigrateSetCompressionCache(size uint64, flags uint32) error {
	var err  /*line :2787:10*/_Ctype_virError /*line :2787:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2788:54*/d.ptr; var _cgo1 _Ctype_ulonglong = _Ctype_ulonglong /*line :2788:72*/(size); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2788:86*/(flags); _cgoBase3 := /*line :2788:95*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2788:100*/_Cfunc_virDomainMigrateSetCompressionCacheWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateGetMaxSpeed
func (d *Domain) MigrateGetMaxSpeed(flags DomainMigrateMaxSpeedFlags) (uint64, error) {
	var maxSpeed  /*line :2798:15*/_Ctype_ulong /*line :2798:22*/

	var err  /*line :2800:10*/_Ctype_virError /*line :2800:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2801:46*/d.ptr; var _cgo1 *_Ctype_ulong = /*line :2801:53*/&maxSpeed; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2801:70*/(flags); _cgoBase3 := /*line :2801:79*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2801:84*/_Cfunc_virDomainMigrateGetMaxSpeedWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return uint64(maxSpeed), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateSetMaxSpeed
func (d *Domain) MigrateSetMaxSpeed(speed uint64, flags DomainMigrateMaxSpeedFlags) error {
	var err  /*line :2811:10*/_Ctype_virError /*line :2811:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2812:46*/d.ptr; var _cgo1 _Ctype_ulong = _Ctype_ulong /*line :2812:60*/(speed); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2812:75*/(flags); _cgoBase3 := /*line :2812:84*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2812:89*/_Cfunc_virDomainMigrateSetMaxSpeedWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateSetMaxDowntime
func (d *Domain) MigrateSetMaxDowntime(downtime uint64, flags uint32) error {
	var err  /*line :2822:10*/_Ctype_virError /*line :2822:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2823:49*/d.ptr; var _cgo1 _Ctype_ulonglong = _Ctype_ulonglong /*line :2823:67*/(downtime); var _cgo2 _Ctype_uint = _Ctype_uint /*line :2823:85*/(flags); _cgoBase3 := /*line :2823:94*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2823:99*/_Cfunc_virDomainMigrateSetMaxDowntimeWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateGetMaxDowntime
func (d *Domain) MigrateGetMaxDowntime(flags uint32) (uint64, error) {
	var downtimeLen  /*line :2833:18*/_Ctype_ulonglong /*line :2833:29*/
	var err  /*line :2834:10*/_Ctype_virError /*line :2834:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2835:49*/d.ptr; var _cgo1 *_Ctype_ulonglong = /*line :2835:56*/&downtimeLen; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2835:76*/(flags); _cgoBase3 := /*line :2835:85*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2835:90*/_Cfunc_virDomainMigrateGetMaxDowntimeWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return uint64(downtimeLen), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainMigrateStartPostCopy
func (d *Domain) MigrateStartPostCopy(flags uint32) error {
	var err  /*line :2845:10*/_Ctype_virError /*line :2845:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2846:48*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2846:61*/(flags); _cgoBase2 := /*line :2846:70*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2846:75*/_Cfunc_virDomainMigrateStartPostCopyWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainBlkioParameters struct {
	WeightSet          bool
	Weight             uint
	DeviceWeightSet    bool
	DeviceWeight       string
	DeviceReadIopsSet  bool
	DeviceReadIops     string
	DeviceWriteIopsSet bool
	DeviceWriteIops    string
	DeviceReadBpsSet   bool
	DeviceReadBps      string
	DeviceWriteBpsSet  bool
	DeviceWriteBps     string
}

func getBlkioParametersFieldInfo(params *DomainBlkioParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2871:3*/_Csconst_VIR_DOMAIN_BLKIO_WEIGHT /*line :2871:27*/): typedParamsFieldInfo{
			set: &params.WeightSet,
			ui:  &params.Weight,
		},
		( /*line :2875:3*/_Csconst_VIR_DOMAIN_BLKIO_DEVICE_WEIGHT /*line :2875:34*/): typedParamsFieldInfo{
			set: &params.DeviceWeightSet,
			s:   &params.DeviceWeight,
		},
		( /*line :2879:3*/_Csconst_VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS /*line :2879:37*/): typedParamsFieldInfo{
			set: &params.DeviceReadIopsSet,
			s:   &params.DeviceReadIops,
		},
		( /*line :2883:3*/_Csconst_VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS /*line :2883:38*/): typedParamsFieldInfo{
			set: &params.DeviceWriteIopsSet,
			s:   &params.DeviceWriteIops,
		},
		( /*line :2887:3*/_Csconst_VIR_DOMAIN_BLKIO_DEVICE_READ_BPS /*line :2887:36*/): typedParamsFieldInfo{
			set: &params.DeviceReadBpsSet,
			s:   &params.DeviceReadBps,
		},
		( /*line :2891:3*/_Csconst_VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS /*line :2891:37*/): typedParamsFieldInfo{
			set: &params.DeviceWriteBpsSet,
			s:   &params.DeviceWriteBps,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetBlkioParameters
func (d *Domain) GetBlkioParameters(flags DomainModificationImpact) (*DomainBlkioParameters, error) {
	params := &DomainBlkioParameters{}
	info := getBlkioParametersFieldInfo(params)

	var cnparams  /*line :2903:15*/_Ctype_int /*line :2903:20*/
	var err  /*line :2904:10*/_Ctype_virError /*line :2904:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2905:46*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2905:53*/nil; var _cgo2 *_Ctype_int = /*line :2905:58*/&cnparams; var _cgo3 _Ctype_uint = /*line :2905:69*/0; _cgoBase4 := /*line :2905:72*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2905:77*/_Cfunc_virDomainGetBlkioParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :2911:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2911:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :2912:45*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2912:52*/cparams; var _cgo2 *_Ctype_int = /*line :2912:61*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2912:78*/(flags); _cgoBase4 := /*line :2912:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2912:92*/_Cfunc_virDomainGetBlkioParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetBlkioParameters
func (d *Domain) SetBlkioParameters(params *DomainBlkioParameters, flags DomainModificationImpact) error {
	info := getBlkioParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :2934:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2934:34*/)(cparams, cnparams)

	var err  /*line :2936:10*/_Ctype_virError /*line :2936:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2937:46*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2937:53*/cparams; var _cgo2 _Ctype_int = /*line :2937:62*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2937:78*/(flags); _cgoBase4 := /*line :2937:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2937:92*/_Cfunc_virDomainSetBlkioParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainBlockIoTuneParameters struct {
	TotalBytesSecSet          bool
	TotalBytesSec             uint64
	ReadBytesSecSet           bool
	ReadBytesSec              uint64
	WriteBytesSecSet          bool
	WriteBytesSec             uint64
	TotalIopsSecSet           bool
	TotalIopsSec              uint64
	ReadIopsSecSet            bool
	ReadIopsSec               uint64
	WriteIopsSecSet           bool
	WriteIopsSec              uint64
	TotalBytesSecMaxSet       bool
	TotalBytesSecMax          uint64
	ReadBytesSecMaxSet        bool
	ReadBytesSecMax           uint64
	WriteBytesSecMaxSet       bool
	WriteBytesSecMax          uint64
	TotalIopsSecMaxSet        bool
	TotalIopsSecMax           uint64
	ReadIopsSecMaxSet         bool
	ReadIopsSecMax            uint64
	WriteIopsSecMaxSet        bool
	WriteIopsSecMax           uint64
	TotalBytesSecMaxLengthSet bool
	TotalBytesSecMaxLength    uint64
	ReadBytesSecMaxLengthSet  bool
	ReadBytesSecMaxLength     uint64
	WriteBytesSecMaxLengthSet bool
	WriteBytesSecMaxLength    uint64
	TotalIopsSecMaxLengthSet  bool
	TotalIopsSecMaxLength     uint64
	ReadIopsSecMaxLengthSet   bool
	ReadIopsSecMaxLength      uint64
	WriteIopsSecMaxLengthSet  bool
	WriteIopsSecMaxLength     uint64
	SizeIopsSecSet            bool
	SizeIopsSec               uint64
	GroupNameSet              bool
	GroupName                 string
}

func getBlockIoTuneParametersFieldInfo(params *DomainBlockIoTuneParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2990:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC /*line :2990:43*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecSet,
			ul:  &params.TotalBytesSec,
		},
		( /*line :2994:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC /*line :2994:42*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecSet,
			ul:  &params.ReadBytesSec,
		},
		( /*line :2998:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC /*line :2998:43*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecSet,
			ul:  &params.WriteBytesSec,
		},
		( /*line :3002:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC /*line :3002:42*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecSet,
			ul:  &params.TotalIopsSec,
		},
		( /*line :3006:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC /*line :3006:41*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecSet,
			ul:  &params.ReadIopsSec,
		},
		( /*line :3010:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC /*line :3010:42*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecSet,
			ul:  &params.WriteIopsSec,
		},
		( /*line :3014:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX /*line :3014:47*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecMaxSet,
			ul:  &params.TotalBytesSecMax,
		},
		( /*line :3018:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX /*line :3018:46*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecMaxSet,
			ul:  &params.ReadBytesSecMax,
		},
		( /*line :3022:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX /*line :3022:47*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecMaxSet,
			ul:  &params.WriteBytesSecMax,
		},
		( /*line :3026:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX /*line :3026:46*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecMaxSet,
			ul:  &params.TotalIopsSecMax,
		},
		( /*line :3030:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX /*line :3030:45*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecMaxSet,
			ul:  &params.ReadIopsSecMax,
		},
		( /*line :3034:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX /*line :3034:46*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecMaxSet,
			ul:  &params.WriteIopsSecMax,
		},
		( /*line :3038:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH /*line :3038:54*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecMaxLengthSet,
			ul:  &params.TotalBytesSecMaxLength,
		},
		( /*line :3042:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH /*line :3042:53*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecMaxLengthSet,
			ul:  &params.ReadBytesSecMaxLength,
		},
		( /*line :3046:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH /*line :3046:54*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecMaxLengthSet,
			ul:  &params.WriteBytesSecMaxLength,
		},
		( /*line :3050:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH /*line :3050:53*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecMaxLengthSet,
			ul:  &params.TotalIopsSecMaxLength,
		},
		( /*line :3054:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH /*line :3054:52*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecMaxLengthSet,
			ul:  &params.ReadIopsSecMaxLength,
		},
		( /*line :3058:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH /*line :3058:53*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecMaxLengthSet,
			ul:  &params.WriteIopsSecMaxLength,
		},
		( /*line :3062:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC /*line :3062:41*/): typedParamsFieldInfo{
			set: &params.SizeIopsSecSet,
			ul:  &params.SizeIopsSec,
		},
		( /*line :3066:3*/_Csconst_VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME /*line :3066:38*/): typedParamsFieldInfo{
			set: &params.GroupNameSet,
			s:   &params.GroupName,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetBlockIoTune
func (d *Domain) GetBlockIoTune(disk string, flags DomainModificationImpact) (*DomainBlockIoTuneParameters, error) {
	cdisk := ( /*line :3075:11*/_Cfunc_CString /*line :3075:19*/)(disk)
	defer func() func() { _cgo0 := /*line :3076:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3076:37*/_Cfunc_free(_cgo0); }}()()

	params := &DomainBlockIoTuneParameters{}
	info := getBlockIoTuneParametersFieldInfo(params)

	var cnparams  /*line :3081:15*/_Ctype_int /*line :3081:20*/
	var err  /*line :3082:10*/_Ctype_virError /*line :3082:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3083:42*/d.ptr; var _cgo1 *_Ctype_char = /*line :3083:49*/cdisk; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :3083:56*/nil; var _cgo3 *_Ctype_int = /*line :3083:61*/&cnparams; var _cgo4 _Ctype_uint = /*line :3083:72*/0; _cgoBase5 := /*line :3083:75*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :3083:80*/_Cfunc_virDomainGetBlockIoTuneWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :3089:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3089:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :3090:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :3090:48*/cdisk; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :3090:55*/cparams; var _cgo3 *_Ctype_int = /*line :3090:64*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :3090:81*/(flags); _cgoBase5 := /*line :3090:90*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :3090:95*/_Cfunc_virDomainGetBlockIoTuneWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetBlockIoTune
func (d *Domain) SetBlockIoTune(disk string, params *DomainBlockIoTuneParameters, flags DomainModificationImpact) error {
	cdisk := ( /*line :3105:11*/_Cfunc_CString /*line :3105:19*/)(disk)
	defer func() func() { _cgo0 := /*line :3106:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3106:37*/_Cfunc_free(_cgo0); }}()()

	info := getBlockIoTuneParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :3115:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3115:34*/)(cparams, cnparams)

	var err  /*line :3117:10*/_Ctype_virError /*line :3117:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3118:42*/d.ptr; var _cgo1 *_Ctype_char = /*line :3118:49*/cdisk; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :3118:56*/cparams; var _cgo3 _Ctype_int = /*line :3118:65*/cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :3118:81*/(flags); _cgoBase5 := /*line :3118:90*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :3118:95*/_Cfunc_virDomainSetBlockIoTuneWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainBlockJobInfo struct {
	Type      DomainBlockJobType
	Bandwidth uint64
	Cur       uint64
	End       uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetBlockJobInfo
func (d *Domain) GetBlockJobInfo(disk string, flags DomainBlockJobInfoFlags) (*DomainBlockJobInfo, error) {
	cdisk := ( /*line :3135:11*/_Cfunc_CString /*line :3135:19*/)(disk)
	defer func() func() { _cgo0 := /*line :3136:15*/unsafe.Pointer(cdisk); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3136:37*/_Cfunc_free(_cgo0); }}()()

	var cinfo  /*line :3138:12*/_Ctype_virDomainBlockJobInfo /*line :3138:35*/

	var err  /*line :3140:10*/_Ctype_virError /*line :3140:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3141:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :3141:50*/cdisk; var _cgo2 *_Ctype_struct__virDomainBlockJobInfo = /*line :3141:57*/&cinfo; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3141:71*/(flags); _cgoBase4 := /*line :3141:80*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3141:85*/_Cfunc_virDomainGetBlockJobInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if ret == -1 {
		return nil, makeError(&err)
	}

	return &DomainBlockJobInfo{
		Type:      DomainBlockJobType(cinfo._type),
		Bandwidth: uint64(cinfo.bandwidth),
		Cur:       uint64(cinfo.cur),
		End:       uint64(cinfo.end),
	}, nil
}

type DomainControlInfo struct {
	State     DomainControlState
	Details   int
	StateTime uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetControlInfo
func (d *Domain) GetControlInfo(flags uint32) (*DomainControlInfo, error) {

	var cinfo  /*line :3164:12*/_Ctype_virDomainControlInfo /*line :3164:34*/

	var err  /*line :3166:10*/_Ctype_virError /*line :3166:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3167:42*/d.ptr; var _cgo1 *_Ctype_struct__virDomainControlInfo = /*line :3167:49*/&cinfo; var _cgo2 _Ctype_uint = _Ctype_uint /*line :3167:63*/(flags); _cgoBase3 := /*line :3167:72*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :3167:77*/_Cfunc_virDomainGetControlInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &DomainControlInfo{
		State:     DomainControlState(cinfo.state),
		Details:   int(cinfo.details),
		StateTime: uint64(cinfo.stateTime),
	}, nil
}

type DomainDiskError struct {
	Disk  string
	Error DomainDiskErrorCode
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetDiskErrors
func (d *Domain) GetDiskErrors(flags uint32) ([]DomainDiskError, error) {
	var err  /*line :3186:10*/_Ctype_virError /*line :3186:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3187:41*/d.ptr; var _cgo1 *_Ctype_struct__virDomainDiskError = /*line :3187:48*/nil; var _cgo2 _Ctype_uint = /*line :3187:53*/0; var _cgo3 _Ctype_uint = /*line :3187:56*/0; _cgoBase4 := /*line :3187:59*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3187:64*/_Cfunc_virDomainGetDiskErrorsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []DomainDiskError{}, makeError(&err)
	}

	maxerrors := ret
	cerrors := make([] /*line :3193:20*/_Ctype_virDomainDiskError /*line :3193:40*/, maxerrors)
	var cerrorsPtr * /*line :3194:18*/_Ctype_virDomainDiskError /*line :3194:38*/ = nil
	if maxerrors > 0 {
		cerrorsPtr = &cerrors[0]
	}

	ret = func() _Ctype_int{ _cgo0 := /*line :3199:40*/d.ptr; _cgo1 := /*line :3199:47*/cerrorsPtr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :3199:65*/(maxerrors); var _cgo3 _Ctype_uint = _Ctype_uint /*line :3199:84*/(flags); _cgoBase4 := /*line :3199:93*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3199:98*/_Cfunc_virDomainGetDiskErrorsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []DomainDiskError{}, makeError(&err)
	}

	errors := make([]DomainDiskError, maxerrors)

	for i, cerror := range cerrors {
		errors[i] = DomainDiskError{
			Disk:  ( /*line :3208:11*/_Cfunc_GoString /*line :3208:20*/)(cerror.disk),
			Error: DomainDiskErrorCode(cerror.error),
		}
		func() { _cgo0 := /*line :3211:10*/unsafe.Pointer(cerror.disk); _cgoCheckPointer(_cgo0, nil); /*line :3211:38*/_Cfunc_free(_cgo0); }()
	}

	return errors, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetHostname
func (d *Domain) GetHostname(flags DomainGetHostnameFlags) (string, error) {
	var err  /*line :3219:10*/_Ctype_virError /*line :3219:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :3220:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :3220:52*/(flags); _cgoBase2 := /*line :3220:61*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :3220:66*/_Cfunc_virDomainGetHostnameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :3225:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3225:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :3227:9*/_Cfunc_GoString /*line :3227:18*/)(ret), nil
}

type DomainJobInfo struct {
	Type                      DomainJobType
	TimeElapsedSet            bool
	TimeElapsed               uint64
	TimeElapsedNetSet         bool
	TimeElapsedNet            uint64
	TimeRemainingSet          bool
	TimeRemaining             uint64
	DowntimeSet               bool
	Downtime                  uint64
	DowntimeNetSet            bool
	DowntimeNet               uint64
	SetupTimeSet              bool
	SetupTime                 uint64
	DataTotalSet              bool
	DataTotal                 uint64
	DataProcessedSet          bool
	DataProcessed             uint64
	DataRemainingSet          bool
	DataRemaining             uint64
	MemTotalSet               bool
	MemTotal                  uint64
	MemProcessedSet           bool
	MemProcessed              uint64
	MemRemainingSet           bool
	MemRemaining              uint64
	MemConstantSet            bool
	MemConstant               uint64
	MemNormalSet              bool
	MemNormal                 uint64
	MemNormalBytesSet         bool
	MemNormalBytes            uint64
	MemBpsSet                 bool
	MemBps                    uint64
	MemDirtyRateSet           bool
	MemDirtyRate              uint64
	MemPageSizeSet            bool
	MemPageSize               uint64
	MemIterationSet           bool
	MemIteration              uint64
	DiskTotalSet              bool
	DiskTotal                 uint64
	DiskProcessedSet          bool
	DiskProcessed             uint64
	DiskRemainingSet          bool
	DiskRemaining             uint64
	DiskBpsSet                bool
	DiskBps                   uint64
	CompressionCacheSet       bool
	CompressionCache          uint64
	CompressionBytesSet       bool
	CompressionBytes          uint64
	CompressionPagesSet       bool
	CompressionPages          uint64
	CompressionCacheMissesSet bool
	CompressionCacheMisses    uint64
	CompressionOverflowSet    bool
	CompressionOverflow       uint64
	AutoConvergeThrottleSet   bool
	AutoConvergeThrottle      int
	OperationSet              bool
	Operation                 DomainJobOperationType
	MemPostcopyReqsSet        bool
	MemPostcopyReqs           uint64
	JobSuccessSet             bool
	JobSuccess                bool
	DiskTempUsedSet           bool
	DiskTempUsed              uint64
	DiskTempTotalSet          bool
	DiskTempTotal             uint64
	ErrorMessageSet           bool
	ErrorMessage              string
	VFIODataTransferredSet    bool
	VFIODataTransferred       uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetJobInfo
func (d *Domain) GetJobInfo() (*DomainJobInfo, error) {
	var cinfo  /*line :3308:12*/_Ctype_virDomainJobInfo /*line :3308:30*/

	var err  /*line :3310:10*/_Ctype_virError /*line :3310:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3311:38*/d.ptr; var _cgo1 *_Ctype_struct__virDomainJobInfo = /*line :3311:45*/&cinfo; _cgoBase2 := /*line :3311:53*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :3311:58*/_Cfunc_virDomainGetJobInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &DomainJobInfo{
		Type:             DomainJobType(cinfo._type),
		TimeElapsedSet:   true,
		TimeElapsed:      uint64(cinfo.timeElapsed),
		TimeRemainingSet: true,
		TimeRemaining:    uint64(cinfo.timeRemaining),
		DataTotalSet:     true,
		DataTotal:        uint64(cinfo.dataTotal),
		DataProcessedSet: true,
		DataProcessed:    uint64(cinfo.dataProcessed),
		DataRemainingSet: true,
		DataRemaining:    uint64(cinfo.dataRemaining),
		MemTotalSet:      true,
		MemTotal:         uint64(cinfo.memTotal),
		MemProcessedSet:  true,
		MemProcessed:     uint64(cinfo.memProcessed),
		MemRemainingSet:  true,
		MemRemaining:     uint64(cinfo.memRemaining),
		DiskTotalSet:     true,
		DiskTotal:        uint64(cinfo.fileTotal),
		DiskProcessedSet: true,
		DiskProcessed:    uint64(cinfo.fileProcessed),
		DiskRemainingSet: true,
		DiskRemaining:    uint64(cinfo.fileRemaining),
	}, nil
}

func getDomainJobInfoFieldInfo(params *DomainJobInfo) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3345:3*/_Csconst_VIR_DOMAIN_JOB_TIME_ELAPSED /*line :3345:31*/): typedParamsFieldInfo{
			set: &params.TimeElapsedSet,
			ul:  &params.TimeElapsed,
		},
		( /*line :3349:3*/_Csconst_VIR_DOMAIN_JOB_TIME_ELAPSED_NET /*line :3349:35*/): typedParamsFieldInfo{
			set: &params.TimeElapsedNetSet,
			ul:  &params.TimeElapsedNet,
		},
		( /*line :3353:3*/_Csconst_VIR_DOMAIN_JOB_TIME_REMAINING /*line :3353:33*/): typedParamsFieldInfo{
			set: &params.TimeRemainingSet,
			ul:  &params.TimeRemaining,
		},
		( /*line :3357:3*/_Csconst_VIR_DOMAIN_JOB_DOWNTIME /*line :3357:27*/): typedParamsFieldInfo{
			set: &params.DowntimeSet,
			ul:  &params.Downtime,
		},
		( /*line :3361:3*/_Csconst_VIR_DOMAIN_JOB_DOWNTIME_NET /*line :3361:31*/): typedParamsFieldInfo{
			set: &params.DowntimeNetSet,
			ul:  &params.DowntimeNet,
		},
		( /*line :3365:3*/_Csconst_VIR_DOMAIN_JOB_SETUP_TIME /*line :3365:29*/): typedParamsFieldInfo{
			set: &params.SetupTimeSet,
			ul:  &params.SetupTime,
		},
		( /*line :3369:3*/_Csconst_VIR_DOMAIN_JOB_DATA_TOTAL /*line :3369:29*/): typedParamsFieldInfo{
			set: &params.DataTotalSet,
			ul:  &params.DataTotal,
		},
		( /*line :3373:3*/_Csconst_VIR_DOMAIN_JOB_DATA_PROCESSED /*line :3373:33*/): typedParamsFieldInfo{
			set: &params.DataProcessedSet,
			ul:  &params.DataProcessed,
		},
		( /*line :3377:3*/_Csconst_VIR_DOMAIN_JOB_DATA_REMAINING /*line :3377:33*/): typedParamsFieldInfo{
			set: &params.DataRemainingSet,
			ul:  &params.DataRemaining,
		},
		( /*line :3381:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_TOTAL /*line :3381:31*/): typedParamsFieldInfo{
			set: &params.MemTotalSet,
			ul:  &params.MemTotal,
		},
		( /*line :3385:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_PROCESSED /*line :3385:35*/): typedParamsFieldInfo{
			set: &params.MemProcessedSet,
			ul:  &params.MemProcessed,
		},
		( /*line :3389:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_REMAINING /*line :3389:35*/): typedParamsFieldInfo{
			set: &params.MemRemainingSet,
			ul:  &params.MemRemaining,
		},
		( /*line :3393:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_CONSTANT /*line :3393:34*/): typedParamsFieldInfo{
			set: &params.MemConstantSet,
			ul:  &params.MemConstant,
		},
		( /*line :3397:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_NORMAL /*line :3397:32*/): typedParamsFieldInfo{
			set: &params.MemNormalSet,
			ul:  &params.MemNormal,
		},
		( /*line :3401:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES /*line :3401:38*/): typedParamsFieldInfo{
			set: &params.MemNormalBytesSet,
			ul:  &params.MemNormalBytes,
		},
		( /*line :3405:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_BPS /*line :3405:29*/): typedParamsFieldInfo{
			set: &params.MemBpsSet,
			ul:  &params.MemBps,
		},
		( /*line :3409:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE /*line :3409:36*/): typedParamsFieldInfo{
			set: &params.MemDirtyRateSet,
			ul:  &params.MemDirtyRate,
		},
		( /*line :3413:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE /*line :3413:35*/): typedParamsFieldInfo{
			set: &params.MemPageSizeSet,
			ul:  &params.MemPageSize,
		},
		( /*line :3417:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_ITERATION /*line :3417:35*/): typedParamsFieldInfo{
			set: &params.MemIterationSet,
			ul:  &params.MemIteration,
		},
		( /*line :3421:3*/_Csconst_VIR_DOMAIN_JOB_DISK_TOTAL /*line :3421:29*/): typedParamsFieldInfo{
			set: &params.DiskTotalSet,
			ul:  &params.DiskTotal,
		},
		( /*line :3425:3*/_Csconst_VIR_DOMAIN_JOB_DISK_PROCESSED /*line :3425:33*/): typedParamsFieldInfo{
			set: &params.DiskProcessedSet,
			ul:  &params.DiskProcessed,
		},
		( /*line :3429:3*/_Csconst_VIR_DOMAIN_JOB_DISK_REMAINING /*line :3429:33*/): typedParamsFieldInfo{
			set: &params.DiskRemainingSet,
			ul:  &params.DiskRemaining,
		},
		( /*line :3433:3*/_Csconst_VIR_DOMAIN_JOB_DISK_BPS /*line :3433:27*/): typedParamsFieldInfo{
			set: &params.DiskBpsSet,
			ul:  &params.DiskBps,
		},
		( /*line :3437:3*/_Csconst_VIR_DOMAIN_JOB_COMPRESSION_CACHE /*line :3437:36*/): typedParamsFieldInfo{
			set: &params.CompressionCacheSet,
			ul:  &params.CompressionCache,
		},
		( /*line :3441:3*/_Csconst_VIR_DOMAIN_JOB_COMPRESSION_BYTES /*line :3441:36*/): typedParamsFieldInfo{
			set: &params.CompressionBytesSet,
			ul:  &params.CompressionBytes,
		},
		( /*line :3445:3*/_Csconst_VIR_DOMAIN_JOB_COMPRESSION_PAGES /*line :3445:36*/): typedParamsFieldInfo{
			set: &params.CompressionPagesSet,
			ul:  &params.CompressionPages,
		},
		( /*line :3449:3*/_Csconst_VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES /*line :3449:43*/): typedParamsFieldInfo{
			set: &params.CompressionCacheMissesSet,
			ul:  &params.CompressionCacheMisses,
		},
		( /*line :3453:3*/_Csconst_VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW /*line :3453:39*/): typedParamsFieldInfo{
			set: &params.CompressionOverflowSet,
			ul:  &params.CompressionOverflow,
		},
		( /*line :3457:3*/_Csconst_VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE /*line :3457:41*/): typedParamsFieldInfo{
			set: &params.AutoConvergeThrottleSet,
			i:   &params.AutoConvergeThrottle,
		},
		( /*line :3461:3*/_Csconst_VIR_DOMAIN_JOB_OPERATION /*line :3461:28*/): typedParamsFieldInfo{
			set: &params.OperationSet,
			i:   (*int)(&params.Operation),
		},
		( /*line :3465:3*/_Csconst_VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS /*line :3465:39*/): typedParamsFieldInfo{
			set: &params.MemPostcopyReqsSet,
			ul:  &params.MemPostcopyReqs,
		},
		( /*line :3469:3*/_Csconst_VIR_DOMAIN_JOB_SUCCESS /*line :3469:26*/): typedParamsFieldInfo{
			set: &params.JobSuccessSet,
			b:   &params.JobSuccess,
		},
		( /*line :3473:3*/_Csconst_VIR_DOMAIN_JOB_DISK_TEMP_USED /*line :3473:33*/): typedParamsFieldInfo{
			set: &params.DiskTempUsedSet,
			ul:  &params.DiskTempUsed,
		},
		( /*line :3477:3*/_Csconst_VIR_DOMAIN_JOB_DISK_TEMP_TOTAL /*line :3477:34*/): typedParamsFieldInfo{
			set: &params.DiskTempTotalSet,
			ul:  &params.DiskTempTotal,
		},
		( /*line :3481:3*/_Csconst_VIR_DOMAIN_JOB_ERRMSG /*line :3481:25*/): typedParamsFieldInfo{
			set: &params.ErrorMessageSet,
			s:   &params.ErrorMessage,
		},
		( /*line :3485:3*/_Csconst_VIR_DOMAIN_JOB_VFIO_DATA_TRANSFERRED /*line :3485:40*/): typedParamsFieldInfo{
			set: &params.VFIODataTransferredSet,
			ul:  &params.VFIODataTransferred,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetJobStats
func (d *Domain) GetJobStats(flags DomainGetJobStatsFlags) (*DomainJobInfo, error) {
	var cparams  /*line :3494:14*/_Ctype_virTypedParameterPtr /*line :3494:36*/
	var cnparams  /*line :3495:15*/_Ctype_int /*line :3495:20*/
	var jobtype  /*line :3496:14*/_Ctype_int /*line :3496:19*/
	var err  /*line :3497:10*/_Ctype_virError /*line :3497:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3498:39*/d.ptr; var _cgo1 *_Ctype_int = /*line :3498:46*/&jobtype; _cgoBase2 := /*line :3498:56*/&cparams; _cgo2 := _cgoBase2; var _cgo3 *_Ctype_int = /*line :3498:66*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :3498:83*/(flags); _cgoBase5 := /*line :3498:92*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :3498:97*/_Cfunc_virDomainGetJobStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}
	defer ( /*line :3502:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3502:34*/)(cparams, cnparams)

	params := DomainJobInfo{
		Type: DomainJobType(jobtype),
	}
	info := getDomainJobInfoFieldInfo(&params)

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return &params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetMaxMemory
func (d *Domain) GetMaxMemory() (uint64, error) {
	var err  /*line :3519:10*/_Ctype_virError /*line :3519:20*/
	ret := func() _Ctype_ulong{ _cgo0 := /*line :3520:40*/d.ptr; _cgoBase1 := /*line :3520:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :3520:52*/_Cfunc_virDomainGetMaxMemoryWrapper(_cgo0, _cgo1); }()
	if ret == 0 {
		return 0, makeError(&err)
	}

	return uint64(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetMaxVcpus
func (d *Domain) GetMaxVcpus() (uint, error) {
	var err  /*line :3530:10*/_Ctype_virError /*line :3530:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3531:39*/d.ptr; _cgoBase1 := /*line :3531:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :3531:51*/_Cfunc_virDomainGetMaxVcpusWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return uint(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetOSType
func (d *Domain) GetOSType() (string, error) {
	var err  /*line :3541:10*/_Ctype_virError /*line :3541:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :3542:37*/d.ptr; _cgoBase1 := /*line :3542:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :3542:49*/_Cfunc_virDomainGetOSTypeWrapper(_cgo0, _cgo1); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :3547:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3547:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :3549:9*/_Cfunc_GoString /*line :3549:18*/)(ret), nil
}

type DomainMemoryParameters struct {
	HardLimitSet     bool
	HardLimit        uint64
	SoftLimitSet     bool
	SoftLimit        uint64
	MinGuaranteeSet  bool
	MinGuarantee     uint64
	SwapHardLimitSet bool
	SwapHardLimit    uint64
}

func getDomainMemoryParametersFieldInfo(params *DomainMemoryParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3565:3*/_Csconst_VIR_DOMAIN_MEMORY_HARD_LIMIT /*line :3565:32*/): typedParamsFieldInfo{
			set: &params.HardLimitSet,
			ul:  &params.HardLimit,
		},
		( /*line :3569:3*/_Csconst_VIR_DOMAIN_MEMORY_SOFT_LIMIT /*line :3569:32*/): typedParamsFieldInfo{
			set: &params.SoftLimitSet,
			ul:  &params.SoftLimit,
		},
		( /*line :3573:3*/_Csconst_VIR_DOMAIN_MEMORY_MIN_GUARANTEE /*line :3573:35*/): typedParamsFieldInfo{
			set: &params.MinGuaranteeSet,
			ul:  &params.MinGuarantee,
		},
		( /*line :3577:3*/_Csconst_VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT /*line :3577:37*/): typedParamsFieldInfo{
			set: &params.SwapHardLimitSet,
			ul:  &params.SwapHardLimit,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetMemoryParameters
func (d *Domain) GetMemoryParameters(flags DomainModificationImpact) (*DomainMemoryParameters, error) {
	params := &DomainMemoryParameters{}
	info := getDomainMemoryParametersFieldInfo(params)

	var cnparams  /*line :3589:15*/_Ctype_int /*line :3589:20*/
	var err  /*line :3590:10*/_Ctype_virError /*line :3590:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3591:47*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3591:54*/nil; var _cgo2 *_Ctype_int = /*line :3591:59*/&cnparams; var _cgo3 _Ctype_uint = /*line :3591:70*/0; _cgoBase4 := /*line :3591:73*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3591:78*/_Cfunc_virDomainGetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :3597:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3597:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :3598:46*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3598:53*/cparams; var _cgo2 *_Ctype_int = /*line :3598:62*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3598:79*/(flags); _cgoBase4 := /*line :3598:88*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3598:93*/_Cfunc_virDomainGetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetMemoryParameters
func (d *Domain) SetMemoryParameters(params *DomainMemoryParameters, flags DomainModificationImpact) error {
	info := getDomainMemoryParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :3620:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3620:34*/)(cparams, cnparams)

	var err  /*line :3622:10*/_Ctype_virError /*line :3622:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3623:47*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3623:54*/cparams; var _cgo2 _Ctype_int = /*line :3623:63*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3623:79*/(flags); _cgoBase4 := /*line :3623:88*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3623:93*/_Cfunc_virDomainSetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainNumaParameters struct {
	NodesetSet bool
	Nodeset    string
	ModeSet    bool
	Mode       DomainNumatuneMemMode
}

func getDomainNumaParametersFieldInfo(params *DomainNumaParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3640:3*/_Csconst_VIR_DOMAIN_NUMA_NODESET /*line :3640:27*/): typedParamsFieldInfo{
			set: &params.NodesetSet,
			s:   &params.Nodeset,
		},
		( /*line :3644:3*/_Csconst_VIR_DOMAIN_NUMA_MODE /*line :3644:24*/): typedParamsFieldInfo{
			set: &params.ModeSet,
			i:   (*int)(&params.Mode),
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetNumaParameters
func (d *Domain) GetNumaParameters(flags DomainModificationImpact) (*DomainNumaParameters, error) {
	params := &DomainNumaParameters{}
	info := getDomainNumaParametersFieldInfo(params)

	var cnparams  /*line :3656:15*/_Ctype_int /*line :3656:20*/
	var err  /*line :3657:10*/_Ctype_virError /*line :3657:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3658:45*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3658:52*/nil; var _cgo2 *_Ctype_int = /*line :3658:57*/&cnparams; var _cgo3 _Ctype_uint = /*line :3658:68*/0; _cgoBase4 := /*line :3658:71*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3658:76*/_Cfunc_virDomainGetNumaParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :3664:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3664:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :3665:44*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3665:51*/cparams; var _cgo2 *_Ctype_int = /*line :3665:60*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3665:77*/(flags); _cgoBase4 := /*line :3665:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3665:91*/_Cfunc_virDomainGetNumaParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetNumaParameters
func (d *Domain) SetNumaParameters(params *DomainNumaParameters, flags DomainModificationImpact) error {
	info := getDomainNumaParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :3687:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3687:34*/)(cparams, cnparams)

	var err  /*line :3689:10*/_Ctype_virError /*line :3689:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3690:45*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3690:52*/cparams; var _cgo2 _Ctype_int = /*line :3690:61*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3690:77*/(flags); _cgoBase4 := /*line :3690:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3690:91*/_Cfunc_virDomainSetNumaParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainPerfEvents struct {
	CmtSet                   bool
	Cmt                      bool
	MbmtSet                  bool
	Mbmt                     bool
	MbmlSet                  bool
	Mbml                     bool
	CacheMissesSet           bool
	CacheMisses              bool
	CacheReferencesSet       bool
	CacheReferences          bool
	InstructionsSet          bool
	Instructions             bool
	CpuCyclesSet             bool
	CpuCycles                bool
	BranchInstructionsSet    bool
	BranchInstructions       bool
	BranchMissesSet          bool
	BranchMisses             bool
	BusCyclesSet             bool
	BusCycles                bool
	StalledCyclesFrontendSet bool
	StalledCyclesFrontend    bool
	StalledCyclesBackendSet  bool
	StalledCyclesBackend     bool
	RefCpuCyclesSet          bool
	RefCpuCycles             bool
	CpuClockSet              bool
	CpuClock                 bool
	TaskClockSet             bool
	TaskClock                bool
	PageFaultsSet            bool
	PageFaults               bool
	ContextSwitchesSet       bool
	ContextSwitches          bool
	CpuMigrationsSet         bool
	CpuMigrations            bool
	PageFaultsMinSet         bool
	PageFaultsMin            bool
	PageFaultsMajSet         bool
	PageFaultsMaj            bool
	AlignmentFaultsSet       bool
	AlignmentFaults          bool
	EmulationFaultsSet       bool
	EmulationFaults          bool
}

/* Remember to also update DomainStatsPerf in connect.go when adding to the stuct above */

func getDomainPerfEventsFieldInfo(params *DomainPerfEvents) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3749:3*/_Csconst_VIR_PERF_PARAM_CMT /*line :3749:22*/): typedParamsFieldInfo{
			set: &params.CmtSet,
			b:   &params.Cmt,
		},
		( /*line :3753:3*/_Csconst_VIR_PERF_PARAM_MBMT /*line :3753:23*/): typedParamsFieldInfo{
			set: &params.MbmtSet,
			b:   &params.Mbmt,
		},
		( /*line :3757:3*/_Csconst_VIR_PERF_PARAM_MBML /*line :3757:23*/): typedParamsFieldInfo{
			set: &params.MbmlSet,
			b:   &params.Mbml,
		},
		( /*line :3761:3*/_Csconst_VIR_PERF_PARAM_CACHE_MISSES /*line :3761:31*/): typedParamsFieldInfo{
			set: &params.CacheMissesSet,
			b:   &params.CacheMisses,
		},
		( /*line :3765:3*/_Csconst_VIR_PERF_PARAM_CACHE_REFERENCES /*line :3765:35*/): typedParamsFieldInfo{
			set: &params.CacheReferencesSet,
			b:   &params.CacheReferences,
		},
		( /*line :3769:3*/_Csconst_VIR_PERF_PARAM_INSTRUCTIONS /*line :3769:31*/): typedParamsFieldInfo{
			set: &params.InstructionsSet,
			b:   &params.Instructions,
		},
		( /*line :3773:3*/_Csconst_VIR_PERF_PARAM_CPU_CYCLES /*line :3773:29*/): typedParamsFieldInfo{
			set: &params.CpuCyclesSet,
			b:   &params.CpuCycles,
		},
		( /*line :3777:3*/_Csconst_VIR_PERF_PARAM_BRANCH_INSTRUCTIONS /*line :3777:38*/): typedParamsFieldInfo{
			set: &params.BranchInstructionsSet,
			b:   &params.BranchInstructions,
		},
		( /*line :3781:3*/_Csconst_VIR_PERF_PARAM_BRANCH_MISSES /*line :3781:32*/): typedParamsFieldInfo{
			set: &params.BranchMissesSet,
			b:   &params.BranchMisses,
		},
		( /*line :3785:3*/_Csconst_VIR_PERF_PARAM_BUS_CYCLES /*line :3785:29*/): typedParamsFieldInfo{
			set: &params.BusCyclesSet,
			b:   &params.BusCycles,
		},
		( /*line :3789:3*/_Csconst_VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND /*line :3789:42*/): typedParamsFieldInfo{
			set: &params.StalledCyclesFrontendSet,
			b:   &params.StalledCyclesFrontend,
		},
		( /*line :3793:3*/_Csconst_VIR_PERF_PARAM_STALLED_CYCLES_BACKEND /*line :3793:41*/): typedParamsFieldInfo{
			set: &params.StalledCyclesBackendSet,
			b:   &params.StalledCyclesBackend,
		},
		( /*line :3797:3*/_Csconst_VIR_PERF_PARAM_REF_CPU_CYCLES /*line :3797:33*/): typedParamsFieldInfo{
			set: &params.RefCpuCyclesSet,
			b:   &params.RefCpuCycles,
		},
		( /*line :3801:3*/_Csconst_VIR_PERF_PARAM_CPU_CLOCK /*line :3801:28*/): typedParamsFieldInfo{
			set: &params.CpuClockSet,
			b:   &params.CpuClock,
		},
		( /*line :3805:3*/_Csconst_VIR_PERF_PARAM_TASK_CLOCK /*line :3805:29*/): typedParamsFieldInfo{
			set: &params.TaskClockSet,
			b:   &params.TaskClock,
		},
		( /*line :3809:3*/_Csconst_VIR_PERF_PARAM_PAGE_FAULTS /*line :3809:30*/): typedParamsFieldInfo{
			set: &params.PageFaultsSet,
			b:   &params.PageFaults,
		},
		( /*line :3813:3*/_Csconst_VIR_PERF_PARAM_CONTEXT_SWITCHES /*line :3813:35*/): typedParamsFieldInfo{
			set: &params.ContextSwitchesSet,
			b:   &params.ContextSwitches,
		},
		( /*line :3817:3*/_Csconst_VIR_PERF_PARAM_CPU_MIGRATIONS /*line :3817:33*/): typedParamsFieldInfo{
			set: &params.CpuMigrationsSet,
			b:   &params.CpuMigrations,
		},
		( /*line :3821:3*/_Csconst_VIR_PERF_PARAM_PAGE_FAULTS_MIN /*line :3821:34*/): typedParamsFieldInfo{
			set: &params.PageFaultsMinSet,
			b:   &params.PageFaultsMin,
		},
		( /*line :3825:3*/_Csconst_VIR_PERF_PARAM_PAGE_FAULTS_MAJ /*line :3825:34*/): typedParamsFieldInfo{
			set: &params.PageFaultsMajSet,
			b:   &params.PageFaultsMaj,
		},
		( /*line :3829:3*/_Csconst_VIR_PERF_PARAM_ALIGNMENT_FAULTS /*line :3829:35*/): typedParamsFieldInfo{
			set: &params.AlignmentFaultsSet,
			b:   &params.AlignmentFaults,
		},
		( /*line :3833:3*/_Csconst_VIR_PERF_PARAM_EMULATION_FAULTS /*line :3833:35*/): typedParamsFieldInfo{
			set: &params.EmulationFaultsSet,
			b:   &params.EmulationFaults,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetPerfEvents
func (d *Domain) GetPerfEvents(flags DomainModificationImpact) (*DomainPerfEvents, error) {
	params := &DomainPerfEvents{}
	info := getDomainPerfEventsFieldInfo(params)

	var cparams  /*line :3845:14*/_Ctype_virTypedParameterPtr /*line :3845:36*/
	var cnparams  /*line :3846:15*/_Ctype_int /*line :3846:20*/
	var err  /*line :3847:10*/_Ctype_virError /*line :3847:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3848:41*/d.ptr; _cgoBase1 := /*line :3848:48*/&cparams; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_int = /*line :3848:58*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3848:75*/(flags); _cgoBase4 := /*line :3848:84*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3848:89*/_Cfunc_virDomainGetPerfEventsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :3853:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3853:34*/)(cparams, cnparams)

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetPerfEvents
func (d *Domain) SetPerfEvents(params *DomainPerfEvents, flags DomainModificationImpact) error {
	info := getDomainPerfEventsFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}
	defer ( /*line :3871:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3871:34*/)(cparams, cnparams)

	var err  /*line :3873:10*/_Ctype_virError /*line :3873:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3874:41*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3874:48*/cparams; var _cgo2 _Ctype_int = /*line :3874:57*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3874:73*/(flags); _cgoBase4 := /*line :3874:82*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3874:87*/_Cfunc_virDomainSetPerfEventsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainSchedulerParameters struct {
	Type              string
	CpuSharesSet      bool
	CpuShares         uint64
	GlobalPeriodSet   bool
	GlobalPeriod      uint64
	GlobalQuotaSet    bool
	GlobalQuota       int64
	VcpuPeriodSet     bool
	VcpuPeriod        uint64
	VcpuQuotaSet      bool
	VcpuQuota         int64
	EmulatorPeriodSet bool
	EmulatorPeriod    uint64
	EmulatorQuotaSet  bool
	EmulatorQuota     int64
	IothreadPeriodSet bool
	IothreadPeriod    uint64
	IothreadQuotaSet  bool
	IothreadQuota     int64
	WeightSet         bool
	Weight            uint
	CapSet            bool
	Cap               uint
	ReservationSet    bool
	Reservation       int64
	LimitSet          bool
	Limit             int64
	SharesSet         bool
	Shares            int
}

func getDomainSchedulerParametersFieldInfo(params *DomainSchedulerParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3916:3*/_Csconst_VIR_DOMAIN_SCHEDULER_CPU_SHARES /*line :3916:35*/): typedParamsFieldInfo{
			set: &params.CpuSharesSet,
			ul:  &params.CpuShares,
		},
		( /*line :3920:3*/_Csconst_VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD /*line :3920:38*/): typedParamsFieldInfo{
			set: &params.GlobalPeriodSet,
			ul:  &params.GlobalPeriod,
		},
		( /*line :3924:3*/_Csconst_VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA /*line :3924:37*/): typedParamsFieldInfo{
			set: &params.GlobalQuotaSet,
			l:   &params.GlobalQuota,
		},
		( /*line :3928:3*/_Csconst_VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD /*line :3928:40*/): typedParamsFieldInfo{
			set: &params.EmulatorPeriodSet,
			ul:  &params.EmulatorPeriod,
		},
		( /*line :3932:3*/_Csconst_VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA /*line :3932:39*/): typedParamsFieldInfo{
			set: &params.EmulatorQuotaSet,
			l:   &params.EmulatorQuota,
		},
		( /*line :3936:3*/_Csconst_VIR_DOMAIN_SCHEDULER_VCPU_PERIOD /*line :3936:36*/): typedParamsFieldInfo{
			set: &params.VcpuPeriodSet,
			ul:  &params.VcpuPeriod,
		},
		( /*line :3940:3*/_Csconst_VIR_DOMAIN_SCHEDULER_VCPU_QUOTA /*line :3940:35*/): typedParamsFieldInfo{
			set: &params.VcpuQuotaSet,
			l:   &params.VcpuQuota,
		},
		( /*line :3944:3*/_Csconst_VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD /*line :3944:40*/): typedParamsFieldInfo{
			set: &params.IothreadPeriodSet,
			ul:  &params.IothreadPeriod,
		},
		( /*line :3948:3*/_Csconst_VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA /*line :3948:39*/): typedParamsFieldInfo{
			set: &params.IothreadQuotaSet,
			l:   &params.IothreadQuota,
		},
		( /*line :3952:3*/_Csconst_VIR_DOMAIN_SCHEDULER_WEIGHT /*line :3952:31*/): typedParamsFieldInfo{
			set: &params.WeightSet,
			ui:  &params.Weight,
		},
		( /*line :3956:3*/_Csconst_VIR_DOMAIN_SCHEDULER_CAP /*line :3956:28*/): typedParamsFieldInfo{
			set: &params.CapSet,
			ui:  &params.Cap,
		},
		( /*line :3960:3*/_Csconst_VIR_DOMAIN_SCHEDULER_RESERVATION /*line :3960:36*/): typedParamsFieldInfo{
			set: &params.ReservationSet,
			l:   &params.Reservation,
		},
		( /*line :3964:3*/_Csconst_VIR_DOMAIN_SCHEDULER_LIMIT /*line :3964:30*/): typedParamsFieldInfo{
			set: &params.LimitSet,
			l:   &params.Limit,
		},
		( /*line :3968:3*/_Csconst_VIR_DOMAIN_SCHEDULER_SHARES /*line :3968:31*/): typedParamsFieldInfo{
			set: &params.SharesSet,
			i:   &params.Shares,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetSchedulerParameters
func (d *Domain) GetSchedulerParameters() (*DomainSchedulerParameters, error) {
	params := &DomainSchedulerParameters{}
	info := getDomainSchedulerParametersFieldInfo(params)

	var cnparams  /*line :3980:15*/_Ctype_int /*line :3980:20*/
	var err  /*line :3981:10*/_Ctype_virError /*line :3981:20*/
	schedtype := func() *_Ctype_char{ _cgo0 := /*line :3982:50*/d.ptr; var _cgo1 *_Ctype_int = /*line :3982:57*/&cnparams; _cgoBase2 := /*line :3982:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :3982:73*/_Cfunc_virDomainGetSchedulerTypeWrapper(_cgo0, _cgo1, _cgo2); }()
	if schedtype == nil {
		return nil, makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :3987:15*/unsafe.Pointer(schedtype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3987:41*/_Cfunc_free(_cgo0); }}()()
	if cnparams == 0 {
		return &DomainSchedulerParameters{
			Type: ( /*line :3990:10*/_Cfunc_GoString /*line :3990:19*/)(schedtype),
		}, nil
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :3995:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3995:34*/)(cparams, cnparams)
	ret := func() _Ctype_int{ _cgo0 := /*line :3996:50*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :3996:57*/cparams; var _cgo2 *_Ctype_int = /*line :3996:66*/&cnparams; _cgoBase3 := /*line :3996:77*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :3996:82*/_Cfunc_virDomainGetSchedulerParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetSchedulerParametersFlags
func (d *Domain) GetSchedulerParametersFlags(flags DomainModificationImpact) (*DomainSchedulerParameters, error) {
	params := &DomainSchedulerParameters{}
	info := getDomainSchedulerParametersFieldInfo(params)

	var cnparams  /*line :4014:15*/_Ctype_int /*line :4014:20*/
	var err  /*line :4015:10*/_Ctype_virError /*line :4015:20*/
	schedtype := func() *_Ctype_char{ _cgo0 := /*line :4016:50*/d.ptr; var _cgo1 *_Ctype_int = /*line :4016:57*/&cnparams; _cgoBase2 := /*line :4016:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4016:73*/_Cfunc_virDomainGetSchedulerTypeWrapper(_cgo0, _cgo1, _cgo2); }()
	if schedtype == nil {
		return nil, makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :4021:15*/unsafe.Pointer(schedtype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4021:41*/_Cfunc_free(_cgo0); }}()()
	if cnparams == 0 {
		return &DomainSchedulerParameters{
			Type: ( /*line :4024:10*/_Cfunc_GoString /*line :4024:19*/)(schedtype),
		}, nil
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :4029:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4029:34*/)(cparams, cnparams)
	ret := func() _Ctype_int{ _cgo0 := /*line :4030:55*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :4030:62*/cparams; var _cgo2 *_Ctype_int = /*line :4030:71*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4030:88*/(flags); _cgoBase4 := /*line :4030:97*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4030:102*/_Cfunc_virDomainGetSchedulerParametersFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetSchedulerParameters
func (d *Domain) SetSchedulerParameters(params *DomainSchedulerParameters) error {
	info := getDomainSchedulerParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :4052:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4052:34*/)(cparams, cnparams)

	var err  /*line :4054:10*/_Ctype_virError /*line :4054:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4055:50*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :4055:57*/cparams; var _cgo2 _Ctype_int = /*line :4055:66*/cnparams; _cgoBase3 := /*line :4055:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4055:81*/_Cfunc_virDomainSetSchedulerParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetSchedulerParametersFlags
func (d *Domain) SetSchedulerParametersFlags(params *DomainSchedulerParameters, flags DomainModificationImpact) error {
	info := getDomainSchedulerParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :4072:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4072:34*/)(cparams, cnparams)

	var err  /*line :4074:10*/_Ctype_virError /*line :4074:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4075:55*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :4075:62*/cparams; var _cgo2 _Ctype_int = /*line :4075:71*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4075:87*/(flags); _cgoBase4 := /*line :4075:96*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4075:101*/_Cfunc_virDomainSetSchedulerParametersFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type SecurityLabel struct {
	Label     string
	Enforcing bool
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetSecurityLabel
func (d *Domain) GetSecurityLabel() (*SecurityLabel, error) {
	var clabel  /*line :4090:13*/_Ctype_virSecurityLabel /*line :4090:31*/

	var err  /*line :4092:10*/_Ctype_virError /*line :4092:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4093:44*/d.ptr; var _cgo1 *_Ctype_struct__virSecurityLabel = /*line :4093:51*/&clabel; _cgoBase2 := /*line :4093:60*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4093:65*/_Cfunc_virDomainGetSecurityLabelWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &SecurityLabel{
		Label:     ( /*line :4099:14*/_Cfunc_GoString /*line :4099:23*/)((* /*line :4099:27*/_Ctype_char /*line :4099:33*/)(unsafe.Pointer(&clabel.label))),
		Enforcing: clabel.enforcing == 1,
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetSecurityLabelList
func (d *Domain) GetSecurityLabelList() ([]SecurityLabel, error) {
	var clabels * /*line :4106:15*/_Ctype_virSecurityLabel /*line :4106:33*/

	var err  /*line :4108:10*/_Ctype_virError /*line :4108:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4109:48*/d.ptr; _cgoBase1 := /*line :4109:95*/&clabels; _cgo1 := /*line :4109:55*/(*_Ctype_virSecurityLabelPtr /*line :4109:78*/)(unsafe.Pointer(_cgoBase1)); _cgoBase2 := /*line :4109:107*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4109:112*/_Cfunc_virDomainGetSecurityLabelListWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return []SecurityLabel{}, makeError(&err)
	}

	labels := make([]SecurityLabel, ret)
	for i := 0; i < int(ret); i++ {
		var clabel * /*line :4116:15*/_Ctype_virSecurityLabel /*line :4116:33*/
		clabel = (* /*line :4117:14*/_Ctype_virSecurityLabel /*line :4117:32*/)(unsafe.Pointer(uintptr(unsafe.Pointer(clabels)) + (unsafe.Sizeof(*clabel) * uintptr(i))))
		labels[i] = SecurityLabel{
			Label:     ( /*line :4119:15*/_Cfunc_GoString /*line :4119:24*/)((* /*line :4119:28*/_Ctype_char /*line :4119:34*/)(unsafe.Pointer(&clabel.label))),
			Enforcing: clabel.enforcing == 1,
		}
	}

	return labels, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetTime
func (d *Domain) GetTime(flags uint32) (int64, uint, error) {
	var secs  /*line :4129:11*/_Ctype_longlong /*line :4129:21*/
	var nsecs  /*line :4130:12*/_Ctype_uint /*line :4130:18*/
	var err  /*line :4131:10*/_Ctype_virError /*line :4131:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4132:35*/d.ptr; var _cgo1 *_Ctype_longlong = /*line :4132:42*/&secs; var _cgo2 *_Ctype_uint = /*line :4132:49*/&nsecs; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4132:63*/(flags); _cgoBase4 := /*line :4132:72*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4132:77*/_Cfunc_virDomainGetTimeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return 0, 0, makeError(&err)
	}

	return int64(secs), uint(nsecs), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetTime
func (d *Domain) SetTime(secs int64, nsecs uint, flags DomainSetTimeFlags) error {
	var err  /*line :4142:10*/_Ctype_virError /*line :4142:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4143:35*/d.ptr; var _cgo1 _Ctype_longlong = _Ctype_longlong /*line :4143:52*/(secs); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4143:66*/(nsecs); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4143:81*/(flags); _cgoBase4 := /*line :4143:90*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4143:95*/_Cfunc_virDomainSetTimeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetUserPassword
func (d *Domain) SetUserPassword(user string, password string, flags DomainSetUserPasswordFlags) error {
	cuser := ( /*line :4153:11*/_Cfunc_CString /*line :4153:19*/)(user)
	cpassword := ( /*line :4154:15*/_Cfunc_CString /*line :4154:23*/)(password)

	defer func() func() { _cgo0 := /*line :4156:15*/unsafe.Pointer(cuser); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4156:37*/_Cfunc_free(_cgo0); }}()()
	defer func() func() { _cgo0 := /*line :4157:15*/unsafe.Pointer(cpassword); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4157:41*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :4159:10*/_Ctype_virError /*line :4159:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4160:43*/d.ptr; var _cgo1 *_Ctype_char = /*line :4160:50*/cuser; var _cgo2 *_Ctype_char = /*line :4160:57*/cpassword; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4160:74*/(flags); _cgoBase4 := /*line :4160:83*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4160:88*/_Cfunc_virDomainSetUserPasswordWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainManagedSave
func (d *Domain) ManagedSave(flags DomainSaveRestoreFlags) error {
	var err  /*line :4170:10*/_Ctype_virError /*line :4170:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4171:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4171:52*/(flags); _cgoBase2 := /*line :4171:61*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4171:66*/_Cfunc_virDomainManagedSaveWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainHasManagedSaveImage
func (d *Domain) HasManagedSaveImage(flags uint32) (bool, error) {
	var err  /*line :4181:10*/_Ctype_virError /*line :4181:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :4182:50*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4182:63*/(flags); _cgoBase2 := /*line :4182:72*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4182:77*/_Cfunc_virDomainHasManagedSaveImageWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainManagedSaveRemove
func (d *Domain) ManagedSaveRemove(flags uint32) error {
	var err  /*line :4194:10*/_Ctype_virError /*line :4194:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4195:45*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4195:58*/(flags); _cgoBase2 := /*line :4195:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4195:72*/_Cfunc_virDomainManagedSaveRemoveWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainRename
func (d *Domain) Rename(name string, flags uint32) error {
	cname := ( /*line :4205:11*/_Cfunc_CString /*line :4205:19*/)(name)
	defer func() func() { _cgo0 := /*line :4206:15*/unsafe.Pointer(cname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4206:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4207:10*/_Ctype_virError /*line :4207:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4208:34*/d.ptr; var _cgo1 *_Ctype_char = /*line :4208:41*/cname; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4208:54*/(flags); _cgoBase3 := /*line :4208:63*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4208:68*/_Cfunc_virDomainRenameWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainReset
func (d *Domain) Reset(flags uint32) error {
	var err  /*line :4218:10*/_Ctype_virError /*line :4218:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4219:33*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4219:46*/(flags); _cgoBase2 := /*line :4219:55*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4219:60*/_Cfunc_virDomainResetWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSendProcessSignal
func (d *Domain) SendProcessSignal(pid int64, signum DomainProcessSignal, flags uint32) error {
	var err  /*line :4229:10*/_Ctype_virError /*line :4229:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4230:45*/d.ptr; var _cgo1 _Ctype_longlong = _Ctype_longlong /*line :4230:62*/(pid); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4230:75*/(signum); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4230:91*/(flags); _cgoBase4 := /*line :4230:100*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4230:105*/_Cfunc_virDomainSendProcessSignalWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainInjectNMI
func (d *Domain) InjectNMI(flags uint32) error {
	var err  /*line :4240:10*/_Ctype_virError /*line :4240:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4241:37*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4241:50*/(flags); _cgoBase2 := /*line :4241:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4241:64*/_Cfunc_virDomainInjectNMIWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCoreDump
func (d *Domain) CoreDump(to string, flags DomainCoreDumpFlags) error {
	cto := ( /*line :4251:9*/_Cfunc_CString /*line :4251:17*/)(to)
	defer func() func() { _cgo0 := /*line :4252:15*/unsafe.Pointer(cto); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4252:35*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :4254:10*/_Ctype_virError /*line :4254:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4255:36*/d.ptr; var _cgo1 *_Ctype_char = /*line :4255:43*/cto; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4255:54*/(flags); _cgoBase3 := /*line :4255:63*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4255:68*/_Cfunc_virDomainCoreDumpWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCoreDumpWithFormat
func (d *Domain) CoreDumpWithFormat(to string, format DomainCoreDumpFormat, flags DomainCoreDumpFlags) error {
	cto := ( /*line :4265:9*/_Cfunc_CString /*line :4265:17*/)(to)
	defer func() func() { _cgo0 := /*line :4266:15*/unsafe.Pointer(cto); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4266:35*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :4268:10*/_Ctype_virError /*line :4268:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4269:46*/d.ptr; var _cgo1 *_Ctype_char = /*line :4269:53*/cto; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4269:64*/(format); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4269:80*/(flags); _cgoBase4 := /*line :4269:89*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4269:94*/_Cfunc_virDomainCoreDumpWithFormatWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainHasCurrentSnapshot
func (d *Domain) HasCurrentSnapshot(flags uint32) (bool, error) {
	var err  /*line :4279:10*/_Ctype_virError /*line :4279:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :4280:49*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4280:62*/(flags); _cgoBase2 := /*line :4280:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4280:76*/_Cfunc_virDomainHasCurrentSnapshotWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainFSFreeze
func (d *Domain) FSFreeze(mounts []string, flags uint32) error {
	var err  /*line :4292:10*/_Ctype_virError /*line :4292:20*/
	var ret  /*line :4293:10*/_Ctype_int /*line :4293:15*/
	nmounts := len(mounts)
	cmounts := make([](* /*line :4295:22*/_Ctype_char /*line :4295:28*/), nmounts)

	for i := 0; i < nmounts; i++ {
		cmounts[i] = ( /*line :4298:16*/_Cfunc_CString /*line :4298:24*/)(mounts[i])
		defer func() func() { _cgo0 := /*line :4299:16*/unsafe.Pointer(cmounts[i]); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4299:43*/_Cfunc_free(_cgo0); }}()()
	}

	var cmountsPtr ** /*line :4302:19*/_Ctype_char /*line :4302:25*/ = nil
	if nmounts > 0 {
		cmountsPtr = &cmounts[0]
	}

	ret = func() _Ctype_int{ _cgo0 := /*line :4307:35*/d.ptr; _cgo1 := /*line :4307:42*/cmountsPtr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4307:60*/(nmounts); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4307:77*/(flags); _cgoBase4 := /*line :4307:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4307:91*/_Cfunc_virDomainFSFreezeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainFSThaw
func (d *Domain) FSThaw(mounts []string, flags uint32) error {
	var err  /*line :4317:10*/_Ctype_virError /*line :4317:20*/
	var ret  /*line :4318:10*/_Ctype_int /*line :4318:15*/
	nmounts := len(mounts)

	cmounts := make([](* /*line :4321:22*/_Ctype_char /*line :4321:28*/), nmounts)

	for i := 0; i < nmounts; i++ {
		cmounts[i] = ( /*line :4324:16*/_Cfunc_CString /*line :4324:24*/)(mounts[i])
		defer func() func() { _cgo0 := /*line :4325:16*/unsafe.Pointer(cmounts[i]); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4325:43*/_Cfunc_free(_cgo0); }}()()
	}

	var cmountsPtr ** /*line :4328:19*/_Ctype_char /*line :4328:25*/ = nil
	if nmounts > 0 {
		cmountsPtr = &cmounts[0]
	}

	ret = func() _Ctype_int{ _cgo0 := /*line :4333:33*/d.ptr; _cgo1 := /*line :4333:40*/cmountsPtr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4333:58*/(nmounts); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4333:75*/(flags); _cgoBase4 := /*line :4333:84*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4333:89*/_Cfunc_virDomainFSThawWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainFSTrim
func (d *Domain) FSTrim(mount string, minimum uint64, flags uint32) error {
	var cmount * /*line :4343:14*/_Ctype_char /*line :4343:20*/
	if mount != "" {
		cmount = ( /*line :4345:12*/_Cfunc_CString /*line :4345:20*/)(mount)
		defer func() func() { _cgo0 := /*line :4346:16*/unsafe.Pointer(cmount); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4346:39*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :4349:10*/_Ctype_virError /*line :4349:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4350:34*/d.ptr; var _cgo1 *_Ctype_char = /*line :4350:41*/cmount; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :4350:60*/(minimum); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4350:77*/(flags); _cgoBase4 := /*line :4350:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4350:91*/_Cfunc_virDomainFSTrimWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainFSInfo struct {
	MountPoint string
	Name       string
	FSType     string
	DevAlias   []string
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetFSInfo
func (d *Domain) GetFSInfo(flags uint32) ([]DomainFSInfo, error) {
	var cfsinfolist ** /*line :4367:20*/_Ctype_virDomainFSInfo /*line :4367:37*/

	var err  /*line :4369:10*/_Ctype_virError /*line :4369:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4370:37*/d.ptr; _cgoBase1 := /*line :4370:84*/&cfsinfolist; _cgo1 := /*line :4370:44*/(**_Ctype_virDomainFSInfoPtr /*line :4370:67*/)(unsafe.Pointer(_cgoBase1)); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4370:106*/(flags); _cgoBase3 := /*line :4370:115*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4370:120*/_Cfunc_virDomainGetFSInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return []DomainFSInfo{}, makeError(&err)
	}

	fsinfo := make([]DomainFSInfo, int(ret))

	for i := 0; i < int(ret); i++ {
		cfsinfo := (* /*line :4378:16*/_Ctype_virDomainFSInfo /*line :4378:33*/)(*(** /*line :4378:39*/_Ctype_virDomainFSInfo /*line :4378:56*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cfsinfolist)) + (unsafe.Sizeof(*cfsinfolist) * uintptr(i)))))

		aliases := make([]string, int(cfsinfo.ndevAlias))
		for j := 0; j < int(cfsinfo.ndevAlias); j++ {
			calias := (* /*line :4382:16*/_Ctype_char /*line :4382:22*/)(*(** /*line :4382:28*/_Ctype_char /*line :4382:34*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cfsinfo.devAlias)) + (unsafe.Sizeof(*cfsinfo) * uintptr(j)))))
			aliases[j] = ( /*line :4383:17*/_Cfunc_GoString /*line :4383:26*/)(calias)
		}
		fsinfo[i] = DomainFSInfo{
			MountPoint: ( /*line :4386:16*/_Cfunc_GoString /*line :4386:25*/)(cfsinfo.mountpoint),
			Name:       ( /*line :4387:16*/_Cfunc_GoString /*line :4387:25*/)(cfsinfo.name),
			FSType:     ( /*line :4388:16*/_Cfunc_GoString /*line :4388:25*/)(cfsinfo.fstype),
			DevAlias:   aliases,
		}

		func() { _cgo0 := /*line :4392:32*/cfsinfo; _cgoCheckPointer(_cgo0, nil); /*line :4392:40*/_Cfunc_virDomainFSInfoFreeWrapper(_cgo0); }()
	}
	func() { _cgo0 := /*line :4394:9*/unsafe.Pointer(cfsinfolist); _cgoCheckPointer(_cgo0, nil); /*line :4394:37*/_Cfunc_free(_cgo0); }()

	return fsinfo, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPMSuspendForDuration
func (d *Domain) PMSuspendForDuration(target NodeSuspendTarget, duration uint64, flags uint32) error {
	var err  /*line :4401:10*/_Ctype_virError /*line :4401:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4402:48*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4402:61*/(target); var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :4402:82*/(duration); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4402:100*/(flags); _cgoBase4 := /*line :4402:109*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4402:114*/_Cfunc_virDomainPMSuspendForDurationWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPMWakeup
func (d *Domain) PMWakeup(flags uint32) error {
	var err  /*line :4412:10*/_Ctype_virError /*line :4412:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4413:36*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4413:49*/(flags); _cgoBase2 := /*line :4413:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4413:63*/_Cfunc_virDomainPMWakeupWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAddIOThread
func (d *Domain) AddIOThread(id uint, flags DomainModificationImpact) error {
	var err  /*line :4423:10*/_Ctype_virError /*line :4423:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4424:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4424:52*/(id); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4424:64*/(flags); _cgoBase3 := /*line :4424:73*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4424:78*/_Cfunc_virDomainAddIOThreadWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDelIOThread
func (d *Domain) DelIOThread(id uint, flags DomainModificationImpact) error {
	var err  /*line :4434:10*/_Ctype_virError /*line :4434:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4435:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4435:52*/(id); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4435:64*/(flags); _cgoBase3 := /*line :4435:73*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4435:78*/_Cfunc_virDomainDelIOThreadWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetIOThreadParams

type DomainSetIOThreadParams struct {
	PollMaxNsSet     bool
	PollMaxNs        uint64
	PollGrowSet      bool
	PollGrow         uint
	PollShrinkSet    bool
	PollShrink       uint
	ThreadPoolMinSet bool
	ThreadPoolMin    int
	ThreadPoolMaxSet bool
	ThreadPoolMax    int
}

func getSetIOThreadParamsFieldInfo(params *DomainSetIOThreadParams) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :4460:3*/_Csconst_VIR_DOMAIN_IOTHREAD_POLL_MAX_NS /*line :4460:35*/): typedParamsFieldInfo{
			set: &params.PollMaxNsSet,
			ul:  &params.PollMaxNs,
		},
		( /*line :4464:3*/_Csconst_VIR_DOMAIN_IOTHREAD_POLL_GROW /*line :4464:33*/): typedParamsFieldInfo{
			set: &params.PollGrowSet,
			ui:  &params.PollGrow,
		},
		( /*line :4468:3*/_Csconst_VIR_DOMAIN_IOTHREAD_POLL_SHRINK /*line :4468:35*/): typedParamsFieldInfo{
			set: &params.PollShrinkSet,
			ui:  &params.PollShrink,
		},
		( /*line :4472:3*/_Csconst_VIR_DOMAIN_IOTHREAD_THREAD_POOL_MIN /*line :4472:39*/): typedParamsFieldInfo{
			set: &params.ThreadPoolMinSet,
			i:   &params.ThreadPoolMin,
		},
		( /*line :4476:3*/_Csconst_VIR_DOMAIN_IOTHREAD_THREAD_POOL_MAX /*line :4476:39*/): typedParamsFieldInfo{
			set: &params.ThreadPoolMaxSet,
			i:   &params.ThreadPoolMax,
		},
	}
}

func (d *Domain) SetIOThreadParams(iothreadid uint, params *DomainSetIOThreadParams, flags DomainModificationImpact) error {
	info := getSetIOThreadParamsFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :4491:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4491:34*/)(cparams, cnparams)

	var err  /*line :4493:10*/_Ctype_virError /*line :4493:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4494:45*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4494:58*/(iothreadid); var _cgo2 *_Ctype_struct__virTypedParameter = /*line :4494:72*/cparams; var _cgo3 _Ctype_int = /*line :4494:81*/cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :4494:97*/(flags); _cgoBase5 := /*line :4494:106*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :4494:111*/_Cfunc_virDomainSetIOThreadParamsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetEmulatorPinInfo
func (d *Domain) GetEmulatorPinInfo(flags DomainModificationImpact) ([]bool, error) {
	var cnodeinfo  /*line :4504:16*/_Ctype_virNodeInfo /*line :4504:29*/
	var err  /*line :4505:10*/_Ctype_virError /*line :4505:20*/
	ptr := func() _Ctype_virConnectPtr{ _cgo0 := /*line :4506:38*/d.ptr; _cgoBase1 := /*line :4506:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :4506:50*/_Cfunc_virDomainGetConnectWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return []bool{}, makeError(&err)
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :4510:33*/ptr; var _cgo1 *_Ctype_struct__virNodeInfo = /*line :4510:38*/&cnodeinfo; _cgoBase2 := /*line :4510:50*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4510:55*/_Cfunc_virNodeGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return []bool{}, makeError(&err)
	}

	ncpus := cnodeinfo.nodes * cnodeinfo.sockets * cnodeinfo.cores * cnodeinfo.threads
	maplen := int((ncpus + 7) / 8)
	ccpumaps := make([] /*line :4517:21*/_Ctype_uchar /*line :4517:28*/, maplen)
	ret = func() _Ctype_int{ _cgo0 := /*line :4518:45*/d.ptr; var _cgo1 *_Ctype_uchar = /*line :4518:52*/&ccpumaps[0]; var _cgo2 _Ctype_int = _Ctype_int /*line :4518:71*/(maplen); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4518:87*/(flags); _cgoBase4 := /*line :4518:96*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4518:101*/_Cfunc_virDomainGetEmulatorPinInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []bool{}, makeError(&err)
	}

	cpumaps := make([]bool, ncpus)
	for i := 0; i < int(ncpus); i++ {
		byte := i / 8
		bit := i % 8
		cpumaps[i] = (ccpumaps[byte] & (1 << uint(bit))) != 0
	}

	return cpumaps, nil
}

type DomainIOThreadInfo struct {
	IOThreadID uint
	CpuMap     []bool
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetIOThreadInfo
func (d *Domain) GetIOThreadInfo(flags DomainModificationImpact) ([]DomainIOThreadInfo, error) {
	var cinfolist ** /*line :4540:18*/_Ctype_virDomainIOThreadInfo /*line :4540:41*/

	var err  /*line :4542:10*/_Ctype_virError /*line :4542:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4543:43*/d.ptr; _cgoBase1 := /*line :4543:96*/&cinfolist; _cgo1 := /*line :4543:50*/(**_Ctype_virDomainIOThreadInfoPtr /*line :4543:79*/)(unsafe.Pointer(_cgoBase1)); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4543:116*/(flags); _cgoBase3 := /*line :4543:125*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4543:130*/_Cfunc_virDomainGetIOThreadInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return []DomainIOThreadInfo{}, makeError(&err)
	}

	info := make([]DomainIOThreadInfo, int(ret))

	for i := 0; i < int(ret); i++ {
		cinfo := (*(** /*line :4551:17*/_Ctype_virDomainIOThreadInfo /*line :4551:40*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cinfolist)) + (unsafe.Sizeof(*cinfolist) * uintptr(i)))))

		ncpus := int(cinfo.cpumaplen * 8)
		cpumap := make([]bool, ncpus)
		for j := 0; j < ncpus; j++ {
			byte := j / 8
			bit := j % 8

			cpumapbyte := *(* /*line :4559:21*/_Ctype_uchar /*line :4559:28*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cinfo.cpumap)) + (unsafe.Sizeof(*cinfo.cpumap) * uintptr(byte))))
			cpumap[j] = (cpumapbyte & (1 << uint(bit))) != 0
		}

		info[i] = DomainIOThreadInfo{
			IOThreadID: uint(cinfo.iothread_id),
			CpuMap:     cpumap,
		}

		func() { _cgo0 := /*line :4568:38*/cinfo; _cgoCheckPointer(_cgo0, nil); /*line :4568:44*/_Cfunc_virDomainIOThreadInfoFreeWrapper(_cgo0); }()
	}
	func() { _cgo0 := /*line :4570:9*/unsafe.Pointer(cinfolist); _cgoCheckPointer(_cgo0, nil); /*line :4570:35*/_Cfunc_free(_cgo0); }()

	return info, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetVcpuPinInfo
func (d *Domain) GetVcpuPinInfo(flags DomainModificationImpact) ([][]bool, error) {
	var cnodeinfo  /*line :4577:16*/_Ctype_virNodeInfo /*line :4577:29*/
	var err  /*line :4578:10*/_Ctype_virError /*line :4578:20*/
	ptr := func() _Ctype_virConnectPtr{ _cgo0 := /*line :4579:38*/d.ptr; _cgoBase1 := /*line :4579:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :4579:50*/_Cfunc_virDomainGetConnectWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return [][]bool{}, makeError(&err)
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :4583:33*/ptr; var _cgo1 *_Ctype_struct__virNodeInfo = /*line :4583:38*/&cnodeinfo; _cgoBase2 := /*line :4583:50*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4583:55*/_Cfunc_virNodeGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return [][]bool{}, makeError(&err)
	}

	var cdominfo  /*line :4588:15*/_Ctype_virDomainInfo /*line :4588:30*/
	ret = func() _Ctype_int{ _cgo0 := /*line :4589:34*/d.ptr; var _cgo1 *_Ctype_struct__virDomainInfo = /*line :4589:41*/&cdominfo; _cgoBase2 := /*line :4589:52*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4589:57*/_Cfunc_virDomainGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return [][]bool{}, makeError(&err)
	}

	nvcpus := int(cdominfo.nrVirtCpu)
	npcpus := int(cnodeinfo.nodes * cnodeinfo.sockets * cnodeinfo.cores * cnodeinfo.threads)
	maplen := ((npcpus + 7) / 8)
	ccpumaps := make([] /*line :4597:21*/_Ctype_uchar /*line :4597:28*/, maplen*nvcpus)

	ret = func() _Ctype_int{ _cgo0 := /*line :4599:41*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :4599:53*/(nvcpus); var _cgo2 *_Ctype_uchar = /*line :4599:63*/&ccpumaps[0]; var _cgo3 _Ctype_int = _Ctype_int /*line :4599:82*/(maplen); var _cgo4 _Ctype_uint = _Ctype_uint /*line :4599:98*/(flags); _cgoBase5 := /*line :4599:107*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :4599:112*/_Cfunc_virDomainGetVcpuPinInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return [][]bool{}, makeError(&err)
	}

	cpumaps := make([][]bool, nvcpus)
	for i := 0; i < nvcpus; i++ {
		cpumaps[i] = make([]bool, npcpus)
		for j := 0; j < npcpus; j++ {
			byte := (i * maplen) + (j / 8)
			bit := j % 8

			if (ccpumaps[byte] & (1 << uint(bit))) != 0 {
				cpumaps[i][j] = true
			}
		}
	}

	return cpumaps, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPinEmulator
func (d *Domain) PinEmulator(cpumap []bool, flags DomainModificationImpact) error {

	maplen := (len(cpumap) + 7) / 8
	ccpumaps := make([] /*line :4624:21*/_Ctype_uchar /*line :4624:28*/, maplen)
	for i := 0; i < len(cpumap); i++ {
		if cpumap[i] {
			byte := i / 8
			bit := i % 8

			ccpumaps[byte] |= (1 << uint(bit))
		}
	}

	var err  /*line :4634:10*/_Ctype_virError /*line :4634:20*/
	var ccpumapPtr * /*line :4635:18*/_Ctype_uchar /*line :4635:25*/ = nil
	if maplen > 0 {
		ccpumapPtr = &ccpumaps[0]
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :4639:39*/d.ptr; var _cgo1 *_Ctype_uchar = /*line :4639:46*/ccpumapPtr; var _cgo2 _Ctype_int = _Ctype_int /*line :4639:63*/(maplen); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4639:79*/(flags); _cgoBase4 := /*line :4639:88*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4639:93*/_Cfunc_virDomainPinEmulatorWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainPinIOThread
func (d *Domain) PinIOThread(iothreadid uint, cpumap []bool, flags DomainModificationImpact) error {
	maplen := (len(cpumap) + 7) / 8
	ccpumaps := make([] /*line :4650:21*/_Ctype_uchar /*line :4650:28*/, maplen)
	for i := 0; i < len(cpumap); i++ {
		if cpumap[i] {
			byte := i / 8
			bit := i % 8

			ccpumaps[byte] |= (1 << uint(bit))
		}
	}

	var err  /*line :4660:10*/_Ctype_virError /*line :4660:20*/
	var ccpumapPtr * /*line :4661:18*/_Ctype_uchar /*line :4661:25*/ = nil
	if maplen > 0 {
		ccpumapPtr = &ccpumaps[0]
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :4665:39*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4665:52*/(iothreadid); var _cgo2 *_Ctype_uchar = /*line :4665:66*/ccpumapPtr; var _cgo3 _Ctype_int = _Ctype_int /*line :4665:83*/(maplen); var _cgo4 _Ctype_uint = _Ctype_uint /*line :4665:99*/(flags); _cgoBase5 := /*line :4665:108*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :4665:113*/_Cfunc_virDomainPinIOThreadWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainOpenChannel
func (d *Domain) OpenChannel(name string, stream *Stream, flags DomainChannelFlags) error {
	cname := ( /*line :4675:11*/_Cfunc_CString /*line :4675:19*/)(name)
	defer func() func() { _cgo0 := /*line :4676:15*/unsafe.Pointer(cname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4676:37*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :4678:10*/_Ctype_virError /*line :4678:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4679:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :4679:46*/cname; _cgo2 := /*line :4679:53*/stream.ptr; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4679:71*/(flags); _cgoBase4 := /*line :4679:80*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4679:85*/_Cfunc_virDomainOpenChannelWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainOpenConsole
func (d *Domain) OpenConsole(devname string, stream *Stream, flags DomainConsoleFlags) error {
	var cdevname * /*line :4689:16*/_Ctype_char /*line :4689:22*/
	if devname != "" {
		cdevname = ( /*line :4691:14*/_Cfunc_CString /*line :4691:22*/)(devname)
		defer func() func() { _cgo0 := /*line :4692:16*/unsafe.Pointer(cdevname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4692:41*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :4695:10*/_Ctype_virError /*line :4695:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4696:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :4696:46*/cdevname; _cgo2 := /*line :4696:56*/stream.ptr; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4696:74*/(flags); _cgoBase4 := /*line :4696:83*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4696:88*/_Cfunc_virDomainOpenConsoleWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainOpenGraphics
func (d *Domain) OpenGraphics(idx uint, file os.File, flags DomainOpenGraphicsFlags) error {
	var err  /*line :4706:10*/_Ctype_virError /*line :4706:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4707:40*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4707:53*/(idx); var _cgo2 _Ctype_int = _Ctype_int /*line :4707:65*/(file.Fd()); var _cgo3 _Ctype_uint = _Ctype_uint /*line :4707:84*/(flags); _cgoBase4 := /*line :4707:93*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4707:98*/_Cfunc_virDomainOpenGraphicsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainOpenGraphicsFD
func (d *Domain) OpenGraphicsFD(idx uint, flags DomainOpenGraphicsFlags) (*os.File, error) {
	var err  /*line :4717:10*/_Ctype_virError /*line :4717:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4718:42*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :4718:55*/(idx); var _cgo2 _Ctype_uint = _Ctype_uint /*line :4718:68*/(flags); _cgoBase3 := /*line :4718:77*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4718:82*/_Cfunc_virDomainOpenGraphicsFDWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return os.NewFile(uintptr(ret), "graphics"), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotCreateXML
func (d *Domain) CreateSnapshotXML(xml string, flags DomainSnapshotCreateFlags) (*DomainSnapshot, error) {
	cXml := ( /*line :4728:10*/_Cfunc_CString /*line :4728:18*/)(xml)
	defer func() func() { _cgo0 := /*line :4729:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4729:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4730:10*/_Ctype_virError /*line :4730:20*/
	result := func() _Ctype_virDomainSnapshotPtr{ _cgo0 := /*line :4731:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :4731:55*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4731:67*/(flags); _cgoBase3 := /*line :4731:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4731:81*/_Cfunc_virDomainSnapshotCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == nil {
		return nil, makeError(&err)
	}
	return &DomainSnapshot{ptr: result}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-checkpoint.html#virDomainCheckpointCreateXML
func (d *Domain) CreateCheckpointXML(xml string, flags DomainCheckpointCreateFlags) (*DomainCheckpoint, error) {
	cXml := ( /*line :4740:10*/_Cfunc_CString /*line :4740:18*/)(xml)
	defer func() func() { _cgo0 := /*line :4741:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4741:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4742:10*/_Ctype_virError /*line :4742:20*/
	result := func() _Ctype_virDomainCheckpointPtr{ _cgo0 := /*line :4743:50*/d.ptr; var _cgo1 *_Ctype_char = /*line :4743:57*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :4743:69*/(flags); _cgoBase3 := /*line :4743:78*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :4743:83*/_Cfunc_virDomainCheckpointCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == nil {
		return nil, makeError(&err)
	}
	return &DomainCheckpoint{ptr: result}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSave
func (d *Domain) Save(destFile string) error {
	cPath := ( /*line :4752:11*/_Cfunc_CString /*line :4752:19*/)(destFile)
	defer func() func() { _cgo0 := /*line :4753:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4753:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4754:10*/_Ctype_virError /*line :4754:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :4755:35*/d.ptr; var _cgo1 *_Ctype_char = /*line :4755:42*/cPath; _cgoBase2 := /*line :4755:49*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :4755:54*/_Cfunc_virDomainSaveWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSaveFlags
func (d *Domain) SaveFlags(destFile string, destXml string, flags DomainSaveRestoreFlags) error {
	cDestFile := ( /*line :4764:15*/_Cfunc_CString /*line :4764:23*/)(destFile)
	var cDestXml * /*line :4765:16*/_Ctype_char /*line :4765:22*/
	if destXml != "" {
		cDestXml = ( /*line :4767:14*/_Cfunc_CString /*line :4767:22*/)(destXml)
		defer func() func() { _cgo0 := /*line :4768:16*/unsafe.Pointer(cDestXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4768:41*/_Cfunc_free(_cgo0); }}()()
	}
	defer func() func() { _cgo0 := /*line :4770:15*/unsafe.Pointer(cDestFile); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4770:41*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4771:10*/_Ctype_virError /*line :4771:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :4772:40*/d.ptr; var _cgo1 *_Ctype_char = /*line :4772:47*/cDestFile; var _cgo2 *_Ctype_char = /*line :4772:58*/cDestXml; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4772:74*/(flags); _cgoBase4 := /*line :4772:83*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4772:88*/_Cfunc_virDomainSaveFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

type DomainSaveRestoreParams struct {
	FileSet             bool
	File                string
	DXMLSet             bool
	DXML                string
	ImageFormatSet      bool
	ImageFormat         string
	ParallelChannelsSet bool
	ParallelChannels    int
}

func getDomainSaveRestoreParametersFieldInfo(params *DomainSaveRestoreParams) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :4792:3*/_Csconst_VIR_DOMAIN_SAVE_PARAM_FILE /*line :4792:30*/): typedParamsFieldInfo{
			set: &params.FileSet,
			s:   &params.File,
		},
		( /*line :4796:3*/_Csconst_VIR_DOMAIN_SAVE_PARAM_DXML /*line :4796:30*/): typedParamsFieldInfo{
			set: &params.DXMLSet,
			s:   &params.DXML,
		},
		( /*line :4800:3*/_Csconst_VIR_DOMAIN_SAVE_PARAM_IMAGE_FORMAT /*line :4800:38*/): typedParamsFieldInfo{
			set: &params.ImageFormatSet,
			s:   &params.ImageFormat,
		},
		( /*line :4804:3*/_Csconst_VIR_DOMAIN_SAVE_PARAM_PARALLEL_CHANNELS /*line :4804:43*/): typedParamsFieldInfo{
			set: &params.ParallelChannelsSet,
			i:   &params.ParallelChannels,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSaveParams
func (d *Domain) SaveParams(params DomainSaveRestoreParams, flags DomainSaveRestoreFlags) error {
	info := getDomainSaveRestoreParametersFieldInfo(&params)
	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :4819:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4819:34*/)(cparams, cnparams)

	var err  /*line :4821:10*/_Ctype_virError /*line :4821:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :4822:41*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :4822:48*/cparams; var _cgo2 _Ctype_int = /*line :4822:57*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4822:73*/(flags); _cgoBase4 := /*line :4822:82*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4822:87*/_Cfunc_virDomainSaveParamsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

type DomainGuestVcpus struct {
	VcpusSet      bool
	Vcpus         []bool
	OnlineSet     bool
	Online        []bool
	OfflinableSet bool
	Offlinable    []bool
}

func getDomainGuestVcpusParametersFieldInfo(vcpus *DomainGuestVcpus, Vcpus *string, Online *string, Offlinable *string) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		"vcpus": typedParamsFieldInfo{
			set: &vcpus.VcpusSet,
			s:   Vcpus,
		},
		"online": typedParamsFieldInfo{
			set: &vcpus.OnlineSet,
			s:   Online,
		},
		"offlinable": typedParamsFieldInfo{
			set: &vcpus.OfflinableSet,
			s:   Offlinable,
		},
	}
}

func parseCPUString(cpumapstr string) ([]bool, error) {
	pieces := strings.Split(cpumapstr, ",")
	var cpumap []bool
	for _, piece := range pieces {
		if len(piece) < 1 {
			return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
		}
		invert := false
		if piece[0] == '^' {
			invert = true
			piece = piece[1:]
		}
		pair := strings.Split(piece, "-")
		var start, end int
		var err error
		if len(pair) == 1 {
			start, err = strconv.Atoi(pair[0])
			if err != nil {
				return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
			}
			end, err = strconv.Atoi(pair[0])
			if err != nil {
				return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
			}
		} else if len(pair) == 2 {
			start, err = strconv.Atoi(pair[0])
			if err != nil {
				return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
			}
			end, err = strconv.Atoi(pair[1])
			if err != nil {
				return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
			}
		} else {
			return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
		}
		if start > end {
			return []bool{}, fmt.Errorf("Malformed cpu map string %s", cpumapstr)
		}
		if (end + 1) > len(cpumap) {
			newcpumap := make([]bool, end+1)
			copy(newcpumap, cpumap)
			cpumap = newcpumap
		}

		for i := start; i <= end; i++ {
			if invert {
				cpumap[i] = false
			} else {
				cpumap[i] = true
			}
		}
	}

	return cpumap, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetGuestVcpus
func (d *Domain) GetGuestVcpus(flags uint32) (*DomainGuestVcpus, error) {
	vcpus := &DomainGuestVcpus{}
	var VcpusStr, OnlineStr, OfflinableStr string
	info := getDomainGuestVcpusParametersFieldInfo(vcpus, &VcpusStr, &OnlineStr, &OfflinableStr)

	var cparams  /*line :4918:14*/_Ctype_virTypedParameterPtr /*line :4918:36*/
	var cnparams  /*line :4919:15*/_Ctype_uint /*line :4919:21*/
	var err  /*line :4920:10*/_Ctype_virError /*line :4920:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4921:41*/d.ptr; _cgoBase1 := /*line :4921:48*/&cparams; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint = /*line :4921:58*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4921:75*/(flags); _cgoBase4 := /*line :4921:84*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4921:89*/_Cfunc_virDomainGetGuestVcpusWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :4926:8*/_Cfunc_virTypedParamsFreeWrapper /*line :4926:34*/)(cparams,  /*line :4926:45*/_Ctype_int /*line :4926:50*/(cnparams))

	_, gerr := typedParamsUnpack(cparams,  /*line :4928:40*/_Ctype_int /*line :4928:45*/(cnparams), info)
	if gerr != nil {
		return nil, gerr
	}

	if vcpus.VcpusSet {
		mask, gerr := parseCPUString(VcpusStr)
		if gerr != nil {
			return nil, gerr
		}
		vcpus.Vcpus = mask
	}
	if vcpus.OnlineSet {
		mask, gerr := parseCPUString(OnlineStr)
		if gerr != nil {
			return nil, gerr
		}
		vcpus.Online = mask
	}
	if vcpus.OfflinableSet {
		mask, gerr := parseCPUString(OfflinableStr)
		if gerr != nil {
			return nil, gerr
		}
		vcpus.Offlinable = mask
	}

	return vcpus, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetGuestVcpus
func (d *Domain) SetGuestVcpus(cpus []bool, state bool, flags uint32) error {
	cpumap := ""
	for i := 0; i < len(cpus); i++ {
		if cpus[i] {
			if cpumap == "" {
				cpumap = fmt.Sprintf("%d", i)
			} else {
				cpumap += "," + fmt.Sprintf("%d", i)
			}
		}
	}

	var cstate  /*line :4971:13*/_Ctype_int /*line :4971:18*/
	if state {
		cstate = 1
	} else {
		cstate = 0
	}
	ccpumap := ( /*line :4977:13*/_Cfunc_CString /*line :4977:21*/)(cpumap)
	defer func() func() { _cgo0 := /*line :4978:15*/unsafe.Pointer(ccpumap); return func() { _cgoCheckPointer(_cgo0, nil); /*line :4978:39*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :4979:10*/_Ctype_virError /*line :4979:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :4980:41*/d.ptr; var _cgo1 *_Ctype_char = /*line :4980:48*/ccpumap; var _cgo2 _Ctype_int = /*line :4980:57*/cstate; var _cgo3 _Ctype_uint = _Ctype_uint /*line :4980:71*/(flags); _cgoBase4 := /*line :4980:80*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :4980:85*/_Cfunc_virDomainSetGuestVcpusWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetVcpu
func (d *Domain) SetVcpu(cpus []bool, state bool, flags uint32) error {
	cpumap := ""
	for i := 0; i < len(cpus); i++ {
		if cpus[i] {
			if cpumap == "" {
				cpumap = fmt.Sprintf("%d", i)
			} else {
				cpumap += "," + fmt.Sprintf("%d", i)
			}
		}
	}

	var cstate  /*line :5001:13*/_Ctype_int /*line :5001:18*/
	if state {
		cstate = 1
	} else {
		cstate = 0
	}
	ccpumap := ( /*line :5007:13*/_Cfunc_CString /*line :5007:21*/)(cpumap)
	defer func() func() { _cgo0 := /*line :5008:15*/unsafe.Pointer(ccpumap); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5008:39*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :5009:10*/_Ctype_virError /*line :5009:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5010:35*/d.ptr; var _cgo1 *_Ctype_char = /*line :5010:42*/ccpumap; var _cgo2 _Ctype_int = /*line :5010:51*/cstate; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5010:65*/(flags); _cgoBase4 := /*line :5010:74*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5010:79*/_Cfunc_virDomainSetVcpuWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetBlockThreshold
func (d *Domain) SetBlockThreshold(dev string, threshold uint64, flags uint32) error {
	cdev := ( /*line :5020:10*/_Cfunc_CString /*line :5020:18*/)(dev)
	defer func() func() { _cgo0 := /*line :5021:15*/unsafe.Pointer(cdev); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5021:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :5022:10*/_Ctype_virError /*line :5022:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5023:45*/d.ptr; var _cgo1 *_Ctype_char = /*line :5023:52*/cdev; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :5023:69*/(threshold); var _cgo3 _Ctype_uint = _Ctype_uint /*line :5023:88*/(flags); _cgoBase4 := /*line :5023:97*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5023:102*/_Cfunc_virDomainSetBlockThresholdWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainManagedSaveDefineXML
func (d *Domain) ManagedSaveDefineXML(xml string, flags uint32) error {
	cxml := ( /*line :5033:10*/_Cfunc_CString /*line :5033:18*/)(xml)
	defer func() func() { _cgo0 := /*line :5034:15*/unsafe.Pointer(cxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5034:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :5035:10*/_Ctype_virError /*line :5035:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5036:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :5036:55*/cxml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :5036:67*/(flags); _cgoBase3 := /*line :5036:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5036:81*/_Cfunc_virDomainManagedSaveDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainManagedSaveGetXMLDesc
func (d *Domain) ManagedSaveGetXMLDesc(flags DomainSaveImageXMLFlags) (string, error) {
	var err  /*line :5046:10*/_Ctype_virError /*line :5046:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :5047:49*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :5047:62*/(flags); _cgoBase2 := /*line :5047:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :5047:76*/_Cfunc_virDomainManagedSaveGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == nil {
		return "", makeError(&err)
	}

	xml := ( /*line :5052:9*/_Cfunc_GoString /*line :5052:18*/)(ret)
	func() { _cgo0 := /*line :5053:9*/unsafe.Pointer(ret); _cgoCheckPointer(_cgo0, nil); /*line :5053:29*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

type DomainLifecycle int

const (
	DOMAIN_LIFECYCLE_POWEROFF = DomainLifecycle(( /*line :5060:46*/_Ciconst_VIR_DOMAIN_LIFECYCLE_POWEROFF /*line :5060:76*/))
	DOMAIN_LIFECYCLE_REBOOT   = DomainLifecycle(( /*line :5061:46*/_Ciconst_VIR_DOMAIN_LIFECYCLE_REBOOT /*line :5061:74*/))
	DOMAIN_LIFECYCLE_CRASH    = DomainLifecycle(( /*line :5062:46*/_Ciconst_VIR_DOMAIN_LIFECYCLE_CRASH /*line :5062:73*/))
)

type DomainLifecycleAction int

const (
	DOMAIN_LIFECYCLE_ACTION_DESTROY          = DomainLifecycleAction(( /*line :5068:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY /*line :5068:103*/))
	DOMAIN_LIFECYCLE_ACTION_RESTART          = DomainLifecycleAction(( /*line :5069:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_RESTART /*line :5069:103*/))
	DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME   = DomainLifecycleAction(( /*line :5070:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME /*line :5070:110*/))
	DOMAIN_LIFECYCLE_ACTION_PRESERVE         = DomainLifecycleAction(( /*line :5071:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE /*line :5071:104*/))
	DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY = DomainLifecycleAction(( /*line :5072:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY /*line :5072:112*/))
	DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART = DomainLifecycleAction(( /*line :5073:67*/_Ciconst_VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART /*line :5073:112*/))
)

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetLifecycleAction
func (d *Domain) SetLifecycleAction(lifecycleType DomainLifecycle, action DomainLifecycleAction, flags uint32) error {
	var err  /*line :5078:10*/_Ctype_virError /*line :5078:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5079:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :5079:59*/(lifecycleType); var _cgo2 _Ctype_uint = _Ctype_uint /*line :5079:82*/(action); var _cgo3 _Ctype_uint = _Ctype_uint /*line :5079:98*/(flags); _cgoBase4 := /*line :5079:107*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5079:112*/_Cfunc_virDomainSetLifecycleActionWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainLaunchSecurityParameters struct {
	SEVMeasurementSet bool
	SEVMeasurement    string
	SEVAPIMajorSet    bool
	SEVAPIMajor       uint
	SEVAPIMinorSet    bool
	SEVAPIMinor       uint
	SEVBuildIDSet     bool
	SEVBuildID        uint
	SEVPolicySet      bool
	SEVPolicy         uint
	SEVSNPPolicySet   bool
	SEVSNPPolicy      uint64
}

func getDomainLaunchSecurityFieldInfo(params *DomainLaunchSecurityParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5104:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT /*line :5104:46*/): typedParamsFieldInfo{
			set: &params.SEVMeasurementSet,
			s:   &params.SEVMeasurement,
		},
		( /*line :5108:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR /*line :5108:44*/): typedParamsFieldInfo{
			set: &params.SEVAPIMajorSet,
			ui:  &params.SEVAPIMajor,
		},
		( /*line :5112:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR /*line :5112:44*/): typedParamsFieldInfo{
			set: &params.SEVAPIMinorSet,
			ui:  &params.SEVAPIMinor,
		},
		( /*line :5116:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID /*line :5116:43*/): typedParamsFieldInfo{
			set: &params.SEVBuildIDSet,
			ui:  &params.SEVBuildID,
		},
		( /*line :5120:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY /*line :5120:41*/): typedParamsFieldInfo{
			set: &params.SEVPolicySet,
			ui:  &params.SEVPolicy,
		},
		( /*line :5124:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_SNP_POLICY /*line :5124:45*/): typedParamsFieldInfo{
			set: &params.SEVSNPPolicySet,
			ul:  &params.SEVSNPPolicy,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetLaunchSecurityInfo
func (d *Domain) GetLaunchSecurityInfo(flags uint32) (*DomainLaunchSecurityParameters, error) {
	params := &DomainLaunchSecurityParameters{}
	info := getDomainLaunchSecurityFieldInfo(params)

	var cparams * /*line :5136:15*/_Ctype_virTypedParameter /*line :5136:34*/
	var cnparams  /*line :5137:15*/_Ctype_int /*line :5137:20*/

	var err  /*line :5139:10*/_Ctype_virError /*line :5139:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5140:49*/d.ptr; _cgoBase1 := /*line :5140:97*/&cparams; _cgo1 := /*line :5140:56*/(*_Ctype_virTypedParameterPtr /*line :5140:80*/)(unsafe.Pointer(_cgoBase1)); var _cgo2 *_Ctype_int = /*line :5140:109*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5140:126*/(flags); _cgoBase4 := /*line :5140:135*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5140:140*/_Cfunc_virDomainGetLaunchSecurityInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :5145:8*/_Cfunc_virTypedParamsFreeWrapper /*line :5145:34*/)(cparams, cnparams)

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

type DomainLaunchSecurityStateParameters struct {
	SEVSecretSet           bool
	SEVSecret              string
	SEVSecretHeaderSet     bool
	SEVSecretHeader        string
	SEVSecretSetAddressSet bool
	SEVSecretSetAddress    uint64
}

func getDomainLaunchSecurityStateFieldInfo(params *DomainLaunchSecurityStateParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5166:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET /*line :5166:41*/): typedParamsFieldInfo{
			set: &params.SEVSecretSet,
			s:   &params.SEVSecret,
		},
		( /*line :5170:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER /*line :5170:48*/): typedParamsFieldInfo{
			set: &params.SEVSecretHeaderSet,
			s:   &params.SEVSecretHeader,
		},
		( /*line :5174:3*/_Csconst_VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS /*line :5174:53*/): typedParamsFieldInfo{
			set: &params.SEVSecretSetAddressSet,
			ul:  &params.SEVSecretSetAddress,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSetLaunchSecurityState
func (d *Domain) SetLaunchSecurityState(params *DomainLaunchSecurityStateParameters, flags uint32) error {
	info := getDomainLaunchSecurityStateFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :5190:8*/_Cfunc_virTypedParamsFreeWrapper /*line :5190:34*/)(cparams, cnparams)

	var err  /*line :5192:10*/_Ctype_virError /*line :5192:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5193:50*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :5193:57*/cparams; var _cgo2 _Ctype_int = /*line :5193:66*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5193:82*/(flags); _cgoBase4 := /*line :5193:91*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5193:96*/_Cfunc_virDomainSetLaunchSecurityStateWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

type DomainGuestInfoUser struct {
	NameSet      bool
	Name         string
	DomainSet    bool
	Domain       string
	LoginTimeSet bool
	LoginTime    uint64
}

func getDomainGuestInfoUserFieldInfo(idx int, params *DomainGuestInfoUser) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5212:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_PREFIX /*line :5212:49*/)+"%d"+
			( /*line :5213:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_SUFFIX_NAME /*line :5213:43*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :5217:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_PREFIX /*line :5217:49*/)+"%d"+
			( /*line :5218:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_SUFFIX_DOMAIN /*line :5218:45*/), idx): typedParamsFieldInfo{
			set: &params.DomainSet,
			s:   &params.Domain,
		},
		fmt.Sprintf(( /*line :5222:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_PREFIX /*line :5222:49*/)+"%d"+
			( /*line :5223:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_SUFFIX_LOGIN_TIME /*line :5223:49*/), idx): typedParamsFieldInfo{
			set: &params.LoginTimeSet,
			ul:  &params.LoginTime,
		},
	}
}

type DomainGuestInfoOS struct {
	IDSet            bool
	ID               string
	NameSet          bool
	Name             string
	PrettyNameSet    bool
	PrettyName       string
	VersionSet       bool
	Version          string
	VersionIDSet     bool
	VersionID        string
	KernelReleaseSet bool
	KernelRelease    string
	KernelVersionSet bool
	KernelVersion    string
	MachineSet       bool
	Machine          string
	VariantSet       bool
	Variant          string
	VariantIDSet     bool
	VariantID        string
}

func getDomainGuestInfoOSFieldInfo(params *DomainGuestInfoOS) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5255:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_ID /*line :5255:31*/): typedParamsFieldInfo{
			set: &params.IDSet,
			s:   &params.ID,
		},
		( /*line :5259:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_NAME /*line :5259:33*/): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		( /*line :5263:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_PRETTY_NAME /*line :5263:40*/): typedParamsFieldInfo{
			set: &params.PrettyNameSet,
			s:   &params.PrettyName,
		},
		( /*line :5267:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_VERSION /*line :5267:36*/): typedParamsFieldInfo{
			set: &params.VersionSet,
			s:   &params.Version,
		},
		( /*line :5271:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_VERSION_ID /*line :5271:39*/): typedParamsFieldInfo{
			set: &params.VersionIDSet,
			s:   &params.VersionID,
		},
		( /*line :5275:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_KERNEL_RELEASE /*line :5275:43*/): typedParamsFieldInfo{
			set: &params.KernelReleaseSet,
			s:   &params.KernelRelease,
		},
		( /*line :5279:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_KERNEL_VERSION /*line :5279:43*/): typedParamsFieldInfo{
			set: &params.KernelVersionSet,
			s:   &params.KernelVersion,
		},
		( /*line :5283:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_MACHINE /*line :5283:36*/): typedParamsFieldInfo{
			set: &params.MachineSet,
			s:   &params.Machine,
		},
		( /*line :5287:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_VARIANT /*line :5287:36*/): typedParamsFieldInfo{
			set: &params.VariantSet,
			s:   &params.Variant,
		},
		( /*line :5291:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_OS_VARIANT_ID /*line :5291:39*/): typedParamsFieldInfo{
			set: &params.VariantIDSet,
			s:   &params.VariantID,
		},
	}
}

type DomainGuestInfoTimeZone struct {
	NameSet   bool
	Name      string
	OffsetSet bool
	Offset    int
}

func getDomainGuestInfoTimeZoneFieldInfo(params *DomainGuestInfoTimeZone) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5307:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_TIMEZONE_NAME /*line :5307:39*/): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		( /*line :5311:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_TIMEZONE_OFFSET /*line :5311:41*/): typedParamsFieldInfo{
			set: &params.OffsetSet,
			i:   &params.Offset,
		},
	}
}

type DomainGuestInfoFileSystemDisk struct {
	AliasSet  bool
	Alias     string
	SerialSet bool
	Serial    string
	DeviceSet bool
	Device    string
}

func getDomainGuestInfoFileSystemDiskFieldInfo(idx1, idx2 int, params *DomainGuestInfoFileSystemDisk) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5329:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5329:47*/)+"%d"+
			( /*line :5330:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_PREFIX /*line :5330:48*/)+"%d"+
			( /*line :5331:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_SUFFIX_ALIAS /*line :5331:54*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.AliasSet,
			s:   &params.Alias,
		},
		fmt.Sprintf(( /*line :5335:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5335:47*/)+"%d"+
			( /*line :5336:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_PREFIX /*line :5336:48*/)+"%d"+
			( /*line :5337:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_SUFFIX_SERIAL /*line :5337:55*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.SerialSet,
			s:   &params.Serial,
		},
		fmt.Sprintf(( /*line :5341:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5341:47*/)+"%d"+
			( /*line :5342:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_PREFIX /*line :5342:48*/)+"%d"+
			( /*line :5343:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_SUFFIX_DEVICE /*line :5343:55*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.DeviceSet,
			s:   &params.Device,
		},
	}
}

type DomainGuestInfoFileSystem struct {
	MountPointSet bool
	MountPoint    string
	NameSet       bool
	Name          string
	FSTypeSet     bool
	FSType        string
	TotalBytesSet bool
	TotalBytes    uint64
	UsedBytesSet  bool
	UsedBytes     uint64
	Disks         []DomainGuestInfoFileSystemDisk
}

func getDomainGuestInfoFileSystemFieldInfo(idx int, params *DomainGuestInfoFileSystem) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5366:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5366:47*/)+"%d"+
			( /*line :5367:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_MOUNTPOINT /*line :5367:47*/), idx): typedParamsFieldInfo{
			set: &params.MountPointSet,
			s:   &params.MountPoint,
		},
		fmt.Sprintf(( /*line :5371:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5371:47*/)+"%d"+
			( /*line :5372:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_NAME /*line :5372:41*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :5376:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5376:47*/)+"%d"+
			( /*line :5377:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_FSTYPE /*line :5377:43*/), idx): typedParamsFieldInfo{
			set: &params.FSTypeSet,
			s:   &params.FSType,
		},
		fmt.Sprintf(( /*line :5381:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5381:47*/)+"%d"+
			( /*line :5382:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_TOTAL_BYTES /*line :5382:48*/), idx): typedParamsFieldInfo{
			set: &params.TotalBytesSet,
			ul:  &params.TotalBytes,
		},
		fmt.Sprintf(( /*line :5386:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5386:47*/)+"%d"+
			( /*line :5387:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_USED_BYTES /*line :5387:47*/), idx): typedParamsFieldInfo{
			set: &params.UsedBytesSet,
			ul:  &params.UsedBytes,
		},
	}
}

type domainGuestInfoFileSystemLengths struct {
	DiskCountSet bool
	DiskCount    uint
}

func getDomainGuestInfoFileSystemLengthsFieldInfo(idx int, params *domainGuestInfoFileSystemLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5401:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_PREFIX /*line :5401:47*/)+"%d"+
			( /*line :5402:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_SUFFIX_DISK_COUNT /*line :5402:47*/), idx): typedParamsFieldInfo{
			set: &params.DiskCountSet,
			ui:  &params.DiskCount,
		},
	}
}

type DomainGuestInfoDiskDependency struct {
	NameSet bool
	Name    string
}

func getDomainGuestInfoDiskDependencyFieldInfo(idx1, idx2 int, params *DomainGuestInfoDiskDependency) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5416:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5416:49*/)+"%d"+
			( /*line :5417:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_DEPENDENCY_PREFIX /*line :5417:56*/)+"%d"+
			( /*line :5418:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_DEPENDENCY_SUFFIX_NAME /*line :5418:61*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
	}
}

type DomainGuestInfoDisk struct {
	NameSet       bool
	Name          string
	PartitionSet  bool
	Partition     bool
	AliasSet      bool
	Alias         string
	GuestAliasSet bool
	GuestAlias    string
	Dependencies  []DomainGuestInfoDiskDependency
	SerialSet     bool
	Serial        string
	GuestBusSet   bool
	GuestBus      string
}

func getDomainGuestInfoDiskFieldInfo(idx int, params *DomainGuestInfoDisk) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5443:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5443:49*/)+"%d"+
			( /*line :5444:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_NAME /*line :5444:43*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :5448:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5448:49*/)+"%d"+
			( /*line :5449:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_PARTITION /*line :5449:48*/), idx): typedParamsFieldInfo{
			set: &params.PartitionSet,
			b:   &params.Partition,
		},
		fmt.Sprintf(( /*line :5453:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5453:49*/)+"%d"+
			( /*line :5454:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_ALIAS /*line :5454:44*/), idx): typedParamsFieldInfo{
			set: &params.AliasSet,
			s:   &params.Alias,
		},
		fmt.Sprintf(( /*line :5458:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5458:49*/)+"%d"+
			( /*line :5459:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_GUEST_ALIAS /*line :5459:50*/), idx): typedParamsFieldInfo{
			set: &params.GuestAliasSet,
			s:   &params.GuestAlias,
		},
		fmt.Sprintf(( /*line :5463:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5463:49*/)+"%d"+
			( /*line :5464:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_SERIAL /*line :5464:45*/), idx): typedParamsFieldInfo{
			set: &params.SerialSet,
			s:   &params.Serial,
		},
		fmt.Sprintf(( /*line :5468:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5468:49*/)+"%d"+
			( /*line :5469:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_GUEST_BUS /*line :5469:48*/), idx): typedParamsFieldInfo{
			set: &params.GuestBusSet,
			s:   &params.GuestBus,
		},
	}
}

type domainGuestInfoDiskLengths struct {
	DependencyCountSet bool
	DependencyCount    uint
}

func getDomainGuestInfoDiskLengthsFieldInfo(idx int, params *domainGuestInfoDiskLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5483:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_PREFIX /*line :5483:49*/)+"%d"+
			( /*line :5484:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_SUFFIX_DEPENDENCY_COUNT /*line :5484:55*/), idx): typedParamsFieldInfo{
			set: &params.DependencyCountSet,
			ui:  &params.DependencyCount,
		},
	}
}

type DomainGuestInfoIPAddress struct {
	TypeSet   bool
	Type      string
	AddrSet   bool
	Addr      string
	PrefixSet bool
	Prefix    uint
}

func getDomainGuestInfoIPAddressFieldInfo(idx1, idx2 int, params *DomainGuestInfoIPAddress) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5502:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5502:47*/)+"%d"+
			( /*line :5503:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_PREFIX /*line :5503:48*/)+"%d"+
			( /*line :5504:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_SUFFIX_TYPE /*line :5504:53*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.TypeSet,
			s:   &params.Type,
		},
		fmt.Sprintf(( /*line :5508:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5508:47*/)+"%d"+
			( /*line :5509:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_PREFIX /*line :5509:48*/)+"%d"+
			( /*line :5510:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_SUFFIX_ADDR /*line :5510:53*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.AddrSet,
			s:   &params.Addr,
		},
		fmt.Sprintf(( /*line :5514:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5514:47*/)+"%d"+
			( /*line :5515:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_PREFIX /*line :5515:48*/)+"%d"+
			( /*line :5516:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_SUFFIX_PREFIX /*line :5516:55*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.PrefixSet,
			ui:  &params.Prefix,
		},
	}
}

type DomainGuestInfoInterface struct {
	NameSet   bool
	Name      string
	HwaddrSet bool
	Hwaddr    string
	Addrs     []DomainGuestInfoIPAddress
}

func getDomainGuestInfoInterfaceFieldInfo(idx int, params *DomainGuestInfoInterface) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5533:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5533:47*/)+"%d"+
			( /*line :5534:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_NAME /*line :5534:41*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :5538:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5538:47*/)+"%d"+
			( /*line :5539:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_HWADDR /*line :5539:43*/), idx): typedParamsFieldInfo{
			set: &params.HwaddrSet,
			s:   &params.Hwaddr,
		},
	}
}

type domainGuestInfoInterfaceLengths struct {
	AddrCountSet bool
	AddrCount    uint
}

func getDomainGuestInfoInterfaceLengthsFieldInfo(idx int, params *domainGuestInfoInterfaceLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :5553:15*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_PREFIX /*line :5553:47*/)+"%d"+
			( /*line :5554:4*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_SUFFIX_ADDR_COUNT /*line :5554:47*/), idx): typedParamsFieldInfo{
			set: &params.AddrCountSet,
			ui:  &params.AddrCount,
		},
	}
}

type DomainGuestInfoLoad struct {
	Load1MSet  bool
	Load1M     float64
	Load5MSet  bool
	Load5M     float64
	Load15MSet bool
	Load15M    float64
}

func getDomainGuestInfoLoadFieldInfo(params *DomainGuestInfoLoad) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5572:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_LOAD_1M /*line :5572:33*/): typedParamsFieldInfo{
			set: &params.Load1MSet,
			d:   &params.Load1M,
		},
		( /*line :5576:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_LOAD_5M /*line :5576:33*/): typedParamsFieldInfo{
			set: &params.Load5MSet,
			d:   &params.Load5M,
		},
		( /*line :5580:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_LOAD_15M /*line :5580:34*/): typedParamsFieldInfo{
			set: &params.Load15MSet,
			d:   &params.Load15M,
		},
	}
}

type DomainGuestInfo struct {
	Users       []DomainGuestInfoUser
	OS          *DomainGuestInfoOS
	TimeZone    *DomainGuestInfoTimeZone
	HostnameSet bool
	Hostname    string
	FileSystems []DomainGuestInfoFileSystem
	Disks       []DomainGuestInfoDisk
	Interfaces  []DomainGuestInfoInterface
	Load        *DomainGuestInfoLoad
}

func getDomainGuestInfoFieldInfo(params *DomainGuestInfo) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5601:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_HOSTNAME_HOSTNAME /*line :5601:43*/): typedParamsFieldInfo{
			set: &params.HostnameSet,
			s:   &params.Hostname,
		},
	}
}

type domainGuestInfoLengths struct {
	UserCountSet       bool
	UserCount          uint
	FileSystemCountSet bool
	FileSystemCount    uint
	DiskCountSet       bool
	DiskCount          uint
	InterfaceCountSet  bool
	InterfaceCount     uint
}

func getDomainGuestInfoLengthsFieldInfo(params *domainGuestInfoLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :5621:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_USER_COUNT /*line :5621:36*/): typedParamsFieldInfo{
			set: &params.UserCountSet,
			ui:  &params.UserCount,
		},
		( /*line :5625:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_FS_COUNT /*line :5625:34*/): typedParamsFieldInfo{
			set: &params.FileSystemCountSet,
			ui:  &params.FileSystemCount,
		},
		( /*line :5629:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_DISK_COUNT /*line :5629:36*/): typedParamsFieldInfo{
			set: &params.DiskCountSet,
			ui:  &params.DiskCount,
		},
		( /*line :5633:3*/_Csconst_VIR_DOMAIN_GUEST_INFO_IF_COUNT /*line :5633:34*/): typedParamsFieldInfo{
			set: &params.InterfaceCountSet,
			ui:  &params.InterfaceCount,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainGetGuestInfo
func (d *Domain) GetGuestInfo(types DomainGuestInfoTypes, flags uint32) (*DomainGuestInfo, error) {
	var cparams * /*line :5642:15*/_Ctype_virTypedParameter /*line :5642:34*/
	var cnparams  /*line :5643:15*/_Ctype_int /*line :5643:20*/

	var err  /*line :5645:10*/_Ctype_virError /*line :5645:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5646:40*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :5646:53*/(types); _cgoBase2 := /*line :5646:103*/&cparams; _cgo2 := /*line :5646:62*/(*_Ctype_virTypedParameterPtr /*line :5646:86*/)(unsafe.Pointer(_cgoBase2)); var _cgo3 *_Ctype_int = /*line :5646:115*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :5646:132*/(flags); _cgoBase5 := /*line :5646:141*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :5646:146*/_Cfunc_virDomainGetGuestInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :5651:8*/_Cfunc_virTypedParamsFreeWrapper /*line :5651:34*/)(cparams, cnparams)

	info := DomainGuestInfo{}
	infoInfo := getDomainGuestInfoFieldInfo(&info)

	_, gerr := typedParamsUnpack(cparams, cnparams, infoInfo)
	if gerr != nil {
		return nil, gerr
	}

	lengths := domainGuestInfoLengths{}
	lengthsInfo := getDomainGuestInfoLengthsFieldInfo(&lengths)

	_, gerr = typedParamsUnpack(cparams, cnparams, lengthsInfo)
	if gerr != nil {
		return nil, gerr
	}

	if lengths.UserCountSet && lengths.UserCount > 0 {
		info.Users = make([]DomainGuestInfoUser, lengths.UserCount)
		for i := 0; i < int(lengths.UserCount); i++ {
			usersInfo := getDomainGuestInfoUserFieldInfo(i, &info.Users[i])

			_, gerr = typedParamsUnpack(cparams, cnparams, usersInfo)
			if gerr != nil {
				return nil, gerr
			}
		}
	}

	info.OS = &DomainGuestInfoOS{}
	osInfo := getDomainGuestInfoOSFieldInfo(info.OS)

	_, gerr = typedParamsUnpack(cparams, cnparams, osInfo)
	if gerr != nil {
		return nil, gerr
	}

	info.TimeZone = &DomainGuestInfoTimeZone{}
	timezoneInfo := getDomainGuestInfoTimeZoneFieldInfo(info.TimeZone)

	_, gerr = typedParamsUnpack(cparams, cnparams, timezoneInfo)
	if gerr != nil {
		return nil, gerr
	}

	if lengths.FileSystemCountSet && lengths.FileSystemCount > 0 {
		info.FileSystems = make([]DomainGuestInfoFileSystem, lengths.FileSystemCount)
		for i := 0; i < int(lengths.FileSystemCount); i++ {
			fsInfo := getDomainGuestInfoFileSystemFieldInfo(i, &info.FileSystems[i])

			_, gerr = typedParamsUnpack(cparams, cnparams, fsInfo)
			if gerr != nil {
				return nil, gerr
			}

			fsLengths := domainGuestInfoFileSystemLengths{}
			fsLengthsInfo := getDomainGuestInfoFileSystemLengthsFieldInfo(i, &fsLengths)

			_, gerr = typedParamsUnpack(cparams, cnparams, fsLengthsInfo)
			if gerr != nil {
				return nil, gerr
			}

			if fsLengths.DiskCountSet && fsLengths.DiskCount > 0 {
				info.FileSystems[i].Disks = make([]DomainGuestInfoFileSystemDisk, fsLengths.DiskCount)
				for j := 0; j < int(fsLengths.DiskCount); j++ {
					diskInfo := getDomainGuestInfoFileSystemDiskFieldInfo(i, j, &info.FileSystems[i].Disks[j])

					_, gerr = typedParamsUnpack(cparams, cnparams, diskInfo)
					if gerr != nil {
						return nil, gerr
					}
				}
			}
		}
	}

	if lengths.DiskCountSet && lengths.DiskCount > 0 {
		info.Disks = make([]DomainGuestInfoDisk, lengths.DiskCount)
		for i := 0; i < int(lengths.DiskCount); i++ {
			diskInfo := getDomainGuestInfoDiskFieldInfo(i, &info.Disks[i])

			_, gerr = typedParamsUnpack(cparams, cnparams, diskInfo)
			if gerr != nil {
				return nil, gerr
			}

			diskLengths := domainGuestInfoDiskLengths{}
			diskLengthsInfo := getDomainGuestInfoDiskLengthsFieldInfo(i, &diskLengths)

			_, gerr = typedParamsUnpack(cparams, cnparams, diskLengthsInfo)
			if gerr != nil {
				return nil, gerr
			}

			if diskLengths.DependencyCountSet && diskLengths.DependencyCount > 0 {
				info.Disks[i].Dependencies = make([]DomainGuestInfoDiskDependency, diskLengths.DependencyCount)
				for j := 0; j < int(diskLengths.DependencyCount); j++ {
					diskInfoDep := getDomainGuestInfoDiskDependencyFieldInfo(i, j, &info.Disks[i].Dependencies[j])

					_, gerr = typedParamsUnpack(cparams, cnparams, diskInfoDep)
					if gerr != nil {
						return nil, gerr
					}
				}
			}
		}
	}

	if lengths.InterfaceCountSet && lengths.InterfaceCount > 0 {
		info.Interfaces = make([]DomainGuestInfoInterface, lengths.InterfaceCount)
		for i := 0; i < int(lengths.InterfaceCount); i++ {
			interfaceInfo := getDomainGuestInfoInterfaceFieldInfo(i, &info.Interfaces[i])

			_, gerr = typedParamsUnpack(cparams, cnparams, interfaceInfo)
			if gerr != nil {
				return nil, gerr
			}

			interfaceLengths := domainGuestInfoInterfaceLengths{}
			interfaceLengthsInfo := getDomainGuestInfoInterfaceLengthsFieldInfo(i, &interfaceLengths)

			_, gerr = typedParamsUnpack(cparams, cnparams, interfaceLengthsInfo)
			if gerr != nil {
				return nil, gerr
			}

			if interfaceLengths.AddrCountSet && interfaceLengths.AddrCount > 0 {
				info.Interfaces[i].Addrs = make([]DomainGuestInfoIPAddress, interfaceLengths.AddrCount)
				for j := 0; j < int(interfaceLengths.AddrCount); j++ {
					addrInfo := getDomainGuestInfoIPAddressFieldInfo(i, j, &info.Interfaces[i].Addrs[j])

					_, gerr = typedParamsUnpack(cparams, cnparams, addrInfo)
					if gerr != nil {
						return nil, gerr
					}
				}
			}
		}
	}

	info.Load = &DomainGuestInfoLoad{}
	loadInfo := getDomainGuestInfoLoadFieldInfo(info.Load)

	_, gerr = typedParamsUnpack(cparams, cnparams, loadInfo)
	if gerr != nil {
		return nil, gerr
	}

	return &info, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainAgentSetResponseTimeout
func (d *Domain) AgentSetResponseTimeout(timeout int, flags uint32) error {
	var err  /*line :5806:10*/_Ctype_virError /*line :5806:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5807:51*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :5807:63*/(timeout); var _cgo2 _Ctype_uint = _Ctype_uint /*line :5807:80*/(flags); _cgoBase3 := /*line :5807:89*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5807:94*/_Cfunc_virDomainAgentSetResponseTimeoutWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBackupBegin
func (d *Domain) BackupBegin(backupXML string, checkpointXML string, flags DomainBackupBeginFlags) error {
	cbackupXML := ( /*line :5817:16*/_Cfunc_CString /*line :5817:24*/)(backupXML)
	defer func() func() { _cgo0 := /*line :5818:15*/unsafe.Pointer(cbackupXML); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5818:42*/_Cfunc_free(_cgo0); }}()()
	var ccheckpointXML * /*line :5819:22*/_Ctype_char /*line :5819:28*/
	if checkpointXML != "" {
		ccheckpointXML = ( /*line :5821:20*/_Cfunc_CString /*line :5821:28*/)(checkpointXML)
		defer func() func() { _cgo0 := /*line :5822:16*/unsafe.Pointer(ccheckpointXML); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5822:47*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :5824:10*/_Ctype_virError /*line :5824:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5825:39*/d.ptr; var _cgo1 *_Ctype_char = /*line :5825:46*/cbackupXML; var _cgo2 *_Ctype_char = /*line :5825:58*/ccheckpointXML; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5825:80*/(flags); _cgoBase4 := /*line :5825:89*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5825:94*/_Cfunc_virDomainBackupBeginWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainBackupGetXMLDesc
func (d *Domain) BackupGetXMLDesc(flags uint32) (string, error) {
	var err  /*line :5835:10*/_Ctype_virError /*line :5835:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :5836:44*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :5836:57*/(flags); _cgoBase2 := /*line :5836:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :5836:71*/_Cfunc_virDomainBackupGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == nil {
		return "", makeError(&err)
	}

	xml := ( /*line :5841:9*/_Cfunc_GoString /*line :5841:18*/)(ret)
	defer func() func() { _cgo0 := /*line :5842:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5842:35*/_Cfunc_free(_cgo0); }}()()

	return xml, nil
}

func (d *Domain) AuthorizedSSHKeysGet(user string, flags DomainAuthorizedSSHKeysFlags) ([]string, error) {
	cuser := ( /*line :5848:11*/_Cfunc_CString /*line :5848:19*/)(user)
	defer func() func() { _cgo0 := /*line :5849:15*/unsafe.Pointer(cuser); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5849:37*/_Cfunc_free(_cgo0); }}()()

	var ckeys ** /*line :5851:14*/_Ctype_char /*line :5851:20*/
	var err  /*line :5852:10*/_Ctype_virError /*line :5852:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5853:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :5853:55*/cuser; _cgoBase2 := /*line :5853:62*/&ckeys; _cgo2 := _cgoBase2; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5853:76*/(flags); _cgoBase4 := /*line :5853:85*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :5853:90*/_Cfunc_virDomainAuthorizedSSHKeysGetWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []string{}, makeError(&err)
	}

	keys := make([]string, int(ret))
	for i := 0; i < int(ret); i++ {
		cmodel := *(** /*line :5860:17*/_Ctype_char /*line :5860:23*/)(unsafe.Pointer(uintptr(unsafe.Pointer(ckeys)) + (unsafe.Sizeof(*ckeys) * uintptr(i))))

		defer func() func() { _cgo0 := /*line :5862:16*/unsafe.Pointer(cmodel); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5862:39*/_Cfunc_free(_cgo0); }}()()
		keys[i] = ( /*line :5863:13*/_Cfunc_GoString /*line :5863:22*/)(cmodel)
	}
	defer func() func() { _cgo0 := /*line :5865:15*/unsafe.Pointer(ckeys); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5865:37*/_Cfunc_free(_cgo0); }}()()

	return keys, nil
}

func (d *Domain) AuthorizedSSHKeysSet(user string, keys []string, flags DomainAuthorizedSSHKeysFlags) error {
	cuser := ( /*line :5871:11*/_Cfunc_CString /*line :5871:19*/)(user)
	defer func() func() { _cgo0 := /*line :5872:15*/unsafe.Pointer(cuser); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5872:37*/_Cfunc_free(_cgo0); }}()()

	ckeys := make([](* /*line :5874:20*/_Ctype_char /*line :5874:26*/), len(keys))

	for i := 0; i < len(keys); i++ {
		ckeys[i] = ( /*line :5877:14*/_Cfunc_CString /*line :5877:22*/)(keys[i])
		defer func() func() { _cgo0 := /*line :5878:16*/unsafe.Pointer(ckeys[i]); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5878:41*/_Cfunc_free(_cgo0); }}()()
	}

	nkeys := len(keys)
	var cKeysPtr ** /*line :5882:17*/_Ctype_char /*line :5882:23*/ = nil
	if nkeys > 0 {
		cKeysPtr = (** /*line :5884:17*/_Ctype_char /*line :5884:23*/)(unsafe.Pointer(&ckeys[0]))
	}

	var err  /*line :5887:10*/_Ctype_virError /*line :5887:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5888:48*/d.ptr; var _cgo1 *_Ctype_char = /*line :5888:55*/cuser; _cgo2 := /*line :5888:62*/cKeysPtr; var _cgo3 _Ctype_uint = _Ctype_uint /*line :5888:78*/(nkeys); var _cgo4 _Ctype_uint = _Ctype_uint /*line :5888:93*/(flags); _cgoBase5 := /*line :5888:102*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :5888:107*/_Cfunc_virDomainAuthorizedSSHKeysSetWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil

}

func (d *Domain) GetMessages(flags DomainMessageType) ([]string, error) {
	var cmsgs ** /*line :5898:14*/_Ctype_char /*line :5898:20*/
	var err  /*line :5899:10*/_Ctype_virError /*line :5899:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5900:39*/d.ptr; _cgoBase1 := /*line :5900:46*/&cmsgs; _cgo1 := _cgoBase1; var _cgo2 _Ctype_uint = _Ctype_uint /*line :5900:60*/(flags); _cgoBase3 := /*line :5900:69*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5900:74*/_Cfunc_virDomainGetMessagesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return []string{}, makeError(&err)
	}

	msgs := make([]string, int(ret))
	for i := 0; i < int(ret); i++ {
		cmodel := *(** /*line :5907:17*/_Ctype_char /*line :5907:23*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cmsgs)) + (unsafe.Sizeof(*cmsgs) * uintptr(i))))

		defer func() func() { _cgo0 := /*line :5909:16*/unsafe.Pointer(cmodel); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5909:39*/_Cfunc_free(_cgo0); }}()()
		msgs[i] = ( /*line :5910:13*/_Cfunc_GoString /*line :5910:22*/)(cmodel)
	}
	defer func() func() { _cgo0 := /*line :5912:15*/unsafe.Pointer(cmsgs); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5912:37*/_Cfunc_free(_cgo0); }}()()

	return msgs, nil
}

func (d *Domain) StartDirtyRateCalc(secs int, flags DomainDirtyRateCalcFlags) error {
	var err  /*line :5918:10*/_Ctype_virError /*line :5918:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5919:46*/d.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :5919:58*/(secs); var _cgo2 _Ctype_uint = _Ctype_uint /*line :5919:72*/(flags); _cgoBase3 := /*line :5919:81*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5919:86*/_Cfunc_virDomainStartDirtyRateCalcWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

func (d *Domain) FDAssociate(name string, files []os.File, flags DomainFDAssociateFlags) error {
	nfiles := len(files)
	cfiles := make([] /*line :5929:19*/_Ctype_int /*line :5929:24*/, nfiles)
	for i := 0; i < nfiles; i++ {
		cfiles[i] =  /*line :5931:15*/_Ctype_int /*line :5931:20*/(files[i].Fd())
	}
	cname := ( /*line :5933:11*/_Cfunc_CString /*line :5933:19*/)(name)
	defer func() func() { _cgo0 := /*line :5934:15*/unsafe.Pointer(cname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :5934:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :5935:10*/_Ctype_virError /*line :5935:20*/
	var cfilesPtr * /*line :5936:17*/_Ctype_int /*line :5936:22*/ = nil
	if nfiles > 0 {
		cfilesPtr = &cfiles[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :5940:42*/d.ptr; var _cgo1 *_Ctype_char = /*line :5940:49*/cname; var _cgo2 _Ctype_uint = _Ctype_uint /*line :5940:62*/(nfiles); var _cgo3 *_Ctype_int = /*line :5940:72*/cfilesPtr; var _cgo4 _Ctype_uint = _Ctype_uint /*line :5940:89*/(flags); _cgoBase5 := /*line :5940:98*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :5940:103*/_Cfunc_virDomainFDAssociateWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil

}

func (d *Domain) GraphicsReload(typ DomainGraphicsReloadType, flags uint32) error {
	var err  /*line :5949:10*/_Ctype_virError /*line :5949:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :5950:42*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :5950:55*/(typ); var _cgo2 _Ctype_uint = _Ctype_uint /*line :5950:68*/(flags); _cgoBase3 := /*line :5950:77*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5950:82*/_Cfunc_virDomainGraphicsReloadWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

func (d *Domain) DelThrottleGroup(group string, flags DomainModificationImpact) error {
	var err  /*line :5959:10*/_Ctype_virError /*line :5959:20*/
	cgroup := ( /*line :5960:12*/_Cfunc_CString /*line :5960:20*/)(group)
	ret := func() _Ctype_int{ _cgo0 := /*line :5961:44*/d.ptr; var _cgo1 *_Ctype_char = /*line :5961:51*/cgroup; var _cgo2 _Ctype_uint = _Ctype_uint /*line :5961:65*/(flags); _cgoBase3 := /*line :5961:74*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :5961:79*/_Cfunc_virDomainDelThrottleGroupWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

func (d *Domain) SetThrottleGroup(group string, params *DomainBlockIoTuneParameters, flags DomainModificationImpact) error {
	info := getBlockIoTuneParametersFieldInfo(params)
	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :5976:8*/_Cfunc_virTypedParamsFreeWrapper /*line :5976:34*/)(cparams, cnparams)

	var err  /*line :5978:10*/_Ctype_virError /*line :5978:20*/
	cgroup := ( /*line :5979:12*/_Cfunc_CString /*line :5979:20*/)(group)
	ret := func() _Ctype_int{ _cgo0 := /*line :5980:44*/d.ptr; var _cgo1 *_Ctype_char = /*line :5980:51*/cgroup; var _cgo2 *_Ctype_struct__virTypedParameter = /*line :5980:59*/cparams; var _cgo3 _Ctype_int = /*line :5980:68*/cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :5980:84*/(flags); _cgoBase5 := /*line :5980:93*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :5980:98*/_Cfunc_virDomainSetThrottleGroupWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}
