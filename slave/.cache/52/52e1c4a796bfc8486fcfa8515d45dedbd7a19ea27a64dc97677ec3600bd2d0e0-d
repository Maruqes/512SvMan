// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/connect.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

import (
	"fmt"
	"os"
	"reflect"
	"strings"
	"sync"
	"unsafe"
)

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "connect_helper.h"
*/
import _ "unsafe"

const (
	VERSION_NUMBER = uint32(( /*line :48:26*/_Ciconst_LIBVIR_VERSION_NUMBER /*line :48:48*/))
)

type ConnectCloseReason int

const (
	CONNECT_CLOSE_REASON_ERROR     = ConnectCloseReason(( /*line :54:54*/_Ciconst_VIR_CONNECT_CLOSE_REASON_ERROR /*line :54:85*/))
	CONNECT_CLOSE_REASON_EOF       = ConnectCloseReason(( /*line :55:54*/_Ciconst_VIR_CONNECT_CLOSE_REASON_EOF /*line :55:83*/))
	CONNECT_CLOSE_REASON_KEEPALIVE = ConnectCloseReason(( /*line :56:54*/_Ciconst_VIR_CONNECT_CLOSE_REASON_KEEPALIVE /*line :56:89*/))
	CONNECT_CLOSE_REASON_CLIENT    = ConnectCloseReason(( /*line :57:54*/_Ciconst_VIR_CONNECT_CLOSE_REASON_CLIENT /*line :57:86*/))
)

type ConnectListAllDomainsFlags uint

const (
	CONNECT_LIST_DOMAINS_ACTIVE         = ConnectListAllDomainsFlags(( /*line :63:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_ACTIVE /*line :63:99*/))
	CONNECT_LIST_DOMAINS_INACTIVE       = ConnectListAllDomainsFlags(( /*line :64:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_INACTIVE /*line :64:101*/))
	CONNECT_LIST_DOMAINS_PERSISTENT     = ConnectListAllDomainsFlags(( /*line :65:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_PERSISTENT /*line :65:103*/))
	CONNECT_LIST_DOMAINS_TRANSIENT      = ConnectListAllDomainsFlags(( /*line :66:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_TRANSIENT /*line :66:102*/))
	CONNECT_LIST_DOMAINS_RUNNING        = ConnectListAllDomainsFlags(( /*line :67:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_RUNNING /*line :67:100*/))
	CONNECT_LIST_DOMAINS_PAUSED         = ConnectListAllDomainsFlags(( /*line :68:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_PAUSED /*line :68:99*/))
	CONNECT_LIST_DOMAINS_SHUTOFF        = ConnectListAllDomainsFlags(( /*line :69:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_SHUTOFF /*line :69:100*/))
	CONNECT_LIST_DOMAINS_OTHER          = ConnectListAllDomainsFlags(( /*line :70:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_OTHER /*line :70:98*/))
	CONNECT_LIST_DOMAINS_MANAGEDSAVE    = ConnectListAllDomainsFlags(( /*line :71:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE /*line :71:104*/))
	CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE = ConnectListAllDomainsFlags(( /*line :72:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE /*line :72:107*/))
	CONNECT_LIST_DOMAINS_AUTOSTART      = ConnectListAllDomainsFlags(( /*line :73:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_AUTOSTART /*line :73:102*/))
	CONNECT_LIST_DOMAINS_NO_AUTOSTART   = ConnectListAllDomainsFlags(( /*line :74:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART /*line :74:105*/))
	CONNECT_LIST_DOMAINS_HAS_SNAPSHOT   = ConnectListAllDomainsFlags(( /*line :75:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT /*line :75:105*/))
	CONNECT_LIST_DOMAINS_NO_SNAPSHOT    = ConnectListAllDomainsFlags(( /*line :76:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT /*line :76:104*/))
	CONNECT_LIST_DOMAINS_HAS_CHECKPOINT = ConnectListAllDomainsFlags(( /*line :77:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT /*line :77:107*/))
	CONNECT_LIST_DOMAINS_NO_CHECKPOINT  = ConnectListAllDomainsFlags(( /*line :78:67*/_Ciconst_VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT /*line :78:106*/))
)

type ConnectListAllNetworksFlags uint

const (
	CONNECT_LIST_NETWORKS_INACTIVE     = ConnectListAllNetworksFlags(( /*line :84:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_INACTIVE /*line :84:102*/))
	CONNECT_LIST_NETWORKS_ACTIVE       = ConnectListAllNetworksFlags(( /*line :85:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_ACTIVE /*line :85:100*/))
	CONNECT_LIST_NETWORKS_PERSISTENT   = ConnectListAllNetworksFlags(( /*line :86:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_PERSISTENT /*line :86:104*/))
	CONNECT_LIST_NETWORKS_TRANSIENT    = ConnectListAllNetworksFlags(( /*line :87:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_TRANSIENT /*line :87:103*/))
	CONNECT_LIST_NETWORKS_AUTOSTART    = ConnectListAllNetworksFlags(( /*line :88:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_AUTOSTART /*line :88:103*/))
	CONNECT_LIST_NETWORKS_NO_AUTOSTART = ConnectListAllNetworksFlags(( /*line :89:67*/_Ciconst_VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART /*line :89:106*/))
)

type ConnectListAllStoragePoolsFlags uint

const (
	CONNECT_LIST_STORAGE_POOLS_INACTIVE     = ConnectListAllStoragePoolsFlags(( /*line :95:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE /*line :95:116*/))
	CONNECT_LIST_STORAGE_POOLS_ACTIVE       = ConnectListAllStoragePoolsFlags(( /*line :96:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE /*line :96:114*/))
	CONNECT_LIST_STORAGE_POOLS_PERSISTENT   = ConnectListAllStoragePoolsFlags(( /*line :97:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT /*line :97:118*/))
	CONNECT_LIST_STORAGE_POOLS_TRANSIENT    = ConnectListAllStoragePoolsFlags(( /*line :98:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT /*line :98:117*/))
	CONNECT_LIST_STORAGE_POOLS_AUTOSTART    = ConnectListAllStoragePoolsFlags(( /*line :99:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART /*line :99:117*/))
	CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART = ConnectListAllStoragePoolsFlags(( /*line :100:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART /*line :100:120*/))
	CONNECT_LIST_STORAGE_POOLS_DIR          = ConnectListAllStoragePoolsFlags(( /*line :101:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_DIR /*line :101:111*/))
	CONNECT_LIST_STORAGE_POOLS_FS           = ConnectListAllStoragePoolsFlags(( /*line :102:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_FS /*line :102:110*/))
	CONNECT_LIST_STORAGE_POOLS_NETFS        = ConnectListAllStoragePoolsFlags(( /*line :103:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_NETFS /*line :103:113*/))
	CONNECT_LIST_STORAGE_POOLS_LOGICAL      = ConnectListAllStoragePoolsFlags(( /*line :104:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL /*line :104:115*/))
	CONNECT_LIST_STORAGE_POOLS_DISK         = ConnectListAllStoragePoolsFlags(( /*line :105:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_DISK /*line :105:112*/))
	CONNECT_LIST_STORAGE_POOLS_ISCSI        = ConnectListAllStoragePoolsFlags(( /*line :106:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI /*line :106:113*/))
	CONNECT_LIST_STORAGE_POOLS_SCSI         = ConnectListAllStoragePoolsFlags(( /*line :107:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_SCSI /*line :107:112*/))
	CONNECT_LIST_STORAGE_POOLS_MPATH        = ConnectListAllStoragePoolsFlags(( /*line :108:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_MPATH /*line :108:113*/))
	CONNECT_LIST_STORAGE_POOLS_RBD          = ConnectListAllStoragePoolsFlags(( /*line :109:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_RBD /*line :109:111*/))
	CONNECT_LIST_STORAGE_POOLS_SHEEPDOG     = ConnectListAllStoragePoolsFlags(( /*line :110:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG /*line :110:116*/))
	CONNECT_LIST_STORAGE_POOLS_GLUSTER      = ConnectListAllStoragePoolsFlags(( /*line :111:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER /*line :111:115*/))
	CONNECT_LIST_STORAGE_POOLS_ZFS          = ConnectListAllStoragePoolsFlags(( /*line :112:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_ZFS /*line :112:111*/))
	CONNECT_LIST_STORAGE_POOLS_VSTORAGE     = ConnectListAllStoragePoolsFlags(( /*line :113:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE /*line :113:116*/))
	CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT = ConnectListAllStoragePoolsFlags(( /*line :114:76*/_Ciconst_VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT /*line :114:120*/))
)

type ConnectBaselineCPUFlags uint

const (
	CONNECT_BASELINE_CPU_EXPAND_FEATURES = ConnectBaselineCPUFlags(( /*line :120:65*/_Ciconst_VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES /*line :120:106*/))
	CONNECT_BASELINE_CPU_MIGRATABLE      = ConnectBaselineCPUFlags(( /*line :121:65*/_Ciconst_VIR_CONNECT_BASELINE_CPU_MIGRATABLE /*line :121:101*/))
	CONNECT_BASELINE_CPU_IGNORE_HOST     = ConnectBaselineCPUFlags(( /*line :122:65*/_Ciconst_VIR_CONNECT_BASELINE_CPU_IGNORE_HOST /*line :122:102*/))
)

type ConnectCompareCPUFlags uint

const (
	CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE = ConnectCompareCPUFlags(( /*line :128:65*/_Ciconst_VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE /*line :128:107*/))
	CONNECT_COMPARE_CPU_VALIDATE_XML      = ConnectCompareCPUFlags(( /*line :129:65*/_Ciconst_VIR_CONNECT_COMPARE_CPU_VALIDATE_XML /*line :129:102*/))
)

type ConnectListAllInterfacesFlags uint

const (
	CONNECT_LIST_INTERFACES_INACTIVE = ConnectListAllInterfacesFlags(( /*line :135:67*/_Ciconst_VIR_CONNECT_LIST_INTERFACES_INACTIVE /*line :135:104*/))
	CONNECT_LIST_INTERFACES_ACTIVE   = ConnectListAllInterfacesFlags(( /*line :136:67*/_Ciconst_VIR_CONNECT_LIST_INTERFACES_ACTIVE /*line :136:102*/))
)

type ConnectListAllNodeDeviceFlags uint

const (
	CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM          = ConnectListAllNodeDeviceFlags(( /*line :142:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM /*line :142:121*/))
	CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV         = ConnectListAllNodeDeviceFlags(( /*line :143:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV /*line :143:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV         = ConnectListAllNodeDeviceFlags(( /*line :144:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV /*line :144:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE   = ConnectListAllNodeDeviceFlags(( /*line :145:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE /*line :145:128*/))
	CONNECT_LIST_NODE_DEVICES_CAP_NET             = ConnectListAllNodeDeviceFlags(( /*line :146:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET /*line :146:118*/))
	CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST       = ConnectListAllNodeDeviceFlags(( /*line :147:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST /*line :147:124*/))
	CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET     = ConnectListAllNodeDeviceFlags(( /*line :148:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET /*line :148:126*/))
	CONNECT_LIST_NODE_DEVICES_CAP_SCSI            = ConnectListAllNodeDeviceFlags(( /*line :149:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI /*line :149:119*/))
	CONNECT_LIST_NODE_DEVICES_CAP_STORAGE         = ConnectListAllNodeDeviceFlags(( /*line :150:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE /*line :150:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST         = ConnectListAllNodeDeviceFlags(( /*line :151:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST /*line :151:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_VPORTS          = ConnectListAllNodeDeviceFlags(( /*line :152:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS /*line :152:121*/))
	CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC    = ConnectListAllNodeDeviceFlags(( /*line :153:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC /*line :153:127*/))
	CONNECT_LIST_NODE_DEVICES_CAP_DRM             = ConnectListAllNodeDeviceFlags(( /*line :154:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM /*line :154:118*/))
	CONNECT_LIST_NODE_DEVICES_CAP_MDEV            = ConnectListAllNodeDeviceFlags(( /*line :155:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV /*line :155:119*/))
	CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES      = ConnectListAllNodeDeviceFlags(( /*line :156:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES /*line :156:125*/))
	CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV         = ConnectListAllNodeDeviceFlags(( /*line :157:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV /*line :157:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_CSS_DEV         = ConnectListAllNodeDeviceFlags(( /*line :158:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_CSS_DEV /*line :158:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_VDPA            = ConnectListAllNodeDeviceFlags(( /*line :159:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_VDPA /*line :159:119*/))
	CONNECT_LIST_NODE_DEVICES_CAP_AP_CARD         = ConnectListAllNodeDeviceFlags(( /*line :160:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_CARD /*line :160:122*/))
	CONNECT_LIST_NODE_DEVICES_CAP_AP_QUEUE        = ConnectListAllNodeDeviceFlags(( /*line :161:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_QUEUE /*line :161:123*/))
	CONNECT_LIST_NODE_DEVICES_CAP_AP_MATRIX       = ConnectListAllNodeDeviceFlags(( /*line :162:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_MATRIX /*line :162:124*/))
	CONNECT_LIST_NODE_DEVICES_CAP_VPD             = ConnectListAllNodeDeviceFlags(( /*line :163:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPD /*line :163:118*/))
	CONNECT_LIST_NODE_DEVICES_INACTIVE            = ConnectListAllNodeDeviceFlags(( /*line :164:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_INACTIVE /*line :164:119*/))
	CONNECT_LIST_NODE_DEVICES_ACTIVE              = ConnectListAllNodeDeviceFlags(( /*line :165:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_ACTIVE /*line :165:117*/))
	CONNECT_LIST_NODE_DEVICES_PERSISTENT          = ConnectListAllNodeDeviceFlags(( /*line :166:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_PERSISTENT /*line :166:121*/))
	CONNECT_LIST_NODE_DEVICES_TRANSIENT           = ConnectListAllNodeDeviceFlags(( /*line :167:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_TRANSIENT /*line :167:120*/))
	CONNECT_LIST_NODE_DEVICES_CAP_CCWGROUP_DEV    = ConnectListAllNodeDeviceFlags(( /*line :168:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCWGROUP_DEV /*line :168:127*/))
	CONNECT_LIST_NODE_DEVICES_CAP_CCWGROUP_MEMBER = ConnectListAllNodeDeviceFlags(( /*line :169:80*/_Ciconst_VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCWGROUP_MEMBER /*line :169:130*/))
)

type ConnectListAllSecretsFlags uint

const (
	CONNECT_LIST_SECRETS_EPHEMERAL    = ConnectListAllSecretsFlags(( /*line :175:65*/_Ciconst_VIR_CONNECT_LIST_SECRETS_EPHEMERAL /*line :175:100*/))
	CONNECT_LIST_SECRETS_NO_EPHEMERAL = ConnectListAllSecretsFlags(( /*line :176:65*/_Ciconst_VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL /*line :176:103*/))
	CONNECT_LIST_SECRETS_PRIVATE      = ConnectListAllSecretsFlags(( /*line :177:65*/_Ciconst_VIR_CONNECT_LIST_SECRETS_PRIVATE /*line :177:98*/))
	CONNECT_LIST_SECRETS_NO_PRIVATE   = ConnectListAllSecretsFlags(( /*line :178:65*/_Ciconst_VIR_CONNECT_LIST_SECRETS_NO_PRIVATE /*line :178:101*/))
)

type ConnectGetAllDomainStatsFlags uint

const (
	CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE        = ConnectGetAllDomainStatsFlags(( /*line :184:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE /*line :184:119*/))
	CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE      = ConnectGetAllDomainStatsFlags(( /*line :185:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE /*line :185:121*/))
	CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT    = ConnectGetAllDomainStatsFlags(( /*line :186:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT /*line :186:123*/))
	CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT     = ConnectGetAllDomainStatsFlags(( /*line :187:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT /*line :187:122*/))
	CONNECT_GET_ALL_DOMAINS_STATS_RUNNING       = ConnectGetAllDomainStatsFlags(( /*line :188:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING /*line :188:120*/))
	CONNECT_GET_ALL_DOMAINS_STATS_PAUSED        = ConnectGetAllDomainStatsFlags(( /*line :189:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED /*line :189:119*/))
	CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF       = ConnectGetAllDomainStatsFlags(( /*line :190:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF /*line :190:120*/))
	CONNECT_GET_ALL_DOMAINS_STATS_OTHER         = ConnectGetAllDomainStatsFlags(( /*line :191:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER /*line :191:118*/))
	CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT        = ConnectGetAllDomainStatsFlags(( /*line :192:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT /*line :192:119*/))
	CONNECT_GET_ALL_DOMAINS_STATS_BACKING       = ConnectGetAllDomainStatsFlags(( /*line :193:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING /*line :193:120*/))
	CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS = ConnectGetAllDomainStatsFlags(( /*line :194:78*/_Ciconst_VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS /*line :194:126*/))
)

type ConnectFlags uint

const (
	CONNECT_RO         = ConnectFlags(( /*line :200:36*/_Ciconst_VIR_CONNECT_RO /*line :200:51*/))
	CONNECT_NO_ALIASES = ConnectFlags(( /*line :201:36*/_Ciconst_VIR_CONNECT_NO_ALIASES /*line :201:59*/))
)

type ConnectDomainEventAgentLifecycleState int

const (
	CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED    = ConnectDomainEventAgentLifecycleState(( /*line :207:98*/_Ciconst_VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED /*line :207:155*/))
	CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED = ConnectDomainEventAgentLifecycleState(( /*line :208:98*/_Ciconst_VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED /*line :208:158*/))
)

type ConnectDomainEventAgentLifecycleReason int

const (
	CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN        = ConnectDomainEventAgentLifecycleReason(( /*line :214:102*/_Ciconst_VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN /*line :214:158*/))
	CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED = ConnectDomainEventAgentLifecycleReason(( /*line :215:102*/_Ciconst_VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED /*line :215:165*/))
	CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL        = ConnectDomainEventAgentLifecycleReason(( /*line :216:102*/_Ciconst_VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL /*line :216:158*/))
)

type CPUCompareResult int

const (
	CPU_COMPARE_ERROR        = CPUCompareResult(( /*line :222:46*/_Ciconst_VIR_CPU_COMPARE_ERROR /*line :222:68*/))
	CPU_COMPARE_INCOMPATIBLE = CPUCompareResult(( /*line :223:46*/_Ciconst_VIR_CPU_COMPARE_INCOMPATIBLE /*line :223:75*/))
	CPU_COMPARE_IDENTICAL    = CPUCompareResult(( /*line :224:46*/_Ciconst_VIR_CPU_COMPARE_IDENTICAL /*line :224:72*/))
	CPU_COMPARE_SUPERSET     = CPUCompareResult(( /*line :225:46*/_Ciconst_VIR_CPU_COMPARE_SUPERSET /*line :225:71*/))
)

type NodeAllocPagesFlags uint

const (
	NODE_ALLOC_PAGES_ADD = NodeAllocPagesFlags(( /*line :231:45*/_Ciconst_VIR_NODE_ALLOC_PAGES_ADD /*line :231:70*/))
	NODE_ALLOC_PAGES_SET = NodeAllocPagesFlags(( /*line :232:45*/_Ciconst_VIR_NODE_ALLOC_PAGES_SET /*line :232:70*/))
)

type NodeSuspendTarget int

const (
	NODE_SUSPEND_TARGET_MEM    = NodeSuspendTarget(( /*line :238:49*/_Ciconst_VIR_NODE_SUSPEND_TARGET_MEM /*line :238:77*/))
	NODE_SUSPEND_TARGET_DISK   = NodeSuspendTarget(( /*line :239:49*/_Ciconst_VIR_NODE_SUSPEND_TARGET_DISK /*line :239:78*/))
	NODE_SUSPEND_TARGET_HYBRID = NodeSuspendTarget(( /*line :240:49*/_Ciconst_VIR_NODE_SUSPEND_TARGET_HYBRID /*line :240:80*/))
)

type NodeGetCPUStatsAllCPUs int

const (
	NODE_CPU_STATS_ALL_CPUS = NodeGetCPUStatsAllCPUs(( /*line :246:51*/_Ciconst_VIR_NODE_CPU_STATS_ALL_CPUS /*line :246:79*/))
)

const (
	NODE_MEMORY_STATS_ALL_CELLS = int(( /*line :250:36*/_Ciconst_VIR_NODE_MEMORY_STATS_ALL_CELLS /*line :250:68*/))
)

type ConnectCredentialType int

const (
	CRED_USERNAME     = ConnectCredentialType(( /*line :256:44*/_Ciconst_VIR_CRED_USERNAME /*line :256:62*/))
	CRED_AUTHNAME     = ConnectCredentialType(( /*line :257:44*/_Ciconst_VIR_CRED_AUTHNAME /*line :257:62*/))
	CRED_LANGUAGE     = ConnectCredentialType(( /*line :258:44*/_Ciconst_VIR_CRED_LANGUAGE /*line :258:62*/))
	CRED_CNONCE       = ConnectCredentialType(( /*line :259:44*/_Ciconst_VIR_CRED_CNONCE /*line :259:60*/))
	CRED_PASSPHRASE   = ConnectCredentialType(( /*line :260:44*/_Ciconst_VIR_CRED_PASSPHRASE /*line :260:64*/))
	CRED_ECHOPROMPT   = ConnectCredentialType(( /*line :261:44*/_Ciconst_VIR_CRED_ECHOPROMPT /*line :261:64*/))
	CRED_NOECHOPROMPT = ConnectCredentialType(( /*line :262:44*/_Ciconst_VIR_CRED_NOECHOPROMPT /*line :262:66*/))
	CRED_REALM        = ConnectCredentialType(( /*line :263:44*/_Ciconst_VIR_CRED_REALM /*line :263:59*/))
	CRED_EXTERNAL     = ConnectCredentialType(( /*line :264:44*/_Ciconst_VIR_CRED_EXTERNAL /*line :264:62*/))
)

type ConnectGetDomainCapabilitiesFlags uint32

const (
	DOMAIN_CAPABILITIES_DISABLE_DEPRECATED_FEATURES = ConnectGetDomainCapabilitiesFlags(( /*line :270:86*/_Ciconst_VIR_CONNECT_GET_DOMAIN_CAPABILITIES_DISABLE_DEPRECATED_FEATURES /*line :270:150*/))
)

type Connect struct {
	ptr  /*line :274:6*/_Ctype_virConnectPtr /*line :274:21*/
}

type NodeInfo struct {
	Model   string
	Memory  uint64
	Cpus    uint
	MHz     uint
	Nodes   uint32
	Sockets uint32
	Cores   uint32
	Threads uint32
}

// Additional data associated to the connection.
type virConnectionData struct {
	errCallbackId   *int
	closeCallbackId *int
}

var connections map[ /*line :294:21*/_Ctype_virConnectPtr /*line :294:36*/]*virConnectionData
var connectionsLock sync.RWMutex

func init() {
	connections = make(map[ /*line :298:25*/_Ctype_virConnectPtr /*line :298:40*/]*virConnectionData)
}

func saveConnectionData(c *Connect, d *virConnectionData) {
	if c.ptr == nil {
		return // Or panic?
	}
	connectionsLock.Lock()
	defer connectionsLock.Unlock()
	connections[c.ptr] = d
}

func getConnectionData(c *Connect) *virConnectionData {
	connectionsLock.RLock()
	d := connections[c.ptr]
	connectionsLock.RUnlock()
	if d != nil {
		return d
	}
	d = &virConnectionData{}
	saveConnectionData(c, d)
	return d
}

func releaseConnectionData(c *Connect) {
	if c.ptr == nil {
		return
	}
	connectionsLock.Lock()
	defer connectionsLock.Unlock()
	delete(connections, c.ptr)
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virGetVersion
func GetVersion() (uint32, error) {
	var version  /*line :333:14*/_Ctype_ulong /*line :333:21*/
	var err  /*line :334:10*/_Ctype_virError /*line :334:20*/
	ret := func() _Ctype_int{ var _cgo0 *_Ctype_ulong = /*line :335:32*/&version; var _cgo1 *_Ctype_char = /*line :335:42*/nil; var _cgo2 *_Ctype_ulong = /*line :335:47*/nil; _cgoBase3 := /*line :335:52*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :335:57*/_Cfunc_virGetVersionWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret < 0 {
		return 0, makeError(&err)
	}
	return uint32(version), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectOpen
func NewConnect(uri string) (*Connect, error) {
	var cUri * /*line :344:12*/_Ctype_char /*line :344:18*/
	if uri != "" {
		cUri = ( /*line :346:10*/_Cfunc_CString /*line :346:18*/)(uri)
		defer func() func() { _cgo0 := /*line :347:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :347:37*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :349:10*/_Ctype_virError /*line :349:20*/
	ptr := func() _Ctype_virConnectPtr{ var _cgo0 *_Ctype_char = /*line :350:33*/cUri; _cgoBase1 := /*line :350:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :350:44*/_Cfunc_virConnectOpenWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Connect{ptr: ptr}, nil
}

type ConnectCredential struct {
	Type      ConnectCredentialType
	Prompt    string
	Challenge string
	DefResult string
	Result    string
	ResultLen int
}

type ConnectAuthCallback func(creds []*ConnectCredential)

type ConnectAuth struct {
	CredType []ConnectCredentialType
	Callback ConnectAuthCallback
}

//export connectAuthCallback
func connectAuthCallback(ccredlist  /*line :374:36*/_Ctype_virConnectCredentialPtr /*line :374:61*/, ncred  /*line :374:69*/_Ctype_uint /*line :374:75*/, callbackID  /*line :374:88*/_Ctype_int /*line :374:93*/)  /*line :374:95*/_Ctype_int /*line :374:100*/ {
	cred := make([]*ConnectCredential, int(ncred))

	for i := 0; i < int(ncred); i++ {
		ccred := ( /*line :378:13*/_Ctype_virConnectCredentialPtr /*line :378:38*/)(unsafe.Pointer((uintptr)(unsafe.Pointer(ccredlist)) + (unsafe.Sizeof(*ccredlist) * uintptr(i))))
		cred[i] = &ConnectCredential{
			Type:      ConnectCredentialType(ccred._type),
			Prompt:    ( /*line :381:15*/_Cfunc_GoString /*line :381:24*/)(ccred.prompt),
			Challenge: ( /*line :382:15*/_Cfunc_GoString /*line :382:24*/)(ccred.challenge),
			DefResult: ( /*line :383:15*/_Cfunc_GoString /*line :383:24*/)(ccred.defresult),
			ResultLen: -1,
		}
	}
	callbackEntry := getCallbackId(int(callbackID))
	callback, ok := callbackEntry.(ConnectAuthCallback)
	if !ok {
		panic("Unexpected callback type")
	}

	callback(cred)

	for i := 0; i < int(ncred); i++ {
		ccred := ( /*line :396:13*/_Ctype_virConnectCredentialPtr /*line :396:38*/)(unsafe.Pointer((uintptr)(unsafe.Pointer(ccredlist)) + (unsafe.Sizeof(*ccredlist) * uintptr(i))))
		if cred[i].ResultLen >= 0 {
			ccred.result = ( /*line :398:19*/_Cfunc_CString /*line :398:27*/)(cred[i].Result)
			ccred.resultlen =  /*line :399:22*/_Ctype_uint /*line :399:28*/(cred[i].ResultLen)
		}
	}

	return 0
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectOpenAuth
func NewConnectWithAuth(uri string, auth *ConnectAuth, flags ConnectFlags) (*Connect, error) {
	var cUri * /*line :408:12*/_Ctype_char /*line :408:18*/
	var err  /*line :409:10*/_Ctype_virError /*line :409:20*/
	var ptr  /*line :410:10*/_Ctype_virConnectPtr /*line :410:25*/

	if uri != "" {
		cUri = ( /*line :413:10*/_Cfunc_CString /*line :413:18*/)(uri)
		defer func() func() { _cgo0 := /*line :414:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :414:37*/_Cfunc_free(_cgo0); }}()()
	}

	if auth == nil || len(auth.CredType) == 0 {
		ptr = func() _Ctype_virConnectPtr{ var _cgo0 *_Ctype_char = /*line :418:37*/cUri; var _cgo1 *_Ctype_struct__virConnectAuth = /*line :418:43*/nil; var _cgo2 _Ctype_uint = _Ctype_uint /*line :418:54*/(flags); _cgoBase3 := /*line :418:63*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :418:68*/_Cfunc_virConnectOpenAuthWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	} else {
		ccredtype := make([] /*line :420:23*/_Ctype_int /*line :420:28*/, len(auth.CredType))

		for i := 0; i < len(auth.CredType); i++ {
			ccredtype[i] =  /*line :423:19*/_Ctype_int /*line :423:24*/(auth.CredType[i])
		}

		callbackID := registerCallbackId(auth.Callback)

		ptr = func() _Ctype_virConnectPtr{ var _cgo0 *_Ctype_char = /*line :428:36*/cUri; var _cgo1 *_Ctype_int = /*line :428:42*/&ccredtype[0]; var _cgo2 _Ctype_uint = _Ctype_uint /*line :428:63*/(len(auth.CredType)); var _cgo3 _Ctype_int = _Ctype_int /*line :428:90*/(callbackID); var _cgo4 _Ctype_uint = _Ctype_uint /*line :428:110*/(flags); _cgoBase5 := /*line :428:119*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :428:124*/_Cfunc_virConnectOpenAuthHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
		freeCallbackId(callbackID)
	}

	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Connect{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectOpenAuth
func NewConnectWithAuthDefault(uri string, flags ConnectFlags) (*Connect, error) {
	var cUri * /*line :440:12*/_Ctype_char /*line :440:18*/

	if uri != "" {
		cUri = ( /*line :443:10*/_Cfunc_CString /*line :443:18*/)(uri)
		defer func() func() { _cgo0 := /*line :444:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :444:37*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :447:10*/_Ctype_virError /*line :447:20*/
	ptr := func() _Ctype_virConnectPtr{ var _cgo0 *_Ctype_char = /*line :448:43*/cUri; var _cgo1 _Ctype_uint = _Ctype_uint /*line :448:55*/(flags); _cgoBase2 := /*line :448:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :448:69*/_Cfunc_virConnectOpenAuthDefaultHelper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Connect{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectOpenReadOnly
func NewConnectReadOnly(uri string) (*Connect, error) {
	var cUri * /*line :457:12*/_Ctype_char /*line :457:18*/
	if uri != "" {
		cUri = ( /*line :459:10*/_Cfunc_CString /*line :459:18*/)(uri)
		defer func() func() { _cgo0 := /*line :460:16*/unsafe.Pointer(cUri); return func() { _cgoCheckPointer(_cgo0, nil); /*line :460:37*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :462:10*/_Ctype_virError /*line :462:20*/
	ptr := func() _Ctype_virConnectPtr{ var _cgo0 *_Ctype_char = /*line :463:41*/cUri; _cgoBase1 := /*line :463:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :463:52*/_Cfunc_virConnectOpenReadOnlyWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Connect{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectClose
func (c *Connect) Close() (int, error) {
	var err  /*line :472:10*/_Ctype_virError /*line :472:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :473:41*/c.ptr; _cgoBase1 := /*line :473:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :473:53*/_Cfunc_virConnectCloseWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return result, makeError(&err)
	}
	if result == 0 {
		// No more reference to this connection, release data.
		releaseConnectionData(c)
		c.ptr = nil
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectRef
func (c *Connect) Ref() error {
	var err  /*line :487:10*/_Ctype_virError /*line :487:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :488:32*/c.ptr; _cgoBase1 := /*line :488:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :488:44*/_Cfunc_virConnectRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// Return the raw pointer. Caller is responsible for closing it via
// CloseRawPtr(). This is intended to allow integration with Go bindings
// to other C APIs that require direct access a virConnectPtr. This should
// not be used in other scenarios.
func (c *Connect) RawPtr() ( /*line :499:29*/_Ctype_virConnectPtr /*line :499:44*/, error) {
	var err  /*line :500:10*/_Ctype_virError /*line :500:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :501:32*/c.ptr; _cgoBase1 := /*line :501:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :501:44*/_Cfunc_virConnectRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return nil, makeError(&err)
	}
	return c.ptr, nil
}

// Unref (and possibly close) raw libvirt connection object, previously
// obtained via RawPtr().
func CloseRawPtr(c  /*line :510:20*/_Ctype_virConnectPtr /*line :510:35*/) (int, error) {
	cc := Connect{ptr: c}
	return cc.Close()
}

type CloseCallback func(conn *Connect, reason ConnectCloseReason)

// Register a close callback for the given destination. Only one
// callback per connection is allowed. Setting a callback will remove
// the previous one.
// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectRegisterCloseCallback
func (c *Connect) RegisterCloseCallback(callback CloseCallback) error {
	c.UnregisterCloseCallback()
	goCallbackId := registerCallbackId(callback)
	var err  /*line :524:10*/_Ctype_virError /*line :524:20*/
	res := func() _Ctype_int{ _cgo0 := /*line :525:49*/c.ptr; var _cgo1 _Ctype_long = _Ctype_long /*line :525:62*/(goCallbackId); _cgoBase2 := /*line :525:78*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :525:83*/_Cfunc_virConnectRegisterCloseCallbackHelper(_cgo0, _cgo1, _cgo2); }()
	if res != 0 {
		freeCallbackId(goCallbackId)
		return makeError(&err)
	}
	connData := getConnectionData(c)
	connData.closeCallbackId = &goCallbackId
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectUnregisterCloseCallback
func (c *Connect) UnregisterCloseCallback() error {
	connData := getConnectionData(c)
	if connData.closeCallbackId == nil {
		return nil
	}
	var err  /*line :541:10*/_Ctype_virError /*line :541:20*/
	res := func() _Ctype_int{ _cgo0 := /*line :542:51*/c.ptr; _cgoBase1 := /*line :542:58*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :542:63*/_Cfunc_virConnectUnregisterCloseCallbackHelper(_cgo0, _cgo1); }()
	if res != 0 {
		return makeError(&err)
	}
	connData.closeCallbackId = nil
	return nil
}

//export closeCallback
func closeCallback(conn  /*line :551:25*/_Ctype_virConnectPtr /*line :551:40*/, reason ConnectCloseReason, goCallbackId int) {
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(CloseCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(&Connect{ptr: conn}, reason)
}

type ConnectIdentity struct {
	UserNameSet              bool
	UserName                 string
	UNIXUserIDSet            bool
	UNIXUserID               uint64
	GroupNameSet             bool
	GroupName                string
	UNIXGroupIDSet           bool
	UNIXGroupID              uint64
	ProcessIDSet             bool
	ProcessID                int64
	ProcessTimeSet           bool
	ProcessTime              uint64
	SASLUserNameSet          bool
	SASLUserName             string
	X509DistinguishedNameSet bool
	X509DistinguishedName    string
	SELinuxContextSet        bool
	SELinuxContext           string
}

func getConnectIdentityFieldInfo(params *ConnectIdentity) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :583:3*/_Csconst_VIR_CONNECT_IDENTITY_USER_NAME /*line :583:34*/): typedParamsFieldInfo{
			set: &params.UserNameSet,
			s:   &params.UserName,
		},
		( /*line :587:3*/_Csconst_VIR_CONNECT_IDENTITY_UNIX_USER_ID /*line :587:37*/): typedParamsFieldInfo{
			set: &params.UNIXUserIDSet,
			ul:  &params.UNIXUserID,
		},
		( /*line :591:3*/_Csconst_VIR_CONNECT_IDENTITY_GROUP_NAME /*line :591:35*/): typedParamsFieldInfo{
			set: &params.GroupNameSet,
			s:   &params.GroupName,
		},
		( /*line :595:3*/_Csconst_VIR_CONNECT_IDENTITY_UNIX_GROUP_ID /*line :595:38*/): typedParamsFieldInfo{
			set: &params.UNIXGroupIDSet,
			ul:  &params.UNIXGroupID,
		},
		( /*line :599:3*/_Csconst_VIR_CONNECT_IDENTITY_PROCESS_ID /*line :599:35*/): typedParamsFieldInfo{
			set: &params.ProcessIDSet,
			l:   &params.ProcessID,
		},
		( /*line :603:3*/_Csconst_VIR_CONNECT_IDENTITY_PROCESS_TIME /*line :603:37*/): typedParamsFieldInfo{
			set: &params.ProcessTimeSet,
			ul:  &params.ProcessTime,
		},
		( /*line :607:3*/_Csconst_VIR_CONNECT_IDENTITY_SASL_USER_NAME /*line :607:39*/): typedParamsFieldInfo{
			set: &params.SASLUserNameSet,
			s:   &params.SASLUserName,
		},
		( /*line :611:3*/_Csconst_VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME /*line :611:48*/): typedParamsFieldInfo{
			set: &params.X509DistinguishedNameSet,
			s:   &params.X509DistinguishedName,
		},
		( /*line :615:3*/_Csconst_VIR_CONNECT_IDENTITY_SELINUX_CONTEXT /*line :615:40*/): typedParamsFieldInfo{
			set: &params.SELinuxContextSet,
			s:   &params.SELinuxContext,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectSetIdentity
func (c *Connect) SetIdentity(ident *ConnectIdentity, flags uint32) error {
	info := getConnectIdentityFieldInfo(ident)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :631:8*/_Cfunc_virTypedParamsFreeWrapper /*line :631:34*/)(cparams, cnparams)

	var err  /*line :633:10*/_Ctype_virError /*line :633:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :634:40*/c.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :634:47*/cparams; var _cgo2 _Ctype_int = /*line :634:56*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :634:72*/(flags); _cgoBase4 := /*line :634:81*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :634:86*/_Cfunc_virConnectSetIdentityWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetCapabilities
func (c *Connect) GetCapabilities() (string, error) {
	var err  /*line :644:10*/_Ctype_virError /*line :644:20*/
	str := func() *_Ctype_char{ _cgo0 := /*line :645:44*/c.ptr; _cgoBase1 := /*line :645:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :645:56*/_Cfunc_virConnectGetCapabilitiesWrapper(_cgo0, _cgo1); }()
	if str == nil {
		return "", makeError(&err)
	}
	capabilities := ( /*line :649:18*/_Cfunc_GoString /*line :649:27*/)(str)
	func() { _cgo0 := /*line :650:9*/unsafe.Pointer(str); _cgoCheckPointer(_cgo0, nil); /*line :650:29*/_Cfunc_free(_cgo0); }()
	return capabilities, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetInfo
func (c *Connect) GetNodeInfo() (*NodeInfo, error) {
	var cinfo  /*line :656:12*/_Ctype_virNodeInfo /*line :656:25*/
	var err  /*line :657:10*/_Ctype_virError /*line :657:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :658:36*/c.ptr; var _cgo1 *_Ctype_struct__virNodeInfo = /*line :658:43*/&cinfo; _cgoBase2 := /*line :658:51*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :658:56*/_Cfunc_virNodeGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return nil, makeError(&err)
	}
	return &NodeInfo{
		Model:   ( /*line :663:12*/_Cfunc_GoString /*line :663:21*/)((* /*line :663:25*/_Ctype_char /*line :663:31*/)(unsafe.Pointer(&cinfo.model[0]))),
		Memory:  uint64(cinfo.memory),
		Cpus:    uint(cinfo.cpus),
		MHz:     uint(cinfo.mhz),
		Nodes:   uint32(cinfo.nodes),
		Sockets: uint32(cinfo.sockets),
		Cores:   uint32(cinfo.cores),
		Threads: uint32(cinfo.threads),
	}, nil
}

func (ni *NodeInfo) GetMaxCPUs() uint32 {
	return ni.Nodes * ni.Sockets * ni.Cores * ni.Threads
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetHostname
func (c *Connect) GetHostname() (string, error) {
	var err  /*line :680:10*/_Ctype_virError /*line :680:20*/
	str := func() *_Ctype_char{ _cgo0 := /*line :681:40*/c.ptr; _cgoBase1 := /*line :681:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :681:52*/_Cfunc_virConnectGetHostnameWrapper(_cgo0, _cgo1); }()
	if str == nil {
		return "", makeError(&err)
	}
	hostname := ( /*line :685:14*/_Cfunc_GoString /*line :685:23*/)(str)
	func() { _cgo0 := /*line :686:9*/unsafe.Pointer(str); _cgoCheckPointer(_cgo0, nil); /*line :686:29*/_Cfunc_free(_cgo0); }()
	return hostname, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetLibVersion
func (c *Connect) GetLibVersion() (uint32, error) {
	var version  /*line :692:14*/_Ctype_ulong /*line :692:21*/
	var err  /*line :693:10*/_Ctype_virError /*line :693:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :694:42*/c.ptr; var _cgo1 *_Ctype_ulong = /*line :694:49*/&version; _cgoBase2 := /*line :694:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :694:64*/_Cfunc_virConnectGetLibVersionWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret < 0 {
		return 0, makeError(&err)
	}
	return uint32(version), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetType
func (c *Connect) GetType() (string, error) {
	var err  /*line :703:10*/_Ctype_virError /*line :703:20*/
	str := func() *_Ctype_char{ _cgo0 := /*line :704:36*/c.ptr; _cgoBase1 := /*line :704:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :704:48*/_Cfunc_virConnectGetTypeWrapper(_cgo0, _cgo1); }()
	if str == nil {
		return "", makeError(&err)
	}
	hypDriver := ( /*line :708:15*/_Cfunc_GoString /*line :708:24*/)(str)
	return hypDriver, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectIsAlive
func (c *Connect) IsAlive() (bool, error) {
	var err  /*line :714:10*/_Ctype_virError /*line :714:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :715:39*/c.ptr; _cgoBase1 := /*line :715:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :715:51*/_Cfunc_virConnectIsAliveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectIsEncrypted
func (c *Connect) IsEncrypted() (bool, error) {
	var err  /*line :727:10*/_Ctype_virError /*line :727:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :728:43*/c.ptr; _cgoBase1 := /*line :728:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :728:55*/_Cfunc_virConnectIsEncryptedWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectIsSecure
func (c *Connect) IsSecure() (bool, error) {
	var err  /*line :740:10*/_Ctype_virError /*line :740:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :741:40*/c.ptr; _cgoBase1 := /*line :741:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :741:52*/_Cfunc_virConnectIsSecureWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectListDefinedDomains
func (c *Connect) ListDefinedDomains() ([]string, error) {
	var names [1024](* /*line :753:20*/_Ctype_char /*line :753:26*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :755:10*/_Ctype_virError /*line :755:20*/
	numDomains := func() _Ctype_int{ _cgo0 := /*line :757:3*/c.ptr; _cgo1 := /*line :758:3*/(**_Ctype_char /*line :758:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :759:3*/1024; _cgoBase3 := /*line :759:9*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :759:14*/_Cfunc_virConnectListDefinedDomainsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numDomains == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numDomains)
	for k := 0; k < int(numDomains); k++ {
		goNames[k] = ( /*line :765:16*/_Cfunc_GoString /*line :765:25*/)(names[k])
		func() { _cgo0 := /*line :766:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :766:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectListDomains
func (c *Connect) ListDomains() ([]uint32, error) {
	var cDomainsIds [512](uint32)
	cDomainsPointer := unsafe.Pointer(&cDomainsIds)
	var err  /*line :775:10*/_Ctype_virError /*line :775:20*/
	numDomains := func() _Ctype_int{ _cgo0 := /*line :776:47*/c.ptr; var _cgo1 *_Ctype_int = /*line :776:54*/(*_Ctype_int /*line :776:61*/)(cDomainsPointer); var _cgo2 _Ctype_int = /*line :776:81*/512; _cgoBase3 := /*line :776:86*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :776:91*/_Cfunc_virConnectListDomainsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numDomains == -1 {
		return nil, makeError(&err)
	}

	return cDomainsIds[:numDomains], nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virConnectListInterfaces
func (c *Connect) ListInterfaces() ([]string, error) {
	const maxIfaces = 1024
	var names [maxIfaces](* /*line :787:25*/_Ctype_char /*line :787:31*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :789:10*/_Ctype_virError /*line :789:20*/
	numIfaces := func() _Ctype_int{ _cgo0 := /*line :791:3*/c.ptr; _cgo1 := /*line :792:3*/(**_Ctype_char /*line :792:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :793:3*/maxIfaces; _cgoBase3 := /*line :793:14*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :793:19*/_Cfunc_virConnectListInterfacesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numIfaces == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numIfaces)
	for k := 0; k < int(numIfaces); k++ {
		goNames[k] = ( /*line :799:16*/_Cfunc_GoString /*line :799:25*/)(names[k])
		func() { _cgo0 := /*line :800:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :800:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virConnectListNetworks
func (c *Connect) ListNetworks() ([]string, error) {
	const maxNets = 1024
	var names [maxNets](* /*line :808:23*/_Ctype_char /*line :808:29*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :810:10*/_Ctype_virError /*line :810:20*/
	numNetworks := func() _Ctype_int{ _cgo0 := /*line :812:3*/c.ptr; _cgo1 := /*line :813:3*/(**_Ctype_char /*line :813:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :814:3*/maxNets; _cgoBase3 := /*line :814:12*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :814:17*/_Cfunc_virConnectListNetworksWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNetworks == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numNetworks)
	for k := 0; k < int(numNetworks); k++ {
		goNames[k] = ( /*line :820:16*/_Cfunc_GoString /*line :820:25*/)(names[k])
		func() { _cgo0 := /*line :821:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :821:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virConnectListNWFilters
func (c *Connect) ListNWFilters() ([]string, error) {
	const maxFilters = 1024
	var names [maxFilters](* /*line :829:26*/_Ctype_char /*line :829:32*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :831:10*/_Ctype_virError /*line :831:20*/
	numNWFilters := func() _Ctype_int{ _cgo0 := /*line :833:3*/c.ptr; _cgo1 := /*line :834:3*/(**_Ctype_char /*line :834:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :835:3*/maxFilters; _cgoBase3 := /*line :835:15*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :835:20*/_Cfunc_virConnectListNWFiltersWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNWFilters == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numNWFilters)
	for k := 0; k < int(numNWFilters); k++ {
		goNames[k] = ( /*line :841:16*/_Cfunc_GoString /*line :841:25*/)(names[k])
		func() { _cgo0 := /*line :842:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :842:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectListStoragePools
func (c *Connect) ListStoragePools() ([]string, error) {
	const maxPools = 1024
	var names [maxPools](* /*line :850:24*/_Ctype_char /*line :850:30*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :852:10*/_Ctype_virError /*line :852:20*/
	numStoragePools := func() _Ctype_int{ _cgo0 := /*line :854:3*/c.ptr; _cgo1 := /*line :855:3*/(**_Ctype_char /*line :855:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :856:3*/maxPools; _cgoBase3 := /*line :856:13*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :856:18*/_Cfunc_virConnectListStoragePoolsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numStoragePools == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numStoragePools)
	for k := 0; k < int(numStoragePools); k++ {
		goNames[k] = ( /*line :862:16*/_Cfunc_GoString /*line :862:25*/)(names[k])
		func() { _cgo0 := /*line :863:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :863:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virConnectListSecrets
func (c *Connect) ListSecrets() ([]string, error) {
	const maxSecrets = 1024
	var uuids [maxSecrets](* /*line :871:26*/_Ctype_char /*line :871:32*/)
	uuidsPtr := unsafe.Pointer(&uuids)
	var err  /*line :873:10*/_Ctype_virError /*line :873:20*/
	numSecrets := func() _Ctype_int{ _cgo0 := /*line :875:3*/c.ptr; _cgo1 := /*line :876:3*/(**_Ctype_char /*line :876:12*/)(uuidsPtr); var _cgo2 _Ctype_int = /*line :877:3*/maxSecrets; _cgoBase3 := /*line :877:15*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :877:20*/_Cfunc_virConnectListSecretsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numSecrets == -1 {
		return nil, makeError(&err)
	}
	goUuids := make([]string, numSecrets)
	for k := 0; k < int(numSecrets); k++ {
		goUuids[k] = ( /*line :883:16*/_Cfunc_GoString /*line :883:25*/)(uuids[k])
		func() { _cgo0 := /*line :884:10*/unsafe.Pointer(uuids[k]); _cgoCheckPointer(_cgo0, nil); /*line :884:35*/_Cfunc_free(_cgo0); }()
	}
	return goUuids, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeListDevices
func (c *Connect) ListDevices(cap string, flags uint32) ([]string, error) {
	ccap := ( /*line :891:10*/_Cfunc_CString /*line :891:18*/)(cap)
	defer func() func() { _cgo0 := /*line :892:15*/unsafe.Pointer(ccap); return func() { _cgoCheckPointer(_cgo0, nil); /*line :892:36*/_Cfunc_free(_cgo0); }}()()
	const maxNodeDevices = 1024
	var uuids [maxNodeDevices](* /*line :894:30*/_Ctype_char /*line :894:36*/)
	uuidsPtr := unsafe.Pointer(&uuids)
	var err  /*line :896:10*/_Ctype_virError /*line :896:20*/
	numNodeDevices := func() _Ctype_int{ _cgo0 := /*line :898:3*/c.ptr; var _cgo1 *_Ctype_char = /*line :898:10*/ccap; _cgo2 := /*line :899:3*/(**_Ctype_char /*line :899:12*/)(uuidsPtr); var _cgo3 _Ctype_int = /*line :900:3*/maxNodeDevices; var _cgo4 _Ctype_uint = _Ctype_uint /*line :900:25*/(flags); _cgoBase5 := /*line :900:34*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :900:39*/_Cfunc_virNodeListDevicesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if numNodeDevices == -1 {
		return nil, makeError(&err)
	}
	goUuids := make([]string, numNodeDevices)
	for k := 0; k < int(numNodeDevices); k++ {
		goUuids[k] = ( /*line :906:16*/_Cfunc_GoString /*line :906:25*/)(uuids[k])
		func() { _cgo0 := /*line :907:10*/unsafe.Pointer(uuids[k]); _cgoCheckPointer(_cgo0, nil); /*line :907:35*/_Cfunc_free(_cgo0); }()
	}
	return goUuids, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainLookupByID
func (c *Connect) LookupDomainById(id uint32) (*Domain, error) {
	var err  /*line :914:10*/_Ctype_virError /*line :914:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :915:38*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :915:50*/(id); _cgoBase2 := /*line :915:56*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :915:61*/_Cfunc_virDomainLookupByIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainLookupByName
func (c *Connect) LookupDomainByName(id string) (*Domain, error) {
	cName := ( /*line :924:11*/_Cfunc_CString /*line :924:19*/)(id)
	defer func() func() { _cgo0 := /*line :925:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :925:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :926:10*/_Ctype_virError /*line :926:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :927:40*/c.ptr; var _cgo1 *_Ctype_char = /*line :927:47*/cName; _cgoBase2 := /*line :927:54*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :927:59*/_Cfunc_virDomainLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainLookupByUUIDString
func (c *Connect) LookupDomainByUUIDString(uuid string) (*Domain, error) {
	cUuid := ( /*line :936:11*/_Cfunc_CString /*line :936:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :937:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :937:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :938:10*/_Ctype_virError /*line :938:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :939:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :939:53*/cUuid; _cgoBase2 := /*line :939:60*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :939:65*/_Cfunc_virDomainLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainLookupByUUID
func (c *Connect) LookupDomainByUUID(uuid []byte) (*Domain, error) {
	if len(uuid) != ( /*line :948:18*/_Ciconst_VIR_UUID_BUFLEN /*line :948:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :950:8*/_Ciconst_VIR_UUID_BUFLEN /*line :950:24*/)))
	}
	cUuid := make([] /*line :952:18*/_Ctype_uchar /*line :952:25*/, ( /*line :952:27*/_Ciconst_VIR_UUID_BUFLEN /*line :952:43*/))
	for i := 0; i < ( /*line :953:18*/_Ciconst_VIR_UUID_BUFLEN /*line :953:34*/); i++ {
		cUuid[i] =  /*line :954:14*/_Ctype_uchar /*line :954:21*/(uuid[i])
	}
	var err  /*line :956:10*/_Ctype_virError /*line :956:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :957:40*/c.ptr; var _cgo1 *_Ctype_uchar = /*line :957:47*/&cUuid[0]; _cgoBase2 := /*line :957:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :957:63*/_Cfunc_virDomainLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCreateXML
func (c *Connect) DomainCreateXML(xmlConfig string, flags DomainCreateFlags) (*Domain, error) {
	cXml := ( /*line :966:10*/_Cfunc_CString /*line :966:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :967:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :967:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :968:10*/_Ctype_virError /*line :968:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :969:37*/c.ptr; var _cgo1 *_Ctype_char = /*line :969:44*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :969:56*/(flags); _cgoBase3 := /*line :969:65*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :969:70*/_Cfunc_virDomainCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainCreateXMLWithFiles
func (c *Connect) DomainCreateXMLWithFiles(xmlConfig string, files []os.File, flags DomainCreateFlags) (*Domain, error) {
	cXml := ( /*line :978:10*/_Cfunc_CString /*line :978:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :979:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :979:36*/_Cfunc_free(_cgo0); }}()()
	nfiles := len(files)
	cfiles := make([] /*line :981:19*/_Ctype_int /*line :981:24*/, nfiles)
	for i := 0; i < nfiles; i++ {
		cfiles[i] =  /*line :983:15*/_Ctype_int /*line :983:20*/(files[i].Fd())
	}
	var err  /*line :985:10*/_Ctype_virError /*line :985:20*/
	var cfilesPtr * /*line :986:17*/_Ctype_int /*line :986:22*/ = nil
	if nfiles > 0 {
		cfilesPtr = &cfiles[0]
	}
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :990:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :990:53*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :990:65*/(nfiles); var _cgo3 *_Ctype_int = /*line :990:75*/cfilesPtr; var _cgo4 _Ctype_uint = _Ctype_uint /*line :990:92*/(flags); _cgoBase5 := /*line :990:101*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :990:106*/_Cfunc_virDomainCreateXMLWithFilesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDefineXML
func (c *Connect) DomainDefineXML(xmlConfig string) (*Domain, error) {
	cXml := ( /*line :999:10*/_Cfunc_CString /*line :999:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1000:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1000:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1001:10*/_Ctype_virError /*line :1001:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :1002:37*/c.ptr; var _cgo1 *_Ctype_char = /*line :1002:44*/cXml; _cgoBase2 := /*line :1002:50*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1002:55*/_Cfunc_virDomainDefineXMLWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainDefineXMLFlags
func (c *Connect) DomainDefineXMLFlags(xmlConfig string, flags DomainDefineFlags) (*Domain, error) {
	cXml := ( /*line :1011:10*/_Cfunc_CString /*line :1011:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1012:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1012:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1013:10*/_Ctype_virError /*line :1013:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :1014:42*/c.ptr; var _cgo1 *_Ctype_char = /*line :1014:49*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1014:61*/(flags); _cgoBase3 := /*line :1014:70*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1014:75*/_Cfunc_virDomainDefineXMLFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virConnectListDefinedInterfaces
func (c *Connect) ListDefinedInterfaces() ([]string, error) {
	const maxIfaces = 1024
	var names [maxIfaces](* /*line :1024:25*/_Ctype_char /*line :1024:31*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :1026:10*/_Ctype_virError /*line :1026:20*/
	numIfaces := func() _Ctype_int{ _cgo0 := /*line :1028:3*/c.ptr; _cgo1 := /*line :1029:3*/(**_Ctype_char /*line :1029:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :1030:3*/maxIfaces; _cgoBase3 := /*line :1030:14*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1030:19*/_Cfunc_virConnectListDefinedInterfacesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numIfaces == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numIfaces)
	for k := 0; k < int(numIfaces); k++ {
		goNames[k] = ( /*line :1036:16*/_Cfunc_GoString /*line :1036:25*/)(names[k])
		func() { _cgo0 := /*line :1037:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :1037:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virConnectListDefinedNetworks
func (c *Connect) ListDefinedNetworks() ([]string, error) {
	const maxNets = 1024
	var names [maxNets](* /*line :1045:23*/_Ctype_char /*line :1045:29*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :1047:10*/_Ctype_virError /*line :1047:20*/
	numNetworks := func() _Ctype_int{ _cgo0 := /*line :1049:3*/c.ptr; _cgo1 := /*line :1050:3*/(**_Ctype_char /*line :1050:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :1051:3*/maxNets; _cgoBase3 := /*line :1051:12*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1051:17*/_Cfunc_virConnectListDefinedNetworksWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNetworks == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numNetworks)
	for k := 0; k < int(numNetworks); k++ {
		goNames[k] = ( /*line :1057:16*/_Cfunc_GoString /*line :1057:25*/)(names[k])
		func() { _cgo0 := /*line :1058:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :1058:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectListDefinedStoragePools
func (c *Connect) ListDefinedStoragePools() ([]string, error) {
	const maxPools = 1024
	var names [maxPools](* /*line :1066:24*/_Ctype_char /*line :1066:30*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :1068:10*/_Ctype_virError /*line :1068:20*/
	numStoragePools := func() _Ctype_int{ _cgo0 := /*line :1070:3*/c.ptr; _cgo1 := /*line :1071:3*/(**_Ctype_char /*line :1071:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :1072:3*/maxPools; _cgoBase3 := /*line :1072:13*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1072:18*/_Cfunc_virConnectListDefinedStoragePoolsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numStoragePools == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numStoragePools)
	for k := 0; k < int(numStoragePools); k++ {
		goNames[k] = ( /*line :1078:16*/_Cfunc_GoString /*line :1078:25*/)(names[k])
		func() { _cgo0 := /*line :1079:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :1079:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectNumOfDefinedDomains
func (c *Connect) NumOfDefinedDomains() (int, error) {
	var err  /*line :1086:10*/_Ctype_virError /*line :1086:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1087:55*/c.ptr; _cgoBase1 := /*line :1087:62*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1087:67*/_Cfunc_virConnectNumOfDefinedDomainsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virConnectNumOfDefinedInterfaces
func (c *Connect) NumOfDefinedInterfaces() (int, error) {
	var err  /*line :1096:10*/_Ctype_virError /*line :1096:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1097:58*/c.ptr; _cgoBase1 := /*line :1097:65*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1097:70*/_Cfunc_virConnectNumOfDefinedInterfacesWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virConnectNumOfDefinedNetworks
func (c *Connect) NumOfDefinedNetworks() (int, error) {
	var err  /*line :1106:10*/_Ctype_virError /*line :1106:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1107:56*/c.ptr; _cgoBase1 := /*line :1107:63*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1107:68*/_Cfunc_virConnectNumOfDefinedNetworksWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectNumOfDefinedStoragePools
func (c *Connect) NumOfDefinedStoragePools() (int, error) {
	var err  /*line :1116:10*/_Ctype_virError /*line :1116:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1117:60*/c.ptr; _cgoBase1 := /*line :1117:67*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1117:72*/_Cfunc_virConnectNumOfDefinedStoragePoolsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectNumOfDomains
func (c *Connect) NumOfDomains() (int, error) {
	var err  /*line :1126:10*/_Ctype_virError /*line :1126:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1127:48*/c.ptr; _cgoBase1 := /*line :1127:55*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1127:60*/_Cfunc_virConnectNumOfDomainsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectNumOfStoragePools
func (c *Connect) NumOfStoragePools() (int, error) {
	var err  /*line :1136:10*/_Ctype_virError /*line :1136:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1137:53*/c.ptr; _cgoBase1 := /*line :1137:60*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1137:65*/_Cfunc_virConnectNumOfStoragePoolsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virConnectNumOfInterfaces
func (c *Connect) NumOfInterfaces() (int, error) {
	var err  /*line :1146:10*/_Ctype_virError /*line :1146:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1147:51*/c.ptr; _cgoBase1 := /*line :1147:58*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1147:63*/_Cfunc_virConnectNumOfInterfacesWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virConnectNumOfNetworks
func (c *Connect) NumOfNetworks() (int, error) {
	var err  /*line :1156:10*/_Ctype_virError /*line :1156:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1157:49*/c.ptr; _cgoBase1 := /*line :1157:56*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1157:61*/_Cfunc_virConnectNumOfNetworksWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virConnectNumOfNWFilters
func (c *Connect) NumOfNWFilters() (int, error) {
	var err  /*line :1166:10*/_Ctype_virError /*line :1166:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1167:50*/c.ptr; _cgoBase1 := /*line :1167:57*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1167:62*/_Cfunc_virConnectNumOfNWFiltersWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virConnectNumOfSecrets
func (c *Connect) NumOfSecrets() (int, error) {
	var err  /*line :1176:10*/_Ctype_virError /*line :1176:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1177:48*/c.ptr; _cgoBase1 := /*line :1177:55*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1177:60*/_Cfunc_virConnectNumOfSecretsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeNumOfDevices
func (c *Connect) NumOfDevices(cap string, flags uint32) (int, error) {
	ccap := ( /*line :1186:10*/_Cfunc_CString /*line :1186:18*/)(cap)
	defer func() func() { _cgo0 := /*line :1187:15*/unsafe.Pointer(ccap); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1187:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1188:10*/_Ctype_virError /*line :1188:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1189:45*/c.ptr; var _cgo1 *_Ctype_char = /*line :1189:52*/ccap; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1189:64*/(flags); _cgoBase3 := /*line :1189:73*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1189:78*/_Cfunc_virNodeNumOfDevicesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkDefineXML
func (c *Connect) NetworkDefineXML(xmlConfig string) (*Network, error) {
	cXml := ( /*line :1198:10*/_Cfunc_CString /*line :1198:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1199:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1199:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1200:10*/_Ctype_virError /*line :1200:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1201:38*/c.ptr; var _cgo1 *_Ctype_char = /*line :1201:45*/cXml; _cgoBase2 := /*line :1201:51*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1201:56*/_Cfunc_virNetworkDefineXMLWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkDefineXMLFlags
func (c *Connect) NetworkDefineXMLFlags(xmlConfig string, flags NetworkDefineFlags) (*Network, error) {
	cXml := ( /*line :1210:10*/_Cfunc_CString /*line :1210:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1211:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1211:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1212:10*/_Ctype_virError /*line :1212:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1213:43*/c.ptr; var _cgo1 *_Ctype_char = /*line :1213:50*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1213:62*/(flags); _cgoBase3 := /*line :1213:71*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1213:76*/_Cfunc_virNetworkDefineXMLFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkCreateXML
func (c *Connect) NetworkCreateXML(xmlConfig string) (*Network, error) {
	cXml := ( /*line :1222:10*/_Cfunc_CString /*line :1222:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1223:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1223:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1224:10*/_Ctype_virError /*line :1224:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1225:38*/c.ptr; var _cgo1 *_Ctype_char = /*line :1225:45*/cXml; _cgoBase2 := /*line :1225:51*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1225:56*/_Cfunc_virNetworkCreateXMLWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkCreateXML
func (c *Connect) NetworkCreateXMLFlags(xmlConfig string, flags NetworkCreateFlags) (*Network, error) {
	cXml := ( /*line :1234:10*/_Cfunc_CString /*line :1234:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1235:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1235:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1236:10*/_Ctype_virError /*line :1236:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1237:43*/c.ptr; var _cgo1 *_Ctype_char = /*line :1237:50*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1237:62*/(flags); _cgoBase3 := /*line :1237:71*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1237:76*/_Cfunc_virNetworkCreateXMLFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkLookupByName
func (c *Connect) LookupNetworkByName(name string) (*Network, error) {
	cName := ( /*line :1246:11*/_Cfunc_CString /*line :1246:19*/)(name)
	defer func() func() { _cgo0 := /*line :1247:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1247:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1248:10*/_Ctype_virError /*line :1248:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1249:41*/c.ptr; var _cgo1 *_Ctype_char = /*line :1249:48*/cName; _cgoBase2 := /*line :1249:55*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1249:60*/_Cfunc_virNetworkLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkLookupByUUIDString
func (c *Connect) LookupNetworkByUUIDString(uuid string) (*Network, error) {
	cUuid := ( /*line :1258:11*/_Cfunc_CString /*line :1258:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :1259:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1259:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1260:10*/_Ctype_virError /*line :1260:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1261:47*/c.ptr; var _cgo1 *_Ctype_char = /*line :1261:54*/cUuid; _cgoBase2 := /*line :1261:61*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1261:66*/_Cfunc_virNetworkLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkLookupByUUID
func (c *Connect) LookupNetworkByUUID(uuid []byte) (*Network, error) {
	if len(uuid) != ( /*line :1270:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1270:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :1272:8*/_Ciconst_VIR_UUID_BUFLEN /*line :1272:24*/)))
	}
	cUuid := make([] /*line :1274:18*/_Ctype_uchar /*line :1274:25*/, ( /*line :1274:27*/_Ciconst_VIR_UUID_BUFLEN /*line :1274:43*/))
	for i := 0; i < ( /*line :1275:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1275:34*/); i++ {
		cUuid[i] =  /*line :1276:14*/_Ctype_uchar /*line :1276:21*/(uuid[i])
	}
	var err  /*line :1278:10*/_Ctype_virError /*line :1278:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :1279:41*/c.ptr; var _cgo1 *_Ctype_uchar = /*line :1279:48*/&cUuid[0]; _cgoBase2 := /*line :1279:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1279:64*/_Cfunc_virNetworkLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectSetKeepAlive
func (c *Connect) SetKeepAlive(interval int, count uint) error {
	var err  /*line :1288:10*/_Ctype_virError /*line :1288:20*/
	res := int(func() _Ctype_int{ _cgo0 := /*line :1289:45*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1289:57*/(interval); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1289:75*/(count); _cgoBase3 := /*line :1289:84*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1289:89*/_Cfunc_virConnectSetKeepAliveWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }())
	switch res {
	case 0:
		return nil
	default:
		return makeError(&err)
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetSysinfo
func (c *Connect) GetSysinfo(flags uint32) (string, error) {
	var err  /*line :1300:10*/_Ctype_virError /*line :1300:20*/
	cStr := func() *_Ctype_char{ _cgo0 := /*line :1301:40*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1301:53*/(flags); _cgoBase2 := /*line :1301:62*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1301:67*/_Cfunc_virConnectGetSysinfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if cStr == nil {
		return "", makeError(&err)
	}
	info := ( /*line :1305:10*/_Cfunc_GoString /*line :1305:19*/)(cStr)
	func() { _cgo0 := /*line :1306:9*/unsafe.Pointer(cStr); _cgoCheckPointer(_cgo0, nil); /*line :1306:30*/_Cfunc_free(_cgo0); }()
	return info, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetURI
func (c *Connect) GetURI() (string, error) {
	var err  /*line :1312:10*/_Ctype_virError /*line :1312:20*/
	cStr := func() *_Ctype_char{ _cgo0 := /*line :1313:36*/c.ptr; _cgoBase1 := /*line :1313:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1313:48*/_Cfunc_virConnectGetURIWrapper(_cgo0, _cgo1); }()
	if cStr == nil {
		return "", makeError(&err)
	}
	uri := ( /*line :1317:9*/_Cfunc_GoString /*line :1317:18*/)(cStr)
	func() { _cgo0 := /*line :1318:9*/unsafe.Pointer(cStr); _cgoCheckPointer(_cgo0, nil); /*line :1318:30*/_Cfunc_free(_cgo0); }()
	return uri, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetMaxVcpus
func (c *Connect) GetMaxVcpus(typeAttr string) (int, error) {
	var cTypeAttr * /*line :1324:17*/_Ctype_char /*line :1324:23*/
	if typeAttr != "" {
		cTypeAttr = ( /*line :1326:15*/_Cfunc_CString /*line :1326:23*/)(typeAttr)
		defer func() func() { _cgo0 := /*line :1327:16*/unsafe.Pointer(cTypeAttr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1327:42*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :1329:10*/_Ctype_virError /*line :1329:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :1330:47*/c.ptr; var _cgo1 *_Ctype_char = /*line :1330:54*/cTypeAttr; _cgoBase2 := /*line :1330:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1330:70*/_Cfunc_virConnectGetMaxVcpusWrapper(_cgo0, _cgo1, _cgo2); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceDefineXML
func (c *Connect) InterfaceDefineXML(xmlConfig string, flags InterfaceDefineFlags) (*Interface, error) {
	cXml := ( /*line :1339:10*/_Cfunc_CString /*line :1339:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1340:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1340:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1341:10*/_Ctype_virError /*line :1341:20*/
	ptr := func() _Ctype_virInterfacePtr{ _cgo0 := /*line :1342:40*/c.ptr; var _cgo1 *_Ctype_char = /*line :1342:47*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1342:59*/(flags); _cgoBase3 := /*line :1342:68*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1342:73*/_Cfunc_virInterfaceDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Interface{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceLookupByName
func (c *Connect) LookupInterfaceByName(name string) (*Interface, error) {
	cName := ( /*line :1351:11*/_Cfunc_CString /*line :1351:19*/)(name)
	defer func() func() { _cgo0 := /*line :1352:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1352:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1353:10*/_Ctype_virError /*line :1353:20*/
	ptr := func() _Ctype_virInterfacePtr{ _cgo0 := /*line :1354:43*/c.ptr; var _cgo1 *_Ctype_char = /*line :1354:50*/cName; _cgoBase2 := /*line :1354:57*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1354:62*/_Cfunc_virInterfaceLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Interface{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceLookupByMACString
func (c *Connect) LookupInterfaceByMACString(mac string) (*Interface, error) {
	cName := ( /*line :1363:11*/_Cfunc_CString /*line :1363:19*/)(mac)
	defer func() func() { _cgo0 := /*line :1364:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1364:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1365:10*/_Ctype_virError /*line :1365:20*/
	ptr := func() _Ctype_virInterfacePtr{ _cgo0 := /*line :1366:48*/c.ptr; var _cgo1 *_Ctype_char = /*line :1366:55*/cName; _cgoBase2 := /*line :1366:62*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1366:67*/_Cfunc_virInterfaceLookupByMACStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Interface{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolDefineXML
func (c *Connect) StoragePoolDefineXML(xmlConfig string, flags StoragePoolDefineFlags) (*StoragePool, error) {
	cXml := ( /*line :1375:10*/_Cfunc_CString /*line :1375:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1376:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1376:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1377:10*/_Ctype_virError /*line :1377:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1378:42*/c.ptr; var _cgo1 *_Ctype_char = /*line :1378:49*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1378:61*/(flags); _cgoBase3 := /*line :1378:70*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1378:75*/_Cfunc_virStoragePoolDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolCreateXML
func (c *Connect) StoragePoolCreateXML(xmlConfig string, flags StoragePoolCreateFlags) (*StoragePool, error) {
	cXml := ( /*line :1387:10*/_Cfunc_CString /*line :1387:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1388:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1388:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1389:10*/_Ctype_virError /*line :1389:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1390:42*/c.ptr; var _cgo1 *_Ctype_char = /*line :1390:49*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1390:61*/(flags); _cgoBase3 := /*line :1390:70*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1390:75*/_Cfunc_virStoragePoolCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolLookupByName
func (c *Connect) LookupStoragePoolByName(name string) (*StoragePool, error) {
	cName := ( /*line :1399:11*/_Cfunc_CString /*line :1399:19*/)(name)
	defer func() func() { _cgo0 := /*line :1400:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1400:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1401:10*/_Ctype_virError /*line :1401:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1402:45*/c.ptr; var _cgo1 *_Ctype_char = /*line :1402:52*/cName; _cgoBase2 := /*line :1402:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1402:64*/_Cfunc_virStoragePoolLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolLookupByUUIDString
func (c *Connect) LookupStoragePoolByUUIDString(uuid string) (*StoragePool, error) {
	cUuid := ( /*line :1411:11*/_Cfunc_CString /*line :1411:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :1412:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1412:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1413:10*/_Ctype_virError /*line :1413:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1414:51*/c.ptr; var _cgo1 *_Ctype_char = /*line :1414:58*/cUuid; _cgoBase2 := /*line :1414:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1414:70*/_Cfunc_virStoragePoolLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolLookupByUUID
func (c *Connect) LookupStoragePoolByUUID(uuid []byte) (*StoragePool, error) {
	if len(uuid) != ( /*line :1423:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1423:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :1425:8*/_Ciconst_VIR_UUID_BUFLEN /*line :1425:24*/)))
	}
	cUuid := make([] /*line :1427:18*/_Ctype_uchar /*line :1427:25*/, ( /*line :1427:27*/_Ciconst_VIR_UUID_BUFLEN /*line :1427:43*/))
	for i := 0; i < ( /*line :1428:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1428:34*/); i++ {
		cUuid[i] =  /*line :1429:14*/_Ctype_uchar /*line :1429:21*/(uuid[i])
	}
	var err  /*line :1431:10*/_Ctype_virError /*line :1431:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1432:45*/c.ptr; var _cgo1 *_Ctype_uchar = /*line :1432:52*/&cUuid[0]; _cgoBase2 := /*line :1432:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1432:68*/_Cfunc_virStoragePoolLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolLookupByTargetPath
func (c *Connect) LookupStoragePoolByTargetPath(path string) (*StoragePool, error) {
	cPath := ( /*line :1441:11*/_Cfunc_CString /*line :1441:19*/)(path)
	defer func() func() { _cgo0 := /*line :1442:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1442:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1443:10*/_Ctype_virError /*line :1443:20*/
	ptr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :1444:51*/c.ptr; var _cgo1 *_Ctype_char = /*line :1444:58*/cPath; _cgoBase2 := /*line :1444:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1444:70*/_Cfunc_virStoragePoolLookupByTargetPathWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterDefineXML
func (c *Connect) NWFilterDefineXML(xmlConfig string) (*NWFilter, error) {
	cXml := ( /*line :1453:10*/_Cfunc_CString /*line :1453:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1454:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1454:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1455:10*/_Ctype_virError /*line :1455:20*/
	ptr := func() _Ctype_virNWFilterPtr{ _cgo0 := /*line :1456:39*/c.ptr; var _cgo1 *_Ctype_char = /*line :1456:46*/cXml; _cgoBase2 := /*line :1456:52*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1456:57*/_Cfunc_virNWFilterDefineXMLWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilter{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterDefineXMLFlags
func (c *Connect) NWFilterDefineXMLFlags(xmlConfig string, flags NWFilterDefineFlags) (*NWFilter, error) {
	cXml := ( /*line :1465:10*/_Cfunc_CString /*line :1465:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1466:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1466:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1467:10*/_Ctype_virError /*line :1467:20*/
	ptr := func() _Ctype_virNWFilterPtr{ _cgo0 := /*line :1468:44*/c.ptr; var _cgo1 *_Ctype_char = /*line :1468:51*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1468:63*/(flags); _cgoBase3 := /*line :1468:72*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1468:77*/_Cfunc_virNWFilterDefineXMLFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilter{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterLookupByName
func (c *Connect) LookupNWFilterByName(name string) (*NWFilter, error) {
	cName := ( /*line :1477:11*/_Cfunc_CString /*line :1477:19*/)(name)
	defer func() func() { _cgo0 := /*line :1478:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1478:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1479:10*/_Ctype_virError /*line :1479:20*/
	ptr := func() _Ctype_virNWFilterPtr{ _cgo0 := /*line :1480:42*/c.ptr; var _cgo1 *_Ctype_char = /*line :1480:49*/cName; _cgoBase2 := /*line :1480:56*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1480:61*/_Cfunc_virNWFilterLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilter{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterLookupByUUIDString
func (c *Connect) LookupNWFilterByUUIDString(uuid string) (*NWFilter, error) {
	cUuid := ( /*line :1489:11*/_Cfunc_CString /*line :1489:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :1490:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1490:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1491:10*/_Ctype_virError /*line :1491:20*/
	ptr := func() _Ctype_virNWFilterPtr{ _cgo0 := /*line :1492:48*/c.ptr; var _cgo1 *_Ctype_char = /*line :1492:55*/cUuid; _cgoBase2 := /*line :1492:62*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1492:67*/_Cfunc_virNWFilterLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilter{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterLookupByUUID
func (c *Connect) LookupNWFilterByUUID(uuid []byte) (*NWFilter, error) {
	if len(uuid) != ( /*line :1501:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1501:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :1503:8*/_Ciconst_VIR_UUID_BUFLEN /*line :1503:24*/)))
	}
	cUuid := make([] /*line :1505:18*/_Ctype_uchar /*line :1505:25*/, ( /*line :1505:27*/_Ciconst_VIR_UUID_BUFLEN /*line :1505:43*/))
	for i := 0; i < ( /*line :1506:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1506:34*/); i++ {
		cUuid[i] =  /*line :1507:14*/_Ctype_uchar /*line :1507:21*/(uuid[i])
	}
	var err  /*line :1509:10*/_Ctype_virError /*line :1509:20*/
	ptr := func() _Ctype_virNWFilterPtr{ _cgo0 := /*line :1510:42*/c.ptr; var _cgo1 *_Ctype_uchar = /*line :1510:49*/&cUuid[0]; _cgoBase2 := /*line :1510:60*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1510:65*/_Cfunc_virNWFilterLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilter{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterBindingLookupByPortDev
func (c *Connect) LookupNWFilterBindingByPortDev(name string) (*NWFilterBinding, error) {
	cName := ( /*line :1519:11*/_Cfunc_CString /*line :1519:19*/)(name)
	defer func() func() { _cgo0 := /*line :1520:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1520:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1521:10*/_Ctype_virError /*line :1521:20*/
	ptr := func() _Ctype_virNWFilterBindingPtr{ _cgo0 := /*line :1522:52*/c.ptr; var _cgo1 *_Ctype_char = /*line :1522:59*/cName; _cgoBase2 := /*line :1522:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1522:71*/_Cfunc_virNWFilterBindingLookupByPortDevWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilterBinding{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolLookupByKey
func (c *Connect) LookupStorageVolByKey(key string) (*StorageVol, error) {
	cKey := ( /*line :1531:10*/_Cfunc_CString /*line :1531:18*/)(key)
	defer func() func() { _cgo0 := /*line :1532:15*/unsafe.Pointer(cKey); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1532:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1533:10*/_Ctype_virError /*line :1533:20*/
	ptr := func() _Ctype_virStorageVolPtr{ _cgo0 := /*line :1534:43*/c.ptr; var _cgo1 *_Ctype_char = /*line :1534:50*/cKey; _cgoBase2 := /*line :1534:56*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1534:61*/_Cfunc_virStorageVolLookupByKeyWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StorageVol{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolLookupByPath
func (c *Connect) LookupStorageVolByPath(path string) (*StorageVol, error) {
	cPath := ( /*line :1543:11*/_Cfunc_CString /*line :1543:19*/)(path)
	defer func() func() { _cgo0 := /*line :1544:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1544:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1545:10*/_Ctype_virError /*line :1545:20*/
	ptr := func() _Ctype_virStorageVolPtr{ _cgo0 := /*line :1546:44*/c.ptr; var _cgo1 *_Ctype_char = /*line :1546:51*/cPath; _cgoBase2 := /*line :1546:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1546:63*/_Cfunc_virStorageVolLookupByPathWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StorageVol{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretDefineXML
func (c *Connect) SecretDefineXML(xmlConfig string, flags SecretDefineFlags) (*Secret, error) {
	cXml := ( /*line :1555:10*/_Cfunc_CString /*line :1555:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1556:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1556:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1557:10*/_Ctype_virError /*line :1557:20*/
	ptr := func() _Ctype_virSecretPtr{ _cgo0 := /*line :1558:37*/c.ptr; var _cgo1 *_Ctype_char = /*line :1558:44*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1558:56*/(flags); _cgoBase3 := /*line :1558:65*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1558:70*/_Cfunc_virSecretDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Secret{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretLookupByUUID
func (c *Connect) LookupSecretByUUID(uuid []byte) (*Secret, error) {
	if len(uuid) != ( /*line :1567:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1567:34*/) {
		return nil, fmt.Errorf("UUID must be exactly %d bytes in size",
			int(( /*line :1569:8*/_Ciconst_VIR_UUID_BUFLEN /*line :1569:24*/)))
	}
	cUuid := make([] /*line :1571:18*/_Ctype_uchar /*line :1571:25*/, ( /*line :1571:27*/_Ciconst_VIR_UUID_BUFLEN /*line :1571:43*/))
	for i := 0; i < ( /*line :1572:18*/_Ciconst_VIR_UUID_BUFLEN /*line :1572:34*/); i++ {
		cUuid[i] =  /*line :1573:14*/_Ctype_uchar /*line :1573:21*/(uuid[i])
	}
	var err  /*line :1575:10*/_Ctype_virError /*line :1575:20*/
	ptr := func() _Ctype_virSecretPtr{ _cgo0 := /*line :1576:40*/c.ptr; var _cgo1 *_Ctype_uchar = /*line :1576:47*/&cUuid[0]; _cgoBase2 := /*line :1576:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1576:63*/_Cfunc_virSecretLookupByUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Secret{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretLookupByUUIDString
func (c *Connect) LookupSecretByUUIDString(uuid string) (*Secret, error) {
	cUuid := ( /*line :1585:11*/_Cfunc_CString /*line :1585:19*/)(uuid)
	defer func() func() { _cgo0 := /*line :1586:15*/unsafe.Pointer(cUuid); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1586:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1587:10*/_Ctype_virError /*line :1587:20*/
	ptr := func() _Ctype_virSecretPtr{ _cgo0 := /*line :1588:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :1588:53*/cUuid; _cgoBase2 := /*line :1588:60*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1588:65*/_Cfunc_virSecretLookupByUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Secret{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretLookupByUsage
func (c *Connect) LookupSecretByUsage(usageType SecretUsageType, usageID string) (*Secret, error) {
	cUsageID := ( /*line :1597:14*/_Cfunc_CString /*line :1597:22*/)(usageID)
	defer func() func() { _cgo0 := /*line :1598:15*/unsafe.Pointer(cUsageID); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1598:40*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1599:10*/_Ctype_virError /*line :1599:20*/
	ptr := func() _Ctype_virSecretPtr{ _cgo0 := /*line :1600:41*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1600:53*/(usageType); var _cgo2 *_Ctype_char = /*line :1600:66*/cUsageID; _cgoBase3 := /*line :1600:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1600:81*/_Cfunc_virSecretLookupByUsageWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Secret{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceLookupByName
func (c *Connect) LookupDeviceByName(id string) (*NodeDevice, error) {
	cName := ( /*line :1609:11*/_Cfunc_CString /*line :1609:19*/)(id)
	defer func() func() { _cgo0 := /*line :1610:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1610:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1611:10*/_Ctype_virError /*line :1611:20*/
	ptr := func() _Ctype_virNodeDevicePtr{ _cgo0 := /*line :1612:44*/c.ptr; var _cgo1 *_Ctype_char = /*line :1612:51*/cName; _cgoBase2 := /*line :1612:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1612:63*/_Cfunc_virNodeDeviceLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NodeDevice{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceLookupSCSIHostByWWN
func (c *Connect) LookupDeviceSCSIHostByWWN(wwnn, wwpn string, flags uint32) (*NodeDevice, error) {
	cWwnn := ( /*line :1621:11*/_Cfunc_CString /*line :1621:19*/)(wwnn)
	cWwpn := ( /*line :1622:11*/_Cfunc_CString /*line :1622:19*/)(wwpn)
	defer func() func() { _cgo0 := /*line :1623:15*/unsafe.Pointer(cWwnn); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1623:37*/_Cfunc_free(_cgo0); }}()()
	defer func() func() { _cgo0 := /*line :1624:15*/unsafe.Pointer(cWwpn); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1624:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1625:10*/_Ctype_virError /*line :1625:20*/
	ptr := func() _Ctype_virNodeDevicePtr{ _cgo0 := /*line :1626:51*/c.ptr; var _cgo1 *_Ctype_char = /*line :1626:58*/cWwnn; var _cgo2 *_Ctype_char = /*line :1626:65*/cWwpn; var _cgo3 _Ctype_uint = _Ctype_uint /*line :1626:78*/(flags); _cgoBase4 := /*line :1626:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1626:92*/_Cfunc_virNodeDeviceLookupSCSIHostByWWNWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NodeDevice{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceCreateXML
func (c *Connect) DeviceCreateXML(xmlConfig string, flags NodeDeviceCreateXMLFlags) (*NodeDevice, error) {
	cXml := ( /*line :1635:10*/_Cfunc_CString /*line :1635:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1636:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1636:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1637:10*/_Ctype_virError /*line :1637:20*/
	ptr := func() _Ctype_virNodeDevicePtr{ _cgo0 := /*line :1638:41*/c.ptr; var _cgo1 *_Ctype_char = /*line :1638:48*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1638:60*/(flags); _cgoBase3 := /*line :1638:69*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1638:74*/_Cfunc_virNodeDeviceCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NodeDevice{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceDefineXML
func (c *Connect) DeviceDefineXML(xmlConfig string, flags NodeDeviceDefineXMLFlags) (*NodeDevice, error) {
	cXml := ( /*line :1647:10*/_Cfunc_CString /*line :1647:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :1648:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1648:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :1649:10*/_Ctype_virError /*line :1649:20*/
	ptr := func() _Ctype_virNodeDevicePtr{ _cgo0 := /*line :1650:41*/c.ptr; var _cgo1 *_Ctype_char = /*line :1650:48*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :1650:60*/(flags); _cgoBase3 := /*line :1650:69*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1650:74*/_Cfunc_virNodeDeviceDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NodeDevice{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virConnectListAllInterfaces
func (c *Connect) ListAllInterfaces(flags ConnectListAllInterfacesFlags) ([]Interface, error) {
	var cList * /*line :1659:13*/_Ctype_virInterfacePtr /*line :1659:30*/
	var err  /*line :1660:10*/_Ctype_virError /*line :1660:20*/
	numIfaces := func() _Ctype_int{ _cgo0 := /*line :1661:52*/c.ptr; _cgoBase1 := /*line :1661:81*/&cList; _cgo1 := /*line :1661:59*/(**_Ctype_virInterfacePtr /*line :1661:79*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1661:96*/(flags); _cgoBase3 := /*line :1661:105*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1661:110*/_Cfunc_virConnectListAllInterfacesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numIfaces == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numIfaces),
		Cap:  int(numIfaces),
	}
	var ifaces []Interface
	slice := *(*[] /*line :1671:16*/_Ctype_virInterfacePtr /*line :1671:33*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		ifaces = append(ifaces, Interface{ptr})
	}
	func() { _cgo0 := /*line :1675:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1675:31*/_Cfunc_free(_cgo0); }()
	return ifaces, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virConnectListAllNetworks
func (c *Connect) ListAllNetworks(flags ConnectListAllNetworksFlags) ([]Network, error) {
	var cList * /*line :1681:13*/_Ctype_virNetworkPtr /*line :1681:28*/
	var err  /*line :1682:10*/_Ctype_virError /*line :1682:20*/
	numNets := func() _Ctype_int{ _cgo0 := /*line :1683:48*/c.ptr; _cgoBase1 := /*line :1683:75*/&cList; _cgo1 := /*line :1683:55*/(**_Ctype_virNetworkPtr /*line :1683:73*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1683:90*/(flags); _cgoBase3 := /*line :1683:99*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1683:104*/_Cfunc_virConnectListAllNetworksWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNets == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numNets),
		Cap:  int(numNets),
	}
	var nets []Network
	slice := *(*[] /*line :1693:16*/_Ctype_virNetworkPtr /*line :1693:31*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		nets = append(nets, Network{ptr})
	}
	func() { _cgo0 := /*line :1697:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1697:31*/_Cfunc_free(_cgo0); }()
	return nets, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectListAllDomains
func (c *Connect) ListAllDomains(flags ConnectListAllDomainsFlags) ([]Domain, error) {
	var cList * /*line :1703:13*/_Ctype_virDomainPtr /*line :1703:27*/
	var err  /*line :1704:10*/_Ctype_virError /*line :1704:20*/
	numDomains := func() _Ctype_int{ _cgo0 := /*line :1705:50*/c.ptr; _cgoBase1 := /*line :1705:76*/&cList; _cgo1 := /*line :1705:57*/(**_Ctype_virDomainPtr /*line :1705:74*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1705:91*/(flags); _cgoBase3 := /*line :1705:100*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1705:105*/_Cfunc_virConnectListAllDomainsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numDomains == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numDomains),
		Cap:  int(numDomains),
	}
	var domains []Domain
	slice := *(*[] /*line :1715:16*/_Ctype_virDomainPtr /*line :1715:30*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		domains = append(domains, Domain{ptr})
	}
	func() { _cgo0 := /*line :1719:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1719:31*/_Cfunc_free(_cgo0); }()
	return domains, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virConnectListAllNWFilters
func (c *Connect) ListAllNWFilters(flags uint32) ([]NWFilter, error) {
	var cList * /*line :1725:13*/_Ctype_virNWFilterPtr /*line :1725:29*/
	var err  /*line :1726:10*/_Ctype_virError /*line :1726:20*/
	numNWFilters := func() _Ctype_int{ _cgo0 := /*line :1727:54*/c.ptr; _cgoBase1 := /*line :1727:82*/&cList; _cgo1 := /*line :1727:61*/(**_Ctype_virNWFilterPtr /*line :1727:80*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1727:97*/(flags); _cgoBase3 := /*line :1727:106*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1727:111*/_Cfunc_virConnectListAllNWFiltersWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNWFilters == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numNWFilters),
		Cap:  int(numNWFilters),
	}
	var filters []NWFilter
	slice := *(*[] /*line :1737:16*/_Ctype_virNWFilterPtr /*line :1737:32*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		filters = append(filters, NWFilter{ptr})
	}
	func() { _cgo0 := /*line :1741:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1741:31*/_Cfunc_free(_cgo0); }()
	return filters, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virConnectListAllNWFilterBindings
func (c *Connect) ListAllNWFilterBindings(flags uint32) ([]NWFilterBinding, error) {
	var cList * /*line :1747:13*/_Ctype_virNWFilterBindingPtr /*line :1747:36*/
	var err  /*line :1748:10*/_Ctype_virError /*line :1748:20*/
	numNWFilters := func() _Ctype_int{ _cgo0 := /*line :1749:61*/c.ptr; _cgoBase1 := /*line :1749:96*/&cList; _cgo1 := /*line :1749:68*/(**_Ctype_virNWFilterBindingPtr /*line :1749:94*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1749:111*/(flags); _cgoBase3 := /*line :1749:120*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1749:125*/_Cfunc_virConnectListAllNWFilterBindingsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numNWFilters == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numNWFilters),
		Cap:  int(numNWFilters),
	}
	var filters []NWFilterBinding
	slice := *(*[] /*line :1759:16*/_Ctype_virNWFilterBindingPtr /*line :1759:39*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		filters = append(filters, NWFilterBinding{ptr})
	}
	func() { _cgo0 := /*line :1763:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1763:31*/_Cfunc_free(_cgo0); }()
	return filters, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectListAllStoragePools
func (c *Connect) ListAllStoragePools(flags ConnectListAllStoragePoolsFlags) ([]StoragePool, error) {
	var cList * /*line :1769:13*/_Ctype_virStoragePoolPtr /*line :1769:32*/
	var err  /*line :1770:10*/_Ctype_virError /*line :1770:20*/
	numPools := func() _Ctype_int{ _cgo0 := /*line :1771:53*/c.ptr; _cgoBase1 := /*line :1771:84*/&cList; _cgo1 := /*line :1771:60*/(**_Ctype_virStoragePoolPtr /*line :1771:82*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1771:99*/(flags); _cgoBase3 := /*line :1771:108*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1771:113*/_Cfunc_virConnectListAllStoragePoolsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numPools == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numPools),
		Cap:  int(numPools),
	}
	var pools []StoragePool
	slice := *(*[] /*line :1781:16*/_Ctype_virStoragePoolPtr /*line :1781:35*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, StoragePool{ptr})
	}
	func() { _cgo0 := /*line :1785:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1785:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virConnectListAllSecrets
func (c *Connect) ListAllSecrets(flags ConnectListAllSecretsFlags) ([]Secret, error) {
	var cList * /*line :1791:13*/_Ctype_virSecretPtr /*line :1791:27*/
	var err  /*line :1792:10*/_Ctype_virError /*line :1792:20*/
	numPools := func() _Ctype_int{ _cgo0 := /*line :1793:48*/c.ptr; _cgoBase1 := /*line :1793:74*/&cList; _cgo1 := /*line :1793:55*/(**_Ctype_virSecretPtr /*line :1793:72*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1793:89*/(flags); _cgoBase3 := /*line :1793:98*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1793:103*/_Cfunc_virConnectListAllSecretsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numPools == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numPools),
		Cap:  int(numPools),
	}
	var pools []Secret
	slice := *(*[] /*line :1803:16*/_Ctype_virSecretPtr /*line :1803:30*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, Secret{ptr})
	}
	func() { _cgo0 := /*line :1807:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1807:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virConnectListAllNodeDevices
func (c *Connect) ListAllNodeDevices(flags ConnectListAllNodeDeviceFlags) ([]NodeDevice, error) {
	var cList * /*line :1813:13*/_Ctype_virNodeDevicePtr /*line :1813:31*/
	var err  /*line :1814:10*/_Ctype_virError /*line :1814:20*/
	numPools := func() _Ctype_int{ _cgo0 := /*line :1815:52*/c.ptr; _cgoBase1 := /*line :1815:82*/&cList; _cgo1 := /*line :1815:59*/(**_Ctype_virNodeDevicePtr /*line :1815:80*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :1815:97*/(flags); _cgoBase3 := /*line :1815:106*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :1815:111*/_Cfunc_virConnectListAllNodeDevicesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numPools == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numPools),
		Cap:  int(numPools),
	}
	var pools []NodeDevice
	slice := *(*[] /*line :1825:16*/_Ctype_virNodeDevicePtr /*line :1825:34*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, NodeDevice{ptr})
	}
	func() { _cgo0 := /*line :1829:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :1829:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceChangeBegin
func (c *Connect) InterfaceChangeBegin(flags uint32) error {
	var err  /*line :1835:10*/_Ctype_virError /*line :1835:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1836:42*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1836:55*/(flags); _cgoBase2 := /*line :1836:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1836:69*/_Cfunc_virInterfaceChangeBeginWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceChangeCommit
func (c *Connect) InterfaceChangeCommit(flags uint32) error {
	var err  /*line :1845:10*/_Ctype_virError /*line :1845:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1846:43*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1846:56*/(flags); _cgoBase2 := /*line :1846:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1846:70*/_Cfunc_virInterfaceChangeCommitWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-interface.html#virInterfaceChangeRollback
func (c *Connect) InterfaceChangeRollback(flags uint32) error {
	var err  /*line :1855:10*/_Ctype_virError /*line :1855:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1856:45*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1856:58*/(flags); _cgoBase2 := /*line :1856:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1856:72*/_Cfunc_virInterfaceChangeRollbackWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeAllocPages
func (c *Connect) AllocPages(pageSizes map[int]int64, startCell int, cellCount uint, flags NodeAllocPagesFlags) (int, error) {
	npageSizes := len(pageSizes)
	cpages := make([] /*line :1866:19*/_Ctype_uint /*line :1866:25*/, npageSizes)
	ccounts := make([] /*line :1867:20*/_Ctype_ulonglong /*line :1867:31*/, npageSizes)

	i := 0
	for key, val := range pageSizes {
		cpages[i] =  /*line :1871:15*/_Ctype_uint /*line :1871:21*/(key)
		ccounts[i] =  /*line :1872:16*/_Ctype_ulonglong /*line :1872:27*/(val)
		i++
	}

	var err  /*line :1876:10*/_Ctype_virError /*line :1876:20*/
	var cpagesPtr * /*line :1877:17*/_Ctype_uint /*line :1877:23*/ = nil
	var ccountsPtr * /*line :1878:18*/_Ctype_ulonglong /*line :1878:29*/ = nil
	if npageSizes > 0 {
		cpagesPtr = &cpages[0]
		ccountsPtr = &ccounts[0]
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :1883:36*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :1883:49*/(len(pageSizes)); var _cgo2 *_Ctype_uint = /*line :1883:67*/cpagesPtr; var _cgo3 *_Ctype_ulonglong = /*line :1883:78*/ccountsPtr; var _cgo4 _Ctype_int = _Ctype_int /*line :1884:8*/(startCell); var _cgo5 _Ctype_uint = _Ctype_uint /*line :1884:27*/(cellCount); var _cgo6 _Ctype_uint = _Ctype_uint /*line :1884:46*/(flags); _cgoBase7 := /*line :1884:55*/&err; _cgo7 := _cgoBase7; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase7, 0 == 0); return /*line :1884:60*/_Cfunc_virNodeAllocPagesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return int(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetCPUMap
func (c *Connect) GetCPUMap(flags uint32) (map[int]bool, uint, error) {
	var ccpumap * /*line :1894:15*/_Ctype_uchar /*line :1894:22*/
	var conline  /*line :1895:14*/_Ctype_uint /*line :1895:20*/
	var err  /*line :1896:10*/_Ctype_virError /*line :1896:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1897:35*/c.ptr; _cgoBase1 := /*line :1897:42*/&ccpumap; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint = /*line :1897:52*/&conline; var _cgo3 _Ctype_uint = _Ctype_uint /*line :1897:68*/(flags); _cgoBase4 := /*line :1897:77*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1897:82*/_Cfunc_virNodeGetCPUMapWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return map[int]bool{}, 0, makeError(&err)
	}
	defer func() func() { _cgo0 := /*line :1901:15*/unsafe.Pointer(ccpumap); return func() { _cgoCheckPointer(_cgo0, nil); /*line :1901:39*/_Cfunc_free(_cgo0); }}()()

	cpumapbytes := func() []byte{ _cgo0 := /*line :1903:27*/unsafe.Pointer(ccpumap); var _cgo1 _Ctype_int = _Ctype_int /*line :1903:57*/((ret + 7) / 8); _cgoCheckPointer(_cgo0, nil); return /*line :1903:69*/_Cfunc_GoBytes(_cgo0, _cgo1); }()

	cpumap := make(map[int]bool, ret)
	for i := 0; i < int(ret); i++ {
		idx := int(i / 8)
		val := byte(cpumapbytes[idx])
		shift := i % 8
		cpumap[i] = (val & (1 << uint(shift))) != 0
	}

	return cpumap, uint(conline), nil
}

type NodeCPUStats struct {
	KernelSet      bool
	Kernel         uint64
	UserSet        bool
	User           uint64
	IdleSet        bool
	Idle           uint64
	IowaitSet      bool
	Iowait         uint64
	IntrSet        bool
	Intr           uint64
	UtilizationSet bool
	Utilization    uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetCPUStats
func (c *Connect) GetCPUStats(cpuNum int, flags uint32) (*NodeCPUStats, error) {
	var cnparams  /*line :1933:15*/_Ctype_int /*line :1933:20*/

	var err  /*line :1935:10*/_Ctype_virError /*line :1935:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1936:37*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1936:49*/(cpuNum); var _cgo2 *_Ctype_struct__virNodeCPUStats = /*line :1936:59*/nil; var _cgo3 *_Ctype_int = /*line :1936:64*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1936:81*/(0); _cgoBase5 := /*line :1936:86*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1936:91*/_Cfunc_virNodeGetCPUStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	params := make([] /*line :1941:19*/_Ctype_virNodeCPUStats /*line :1941:36*/, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :1942:36*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1942:48*/(cpuNum); var _cgo2 *_Ctype_struct__virNodeCPUStats = /*line :1942:58*/(*_Ctype_virNodeCPUStats /*line :1942:77*/)(unsafe.Pointer(&params[0])); var _cgo3 *_Ctype_int = /*line :1942:108*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :1942:125*/(flags); _cgoBase5 := /*line :1942:134*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1942:139*/_Cfunc_virNodeGetCPUStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	stats := &NodeCPUStats{}
	for i := 0; i < int(cnparams); i++ {
		param := params[i]
		field := ( /*line :1950:12*/_Cfunc_GoString /*line :1950:21*/)((* /*line :1950:25*/_Ctype_char /*line :1950:31*/)(unsafe.Pointer(&param.field)))
		switch field {
		case ( /*line :1952:8*/_Csconst_VIR_NODE_CPU_STATS_KERNEL /*line :1952:34*/):
			stats.KernelSet = true
			stats.Kernel = uint64(param.value)
		case ( /*line :1955:8*/_Csconst_VIR_NODE_CPU_STATS_USER /*line :1955:32*/):
			stats.UserSet = true
			stats.User = uint64(param.value)
		case ( /*line :1958:8*/_Csconst_VIR_NODE_CPU_STATS_IDLE /*line :1958:32*/):
			stats.IdleSet = true
			stats.Idle = uint64(param.value)
		case ( /*line :1961:8*/_Csconst_VIR_NODE_CPU_STATS_IOWAIT /*line :1961:34*/):
			stats.IowaitSet = true
			stats.Iowait = uint64(param.value)
		case ( /*line :1964:8*/_Csconst_VIR_NODE_CPU_STATS_INTR /*line :1964:32*/):
			stats.IntrSet = true
			stats.Intr = uint64(param.value)
		case ( /*line :1967:8*/_Csconst_VIR_NODE_CPU_STATS_UTILIZATION /*line :1967:39*/):
			stats.UtilizationSet = true
			stats.Utilization = uint64(param.value)
		}
	}

	return stats, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetCellsFreeMemory
func (c *Connect) GetCellsFreeMemory(startCell int, maxCells int) ([]uint64, error) {
	cmem := make([] /*line :1978:17*/_Ctype_ulonglong /*line :1978:28*/, maxCells)
	var err  /*line :1979:10*/_Ctype_virError /*line :1979:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1980:44*/c.ptr; var _cgo1 *_Ctype_ulonglong = /*line :1980:51*/(*_Ctype_ulonglong /*line :1980:64*/)(unsafe.Pointer(&cmem[0])); var _cgo2 _Ctype_int = _Ctype_int /*line :1980:98*/(startCell); var _cgo3 _Ctype_int = _Ctype_int /*line :1980:116*/(maxCells); _cgoBase4 := /*line :1980:128*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :1980:133*/_Cfunc_virNodeGetCellsFreeMemoryWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []uint64{}, makeError(&err)
	}

	mem := make([]uint64, ret)
	for i := 0; i < int(ret); i++ {
		mem[i] = uint64(cmem[i])
	}

	return mem, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetFreeMemory
func (c *Connect) GetFreeMemory() (uint64, error) {
	var err  /*line :1995:10*/_Ctype_virError /*line :1995:20*/
	ret := func() _Ctype_ulonglong{ _cgo0 := /*line :1996:39*/c.ptr; _cgoBase1 := /*line :1996:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :1996:51*/_Cfunc_virNodeGetFreeMemoryWrapper(_cgo0, _cgo1); }()
	if ret == 0 {
		return 0, makeError(&err)
	}

	return (uint64)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetFreePages
func (c *Connect) GetFreePages(pageSizes []uint64, startCell int, maxCells uint, flags uint32) ([]uint64, error) {
	npageSizes := len(pageSizes)
	cpageSizes := make([] /*line :2007:23*/_Ctype_uint /*line :2007:29*/, npageSizes)
	ccounts := make([] /*line :2008:20*/_Ctype_ulonglong /*line :2008:31*/, npageSizes*int(maxCells))

	for i := 0; i < len(pageSizes); i++ {
		cpageSizes[i] =  /*line :2011:19*/_Ctype_uint /*line :2011:25*/(pageSizes[i])
	}

	var err  /*line :2014:10*/_Ctype_virError /*line :2014:20*/
	var cpageSizesPtr * /*line :2015:21*/_Ctype_uint /*line :2015:27*/ = nil
	var ccountsPtr * /*line :2016:18*/_Ctype_ulonglong /*line :2016:29*/ = nil
	if npageSizes > 0 {
		cpageSizesPtr = &cpageSizes[0]
		ccountsPtr = &ccounts[0]
	}
	ret := func() _Ctype_int{ _cgo0 := /*line :2021:38*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2021:51*/(len(pageSizes)); var _cgo2 *_Ctype_uint = /*line :2021:69*/cpageSizesPtr; var _cgo3 _Ctype_int = _Ctype_int /*line :2021:89*/(startCell); var _cgo4 _Ctype_uint = _Ctype_uint /*line :2022:9*/(maxCells); var _cgo5 *_Ctype_ulonglong = /*line :2022:21*/ccountsPtr; var _cgo6 _Ctype_uint = _Ctype_uint /*line :2022:39*/(flags); _cgoBase7 := /*line :2022:48*/&err; _cgo7 := _cgoBase7; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase7, 0 == 0); return /*line :2022:53*/_Cfunc_virNodeGetFreePagesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7); }()
	if ret == -1 {
		return []uint64{}, makeError(&err)
	}

	counts := make([]uint64, ret)
	for i := 0; i < int(ret); i++ {
		counts[i] = uint64(ccounts[i])
	}

	return counts, nil
}

type NodeMemoryParameters struct {
	ShmPagesToScanSet      bool
	ShmPagesToScan         uint
	ShmSleepMillisecsSet   bool
	ShmSleepMillisecs      uint
	ShmPagesSharedSet      bool
	ShmPagesShared         uint64
	ShmPagesSharingSet     bool
	ShmPagesSharing        uint64
	ShmPagesUnsharedSet    bool
	ShmPagesUnshared       uint64
	ShmPagesVolatileSet    bool
	ShmPagesVolatile       uint64
	ShmFullScansSet        bool
	ShmFullScans           uint64
	ShmMergeAcrossNodesSet bool
	ShmMergeAcrossNodes    uint
}

func getMemoryParameterFieldInfo(params *NodeMemoryParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2056:3*/_Csconst_VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN /*line :2056:40*/): typedParamsFieldInfo{
			set: &params.ShmPagesToScanSet,
			ui:  &params.ShmPagesToScan,
		},
		( /*line :2060:3*/_Csconst_VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS /*line :2060:42*/): typedParamsFieldInfo{
			set: &params.ShmSleepMillisecsSet,
			ui:  &params.ShmSleepMillisecs,
		},
		( /*line :2064:3*/_Csconst_VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES /*line :2064:45*/): typedParamsFieldInfo{
			set: &params.ShmMergeAcrossNodesSet,
			ui:  &params.ShmMergeAcrossNodes,
		},
		( /*line :2068:3*/_Csconst_VIR_NODE_MEMORY_SHARED_PAGES_SHARED /*line :2068:39*/): typedParamsFieldInfo{
			set: &params.ShmPagesSharedSet,
			ul:  &params.ShmPagesShared,
		},
		( /*line :2072:3*/_Csconst_VIR_NODE_MEMORY_SHARED_PAGES_SHARING /*line :2072:40*/): typedParamsFieldInfo{
			set: &params.ShmPagesSharingSet,
			ul:  &params.ShmPagesSharing,
		},
		( /*line :2076:3*/_Csconst_VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED /*line :2076:41*/): typedParamsFieldInfo{
			set: &params.ShmPagesUnsharedSet,
			ul:  &params.ShmPagesUnshared,
		},
		( /*line :2080:3*/_Csconst_VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE /*line :2080:41*/): typedParamsFieldInfo{
			set: &params.ShmPagesVolatileSet,
			ul:  &params.ShmPagesVolatile,
		},
		( /*line :2084:3*/_Csconst_VIR_NODE_MEMORY_SHARED_FULL_SCANS /*line :2084:37*/): typedParamsFieldInfo{
			set: &params.ShmFullScansSet,
			ul:  &params.ShmFullScans,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetMemoryParameters
func (c *Connect) GetMemoryParameters(flags uint32) (*NodeMemoryParameters, error) {
	params := &NodeMemoryParameters{}
	info := getMemoryParameterFieldInfo(params)

	var cnparams  /*line :2096:15*/_Ctype_int /*line :2096:20*/

	var err  /*line :2098:10*/_Ctype_virError /*line :2098:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2099:45*/c.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2099:52*/nil; var _cgo2 *_Ctype_int = /*line :2099:57*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2099:74*/(0); _cgoBase4 := /*line :2099:79*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2099:84*/_Cfunc_virNodeGetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	cparams := typedParamsNew(cnparams)
	defer ( /*line :2105:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2105:34*/)(cparams, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :2106:44*/c.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2106:51*/cparams; var _cgo2 *_Ctype_int = /*line :2106:60*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2106:77*/(flags); _cgoBase4 := /*line :2106:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2106:91*/_Cfunc_virNodeGetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

type NodeMemoryStats struct {
	TotalSet   bool
	Total      uint64
	FreeSet    bool
	Free       uint64
	BuffersSet bool
	Buffers    uint64
	CachedSet  bool
	Cached     uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetMemoryStats
func (c *Connect) GetMemoryStats(cellNum int, flags uint32) (*NodeMemoryStats, error) {
	var cnparams  /*line :2132:15*/_Ctype_int /*line :2132:20*/

	var err  /*line :2134:10*/_Ctype_virError /*line :2134:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2135:40*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :2135:52*/(cellNum); var _cgo2 *_Ctype_struct__virNodeMemoryStats = /*line :2135:63*/nil; var _cgo3 *_Ctype_int = /*line :2135:68*/&cnparams; var _cgo4 _Ctype_uint = /*line :2135:79*/0; _cgoBase5 := /*line :2135:82*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2135:87*/_Cfunc_virNodeGetMemoryStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	params := make([] /*line :2140:19*/_Ctype_virNodeMemoryStats /*line :2140:39*/, cnparams)
	ret = func() _Ctype_int{ _cgo0 := /*line :2141:39*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :2141:51*/(cellNum); var _cgo2 *_Ctype_struct__virNodeMemoryStats = /*line :2141:62*/(*_Ctype_virNodeMemoryStats /*line :2141:84*/)(unsafe.Pointer(&params[0])); var _cgo3 *_Ctype_int = /*line :2141:115*/&cnparams; var _cgo4 _Ctype_uint = _Ctype_uint /*line :2141:132*/(flags); _cgoBase5 := /*line :2141:141*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :2141:146*/_Cfunc_virNodeGetMemoryStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	stats := &NodeMemoryStats{}
	for i := 0; i < int(cnparams); i++ {
		param := params[i]
		field := ( /*line :2149:12*/_Cfunc_GoString /*line :2149:21*/)((* /*line :2149:25*/_Ctype_char /*line :2149:31*/)(unsafe.Pointer(&param.field)))
		switch field {
		case ( /*line :2151:8*/_Csconst_VIR_NODE_MEMORY_STATS_TOTAL /*line :2151:36*/):
			stats.TotalSet = true
			stats.Total = uint64(param.value)
		case ( /*line :2154:8*/_Csconst_VIR_NODE_MEMORY_STATS_FREE /*line :2154:35*/):
			stats.FreeSet = true
			stats.Free = uint64(param.value)
		case ( /*line :2157:8*/_Csconst_VIR_NODE_MEMORY_STATS_BUFFERS /*line :2157:38*/):
			stats.BuffersSet = true
			stats.Buffers = uint64(param.value)
		case ( /*line :2160:8*/_Csconst_VIR_NODE_MEMORY_STATS_CACHED /*line :2160:37*/):
			stats.CachedSet = true
			stats.Cached = uint64(param.value)
		}
	}

	return stats, nil
}

type NodeSecurityModel struct {
	Model string
	Doi   string
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetSecurityModel
func (c *Connect) GetSecurityModel() (*NodeSecurityModel, error) {
	var cmodel  /*line :2176:13*/_Ctype_virSecurityModel /*line :2176:31*/
	var err  /*line :2177:10*/_Ctype_virError /*line :2177:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2178:42*/c.ptr; var _cgo1 *_Ctype_struct__virSecurityModel = /*line :2178:49*/&cmodel; _cgoBase2 := /*line :2178:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2178:63*/_Cfunc_virNodeGetSecurityModelWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &NodeSecurityModel{
		Model: ( /*line :2184:10*/_Cfunc_GoString /*line :2184:19*/)((* /*line :2184:23*/_Ctype_char /*line :2184:29*/)(unsafe.Pointer(&cmodel.model))),
		Doi:   ( /*line :2185:10*/_Cfunc_GoString /*line :2185:19*/)((* /*line :2185:23*/_Ctype_char /*line :2185:29*/)(unsafe.Pointer(&cmodel.doi))),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeSetMemoryParameters
func (c *Connect) SetMemoryParameters(params *NodeMemoryParameters, flags uint32) error {
	info := getMemoryParameterFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :2198:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2198:34*/)(cparams, cnparams)

	var err  /*line :2200:10*/_Ctype_virError /*line :2200:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2201:45*/c.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2201:52*/cparams; var _cgo2 _Ctype_int = /*line :2201:61*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2201:77*/(flags); _cgoBase4 := /*line :2201:86*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2201:91*/_Cfunc_virNodeSetMemoryParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeSuspendForDuration
func (c *Connect) SuspendForDuration(target NodeSuspendTarget, duration uint64, flags uint32) error {
	var err  /*line :2211:10*/_Ctype_virError /*line :2211:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2212:44*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2212:57*/(target); var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :2212:78*/(duration); var _cgo3 _Ctype_uint = _Ctype_uint /*line :2212:96*/(flags); _cgoBase4 := /*line :2212:105*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2212:110*/_Cfunc_virNodeSuspendForDurationWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSaveImageDefineXML
func (c *Connect) DomainSaveImageDefineXML(file string, xml string, flags DomainSaveRestoreFlags) error {
	cfile := ( /*line :2221:11*/_Cfunc_CString /*line :2221:19*/)(file)
	defer func() func() { _cgo0 := /*line :2222:15*/unsafe.Pointer(cfile); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2222:37*/_Cfunc_free(_cgo0); }}()()
	cxml := ( /*line :2223:10*/_Cfunc_CString /*line :2223:18*/)(xml)
	defer func() func() { _cgo0 := /*line :2224:15*/unsafe.Pointer(cxml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2224:36*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2226:10*/_Ctype_virError /*line :2226:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2227:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :2227:53*/cfile; var _cgo2 *_Ctype_char = /*line :2227:60*/cxml; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2227:72*/(flags); _cgoBase4 := /*line :2227:81*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2227:86*/_Cfunc_virDomainSaveImageDefineXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if ret == -1 {
		return makeError(&err)
	}

	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainSaveImageGetXMLDesc
func (c *Connect) DomainSaveImageGetXMLDesc(file string, flags DomainSaveImageXMLFlags) (string, error) {
	cfile := ( /*line :2238:11*/_Cfunc_CString /*line :2238:19*/)(file)
	defer func() func() { _cgo0 := /*line :2239:15*/unsafe.Pointer(cfile); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2239:37*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2241:10*/_Ctype_virError /*line :2241:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :2242:47*/c.ptr; var _cgo1 *_Ctype_char = /*line :2242:54*/cfile; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2242:67*/(flags); _cgoBase3 := /*line :2242:76*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2242:81*/_Cfunc_virDomainSaveImageGetXMLDescWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()

	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2248:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2248:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2250:9*/_Cfunc_GoString /*line :2250:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectBaselineCPU
func (c *Connect) BaselineCPU(xmlCPUs []string, flags ConnectBaselineCPUFlags) (string, error) {
	nxmlCPUs := len(xmlCPUs)
	cxmlCPUs := make([]* /*line :2256:22*/_Ctype_char /*line :2256:28*/, nxmlCPUs)
	for i := 0; i < nxmlCPUs; i++ {
		cxmlCPUs[i] = ( /*line :2258:17*/_Cfunc_CString /*line :2258:25*/)(xmlCPUs[i])
		defer func() func() { _cgo0 := /*line :2259:16*/unsafe.Pointer(cxmlCPUs[i]); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2259:44*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2262:10*/_Ctype_virError /*line :2262:20*/
	var cxmlCPUsPtr ** /*line :2263:20*/_Ctype_char /*line :2263:26*/ = nil
	if nxmlCPUs > 0 {
		cxmlCPUsPtr = &cxmlCPUs[0]
	}
	ret := func() *_Ctype_char{ _cgo0 := /*line :2267:40*/c.ptr; _cgo1 := /*line :2267:47*/cxmlCPUsPtr; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2267:66*/(nxmlCPUs); var _cgo3 _Ctype_uint = _Ctype_uint /*line :2267:84*/(flags); _cgoBase4 := /*line :2267:93*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2267:98*/_Cfunc_virConnectBaselineCPUWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2272:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2272:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2274:9*/_Cfunc_GoString /*line :2274:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectBaselineHypervisorCPU
func (c *Connect) BaselineHypervisorCPU(emulator string, arch string, machine string, virttype string, xmlCPUs []string, flags ConnectBaselineCPUFlags) (string, error) {
	var cemulator, carch, cmachine, cvirttype * /*line :2279:45*/_Ctype_char /*line :2279:51*/
	if emulator != "" {
		cemulator = ( /*line :2281:15*/_Cfunc_CString /*line :2281:23*/)(emulator)
		defer func() func() { _cgo0 := /*line :2282:16*/unsafe.Pointer(cemulator); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2282:42*/_Cfunc_free(_cgo0); }}()()
	}
	if arch != "" {
		carch = ( /*line :2285:11*/_Cfunc_CString /*line :2285:19*/)(arch)
		defer func() func() { _cgo0 := /*line :2286:16*/unsafe.Pointer(carch); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2286:38*/_Cfunc_free(_cgo0); }}()()
	}
	if machine != "" {
		cmachine = ( /*line :2289:14*/_Cfunc_CString /*line :2289:22*/)(machine)
		defer func() func() { _cgo0 := /*line :2290:16*/unsafe.Pointer(cmachine); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2290:41*/_Cfunc_free(_cgo0); }}()()
	}
	if virttype != "" {
		cvirttype = ( /*line :2293:15*/_Cfunc_CString /*line :2293:23*/)(virttype)
		defer func() func() { _cgo0 := /*line :2294:16*/unsafe.Pointer(cvirttype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2294:42*/_Cfunc_free(_cgo0); }}()()
	}
	nxmlCPUs := len(xmlCPUs)
	cxmlCPUs := make([]* /*line :2297:22*/_Ctype_char /*line :2297:28*/, nxmlCPUs)
	for i := 0; i < nxmlCPUs; i++ {
		cxmlCPUs[i] = ( /*line :2299:17*/_Cfunc_CString /*line :2299:25*/)(xmlCPUs[i])
		defer func() func() { _cgo0 := /*line :2300:16*/unsafe.Pointer(cxmlCPUs[i]); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2300:44*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2303:10*/_Ctype_virError /*line :2303:20*/
	var cxmlCPUsPtr ** /*line :2304:20*/_Ctype_char /*line :2304:26*/ = nil
	if nxmlCPUs > 0 {
		cxmlCPUsPtr = &cxmlCPUs[0]
	}
	ret := func() *_Ctype_char{ _cgo0 := /*line :2308:50*/c.ptr; var _cgo1 *_Ctype_char = /*line :2308:57*/cemulator; var _cgo2 *_Ctype_char = /*line :2308:68*/carch; var _cgo3 *_Ctype_char = /*line :2308:75*/cmachine; var _cgo4 *_Ctype_char = /*line :2308:85*/cvirttype; _cgo5 := /*line :2309:3*/cxmlCPUsPtr; var _cgo6 _Ctype_uint = _Ctype_uint /*line :2309:22*/(len(xmlCPUs)); var _cgo7 _Ctype_uint = _Ctype_uint /*line :2309:44*/(flags); _cgoBase8 := /*line :2309:53*/&err; _cgo8 := _cgoBase8; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo5, nil); _cgoCheckPointer(_cgoBase8, 0 == 0); return /*line :2309:58*/_Cfunc_virConnectBaselineHypervisorCPUWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2314:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2314:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2316:9*/_Cfunc_GoString /*line :2316:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectCompareCPU
func (c *Connect) CompareCPU(xmlDesc string, flags ConnectCompareCPUFlags) (CPUCompareResult, error) {
	cxmlDesc := ( /*line :2321:14*/_Cfunc_CString /*line :2321:22*/)(xmlDesc)
	defer func() func() { _cgo0 := /*line :2322:15*/unsafe.Pointer(cxmlDesc); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2322:40*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2324:10*/_Ctype_virError /*line :2324:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2325:39*/c.ptr; var _cgo1 *_Ctype_char = /*line :2325:46*/cxmlDesc; var _cgo2 _Ctype_uint = _Ctype_uint /*line :2325:62*/(flags); _cgoBase3 := /*line :2325:71*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :2325:76*/_Cfunc_virConnectCompareCPUWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == ( /*line :2326:12*/_Ciconst_VIR_CPU_COMPARE_ERROR /*line :2326:34*/) {
		return CPU_COMPARE_ERROR, makeError(&err)
	}

	return CPUCompareResult(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectCompareHypervisorCPU
func (c *Connect) CompareHypervisorCPU(emulator string, arch string, machine string, virttype string, xmlDesc string, flags ConnectCompareCPUFlags) (CPUCompareResult, error) {
	var cemulator, carch, cmachine, cvirttype * /*line :2335:45*/_Ctype_char /*line :2335:51*/
	if emulator != "" {
		cemulator = ( /*line :2337:15*/_Cfunc_CString /*line :2337:23*/)(emulator)
		defer func() func() { _cgo0 := /*line :2338:16*/unsafe.Pointer(cemulator); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2338:42*/_Cfunc_free(_cgo0); }}()()
	}
	if arch != "" {
		carch = ( /*line :2341:11*/_Cfunc_CString /*line :2341:19*/)(arch)
		defer func() func() { _cgo0 := /*line :2342:16*/unsafe.Pointer(carch); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2342:38*/_Cfunc_free(_cgo0); }}()()
	}
	if machine != "" {
		cmachine = ( /*line :2345:14*/_Cfunc_CString /*line :2345:22*/)(machine)
		defer func() func() { _cgo0 := /*line :2346:16*/unsafe.Pointer(cmachine); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2346:41*/_Cfunc_free(_cgo0); }}()()
	}
	if virttype != "" {
		cvirttype = ( /*line :2349:15*/_Cfunc_CString /*line :2349:23*/)(virttype)
		defer func() func() { _cgo0 := /*line :2350:16*/unsafe.Pointer(cvirttype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2350:42*/_Cfunc_free(_cgo0); }}()()
	}

	cxmlDesc := ( /*line :2353:14*/_Cfunc_CString /*line :2353:22*/)(xmlDesc)
	defer func() func() { _cgo0 := /*line :2354:15*/unsafe.Pointer(cxmlDesc); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2354:40*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2356:10*/_Ctype_virError /*line :2356:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2357:49*/c.ptr; var _cgo1 *_Ctype_char = /*line :2357:56*/cemulator; var _cgo2 *_Ctype_char = /*line :2357:67*/carch; var _cgo3 *_Ctype_char = /*line :2357:74*/cmachine; var _cgo4 *_Ctype_char = /*line :2357:84*/cvirttype; var _cgo5 *_Ctype_char = /*line :2357:95*/cxmlDesc; var _cgo6 _Ctype_uint = _Ctype_uint /*line :2357:111*/(flags); _cgoBase7 := /*line :2357:120*/&err; _cgo7 := _cgoBase7; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase7, 0 == 0); return /*line :2357:125*/_Cfunc_virConnectCompareHypervisorCPUWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7); }()
	if ret == ( /*line :2358:12*/_Ciconst_VIR_CPU_COMPARE_ERROR /*line :2358:34*/) {
		return CPU_COMPARE_ERROR, makeError(&err)
	}

	return CPUCompareResult(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectDomainXMLFromNative
func (c *Connect) DomainXMLFromNative(nativeFormat string, nativeConfig string, flags uint32) (string, error) {
	cnativeFormat := ( /*line :2367:19*/_Cfunc_CString /*line :2367:27*/)(nativeFormat)
	defer func() func() { _cgo0 := /*line :2368:15*/unsafe.Pointer(cnativeFormat); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2368:45*/_Cfunc_free(_cgo0); }}()()
	cnativeConfig := ( /*line :2369:19*/_Cfunc_CString /*line :2369:27*/)(nativeConfig)
	defer func() func() { _cgo0 := /*line :2370:15*/unsafe.Pointer(cnativeConfig); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2370:45*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2372:10*/_Ctype_virError /*line :2372:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :2373:48*/c.ptr; var _cgo1 *_Ctype_char = /*line :2373:55*/cnativeFormat; var _cgo2 *_Ctype_char = /*line :2373:70*/cnativeConfig; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2373:91*/(flags); _cgoBase4 := /*line :2373:100*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2373:105*/_Cfunc_virConnectDomainXMLFromNativeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2378:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2378:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2380:9*/_Cfunc_GoString /*line :2380:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectDomainXMLToNative
func (c *Connect) DomainXMLToNative(nativeFormat string, domainXml string, flags uint32) (string, error) {
	cnativeFormat := ( /*line :2385:19*/_Cfunc_CString /*line :2385:27*/)(nativeFormat)
	defer func() func() { _cgo0 := /*line :2386:15*/unsafe.Pointer(cnativeFormat); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2386:45*/_Cfunc_free(_cgo0); }}()()
	cdomainXml := ( /*line :2387:16*/_Cfunc_CString /*line :2387:24*/)(domainXml)
	defer func() func() { _cgo0 := /*line :2388:15*/unsafe.Pointer(cdomainXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2388:42*/_Cfunc_free(_cgo0); }}()()

	var err  /*line :2390:10*/_Ctype_virError /*line :2390:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :2391:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :2391:53*/cnativeFormat; var _cgo2 *_Ctype_char = /*line :2391:68*/cdomainXml; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2391:86*/(flags); _cgoBase4 := /*line :2391:95*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2391:100*/_Cfunc_virConnectDomainXMLToNativeWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2396:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2396:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2398:9*/_Cfunc_GoString /*line :2398:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetCPUModelNames
func (c *Connect) GetCPUModelNames(arch string, flags uint32) ([]string, error) {
	carch := ( /*line :2403:11*/_Cfunc_CString /*line :2403:19*/)(arch)
	defer func() func() { _cgo0 := /*line :2404:15*/unsafe.Pointer(carch); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2404:37*/_Cfunc_free(_cgo0); }}()()

	var cmodels ** /*line :2406:16*/_Ctype_char /*line :2406:22*/
	var err  /*line :2407:10*/_Ctype_virError /*line :2407:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2408:45*/c.ptr; var _cgo1 *_Ctype_char = /*line :2408:52*/carch; _cgoBase2 := /*line :2408:59*/&cmodels; _cgo2 := _cgoBase2; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2408:75*/(flags); _cgoBase4 := /*line :2408:84*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2408:89*/_Cfunc_virConnectGetCPUModelNamesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return []string{}, makeError(&err)
	}

	models := make([]string, int(ret))
	for i := 0; i < int(ret); i++ {
		cmodel := *(** /*line :2415:17*/_Ctype_char /*line :2415:23*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cmodels)) + (unsafe.Sizeof(*cmodels) * uintptr(i))))

		defer func() func() { _cgo0 := /*line :2417:16*/unsafe.Pointer(cmodel); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2417:39*/_Cfunc_free(_cgo0); }}()()
		models[i] = ( /*line :2418:15*/_Cfunc_GoString /*line :2418:24*/)(cmodel)
	}
	defer func() func() { _cgo0 := /*line :2420:15*/unsafe.Pointer(cmodels); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2420:39*/_Cfunc_free(_cgo0); }}()()

	return models, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectGetDomainCapabilities
func (c *Connect) GetDomainCapabilities(emulatorbin string, arch string, machine string, virttype string, flags ConnectGetDomainCapabilitiesFlags) (string, error) {
	var cemulatorbin * /*line :2427:20*/_Ctype_char /*line :2427:26*/
	if emulatorbin != "" {
		cemulatorbin = ( /*line :2429:18*/_Cfunc_CString /*line :2429:26*/)(emulatorbin)
		defer func() func() { _cgo0 := /*line :2430:16*/unsafe.Pointer(cemulatorbin); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2430:45*/_Cfunc_free(_cgo0); }}()()
	}
	var carch * /*line :2432:13*/_Ctype_char /*line :2432:19*/
	if arch != "" {
		carch = ( /*line :2434:11*/_Cfunc_CString /*line :2434:19*/)(arch)
		defer func() func() { _cgo0 := /*line :2435:16*/unsafe.Pointer(carch); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2435:38*/_Cfunc_free(_cgo0); }}()()
	}
	var cmachine * /*line :2437:16*/_Ctype_char /*line :2437:22*/
	if machine != "" {
		cmachine = ( /*line :2439:14*/_Cfunc_CString /*line :2439:22*/)(machine)
		defer func() func() { _cgo0 := /*line :2440:16*/unsafe.Pointer(cmachine); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2440:41*/_Cfunc_free(_cgo0); }}()()
	}
	var cvirttype * /*line :2442:17*/_Ctype_char /*line :2442:23*/
	if virttype != "" {
		cvirttype = ( /*line :2444:15*/_Cfunc_CString /*line :2444:23*/)(virttype)
		defer func() func() { _cgo0 := /*line :2445:16*/unsafe.Pointer(cvirttype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2445:42*/_Cfunc_free(_cgo0); }}()()
	}

	var err  /*line :2448:10*/_Ctype_virError /*line :2448:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :2449:50*/c.ptr; var _cgo1 *_Ctype_char = /*line :2449:57*/cemulatorbin; var _cgo2 *_Ctype_char = /*line :2449:71*/carch; var _cgo3 *_Ctype_char = /*line :2449:78*/cmachine; var _cgo4 *_Ctype_char = /*line :2449:88*/cvirttype; var _cgo5 _Ctype_uint = _Ctype_uint /*line :2449:105*/(flags); _cgoBase6 := /*line :2449:114*/&err; _cgo6 := _cgoBase6; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase6, 0 == 0); return /*line :2449:119*/_Cfunc_virConnectGetDomainCapabilitiesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2454:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2454:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2456:9*/_Cfunc_GoString /*line :2456:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virConnectGetVersion
func (c *Connect) GetVersion() (uint32, error) {
	var hvVer  /*line :2461:12*/_Ctype_ulong /*line :2461:19*/
	var err  /*line :2462:10*/_Ctype_virError /*line :2462:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :2463:39*/c.ptr; var _cgo1 *_Ctype_ulong = /*line :2463:46*/&hvVer; _cgoBase2 := /*line :2463:54*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2463:59*/_Cfunc_virConnectGetVersionWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return uint32(hvVer), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectFindStoragePoolSources
func (c *Connect) FindStoragePoolSources(pooltype string, srcSpec string, flags uint32) (string, error) {
	cpooltype := ( /*line :2473:15*/_Cfunc_CString /*line :2473:23*/)(pooltype)
	defer func() func() { _cgo0 := /*line :2474:15*/unsafe.Pointer(cpooltype); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2474:41*/_Cfunc_free(_cgo0); }}()()
	var csrcSpec * /*line :2475:16*/_Ctype_char /*line :2475:22*/
	if srcSpec != "" {
		csrcSpec = ( /*line :2477:14*/_Cfunc_CString /*line :2477:22*/)(srcSpec)
		defer func() func() { _cgo0 := /*line :2478:16*/unsafe.Pointer(csrcSpec); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2478:41*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :2480:10*/_Ctype_virError /*line :2480:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :2481:51*/c.ptr; var _cgo1 *_Ctype_char = /*line :2481:58*/cpooltype; var _cgo2 *_Ctype_char = /*line :2481:69*/csrcSpec; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2481:85*/(flags); _cgoBase4 := /*line :2481:94*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2481:99*/_Cfunc_virConnectFindStoragePoolSourcesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :2486:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2486:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :2488:9*/_Cfunc_GoString /*line :2488:18*/)(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainRestore
func (c *Connect) DomainRestore(srcFile string) error {
	cPath := ( /*line :2493:11*/_Cfunc_CString /*line :2493:19*/)(srcFile)
	defer func() func() { _cgo0 := /*line :2494:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2494:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :2495:10*/_Ctype_virError /*line :2495:20*/
	if result := func() _Ctype_int{ _cgo0 := /*line :2496:41*/c.ptr; var _cgo1 *_Ctype_char = /*line :2496:48*/cPath; _cgoBase2 := /*line :2496:55*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2496:60*/_Cfunc_virDomainRestoreWrapper(_cgo0, _cgo1, _cgo2); }(); result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainRestoreFlags
func (c *Connect) DomainRestoreFlags(srcFile, xmlConf string, flags DomainSaveRestoreFlags) error {
	cPath := ( /*line :2504:11*/_Cfunc_CString /*line :2504:19*/)(srcFile)
	defer func() func() { _cgo0 := /*line :2505:15*/unsafe.Pointer(cPath); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2505:37*/_Cfunc_free(_cgo0); }}()()
	var cXmlConf * /*line :2506:16*/_Ctype_char /*line :2506:22*/
	if xmlConf != "" {
		cXmlConf = ( /*line :2508:14*/_Cfunc_CString /*line :2508:22*/)(xmlConf)
		defer func() func() { _cgo0 := /*line :2509:16*/unsafe.Pointer(cXmlConf); return func() { _cgoCheckPointer(_cgo0, nil); /*line :2509:41*/_Cfunc_free(_cgo0); }}()()
	}
	var err  /*line :2511:10*/_Ctype_virError /*line :2511:20*/
	if result := func() _Ctype_int{ _cgo0 := /*line :2512:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :2512:53*/cPath; var _cgo2 *_Ctype_char = /*line :2512:60*/cXmlConf; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2512:76*/(flags); _cgoBase4 := /*line :2512:85*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2512:90*/_Cfunc_virDomainRestoreFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }(); result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainRestoreParams
func (c *Connect) DomainRestoreParams(params DomainSaveRestoreParams, flags DomainSaveRestoreFlags) error {
	info := getDomainSaveRestoreParametersFieldInfo(&params)
	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}

	defer ( /*line :2526:8*/_Cfunc_virTypedParamsFreeWrapper /*line :2526:34*/)(cparams, cnparams)

	var err  /*line :2528:10*/_Ctype_virError /*line :2528:20*/
	if result := func() _Ctype_int{ _cgo0 := /*line :2529:47*/c.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :2529:54*/cparams; var _cgo2 _Ctype_int = /*line :2529:63*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :2529:79*/(flags); _cgoBase4 := /*line :2529:88*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :2529:93*/_Cfunc_virDomainRestoreParamsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }(); result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-stream.html#virStreamNew
func (c *Connect) NewStream(flags StreamFlags) (*Stream, error) {
	var err  /*line :2537:10*/_Ctype_virError /*line :2537:20*/
	virStream := func() _Ctype_virStreamPtr{ _cgo0 := /*line :2538:37*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :2538:50*/(flags); _cgoBase2 := /*line :2538:59*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :2538:64*/_Cfunc_virStreamNewWrapper(_cgo0, _cgo1, _cgo2); }()
	if virStream == nil {
		return nil, makeError(&err)
	}

	return &Stream{
		ptr: virStream,
	}, nil
}

type DomainStatsState struct {
	StateSet  bool
	State     DomainState
	ReasonSet bool
	Reason    int
}

func getDomainStatsStateFieldInfo(params *DomainStatsState) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2557:3*/_Csconst_VIR_DOMAIN_STATS_STATE_STATE /*line :2557:32*/): typedParamsFieldInfo{
			set: &params.StateSet,
			i:   (*int)(unsafe.Pointer(&params.State)),
		},
		( /*line :2561:3*/_Csconst_VIR_DOMAIN_STATS_STATE_REASON /*line :2561:33*/): typedParamsFieldInfo{
			set: &params.ReasonSet,
			i:   &params.Reason,
		},
	}
}

type DomainStatsCPUCacheMonitorBank struct {
	IDSet    bool
	ID       uint
	BytesSet bool
	Bytes    uint64
}

func getDomainStatsCPUCacheMonitorBankFieldInfo(idx1, idx2 int, params *DomainStatsCPUCacheMonitorBank) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2577:15*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_PREFIX /*line :2577:57*/)+"%d"+
			( /*line :2578:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_BANK_PREFIX /*line :2578:58*/)+"%d"+
			( /*line :2579:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_BANK_SUFFIX_ID /*line :2579:61*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.IDSet,
			ui:  &params.ID,
		},
		fmt.Sprintf(( /*line :2583:15*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_PREFIX /*line :2583:57*/)+"%d"+
			( /*line :2584:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_BANK_PREFIX /*line :2584:58*/)+"%d"+
			( /*line :2585:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_BANK_SUFFIX_BYTES /*line :2585:64*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.BytesSet,
			ul:  &params.Bytes,
		},
	}
}

type domainStatsCPUCacheMonitorLengths struct {
	BankCountSet bool
	BankCount    uint
}

func getDomainStatsCPUCacheMonitorLengthsFieldInfo(idx int, params *domainStatsCPUCacheMonitorLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2599:15*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_PREFIX /*line :2599:57*/)+"%d"+
			( /*line :2600:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_BANK_COUNT /*line :2600:57*/), idx): typedParamsFieldInfo{
			set: &params.BankCountSet,
			ui:  &params.BankCount,
		},
	}
}

type DomainStatsCPUCacheMonitor struct {
	NameSet  bool
	Name     string
	VcpusSet bool
	Vcpus    string
	Banks    []DomainStatsCPUCacheMonitorBank
}

func getDomainStatsCPUCacheMonitorFieldInfo(idx int, params *DomainStatsCPUCacheMonitor) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2617:15*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_PREFIX /*line :2617:57*/)+"%d"+
			( /*line :2618:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_NAME /*line :2618:51*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :2622:15*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_PREFIX /*line :2622:57*/)+"%d"+
			( /*line :2623:4*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_SUFFIX_VCPUS /*line :2623:52*/), idx): typedParamsFieldInfo{
			set: &params.VcpusSet,
			s:   &params.Vcpus,
		},
	}
}

type domainStatsCPULengths struct {
	CacheMonitorCountSet bool
	CacheMonitorCount    uint
}

func getDomainStatsCPULengthsFieldInfo(params *domainStatsCPULengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2637:3*/_Csconst_VIR_DOMAIN_STATS_CPU_CACHE_MONITOR_COUNT /*line :2637:44*/): typedParamsFieldInfo{
			set: &params.CacheMonitorCountSet,
			ui:  &params.CacheMonitorCount,
		},
	}
}

type DomainStatsCPU struct {
	TimeSet                bool
	Time                   uint64
	UserSet                bool
	User                   uint64
	SystemSet              bool
	System                 uint64
	HaltPollSuccessTimeSet bool
	HaltPollSuccessTime    uint64
	HaltPollFailTimeSet    bool
	HaltPollFailTime       uint64
	CacheMonitors          []DomainStatsCPUCacheMonitor
}

func getDomainStatsCPUFieldInfo(params *DomainStatsCPU) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2660:3*/_Csconst_VIR_DOMAIN_STATS_CPU_TIME /*line :2660:29*/): typedParamsFieldInfo{
			set: &params.TimeSet,
			ul:  &params.Time,
		},
		( /*line :2664:3*/_Csconst_VIR_DOMAIN_STATS_CPU_USER /*line :2664:29*/): typedParamsFieldInfo{
			set: &params.UserSet,
			ul:  &params.User,
		},
		( /*line :2668:3*/_Csconst_VIR_DOMAIN_STATS_CPU_SYSTEM /*line :2668:31*/): typedParamsFieldInfo{
			set: &params.SystemSet,
			ul:  &params.System,
		},
		( /*line :2672:3*/_Csconst_VIR_DOMAIN_STATS_CPU_HALTPOLL_SUCCESS_TIME /*line :2672:46*/): typedParamsFieldInfo{
			set: &params.HaltPollSuccessTimeSet,
			ul:  &params.HaltPollSuccessTime,
		},
		( /*line :2676:3*/_Csconst_VIR_DOMAIN_STATS_CPU_HALTPOLL_FAIL_TIME /*line :2676:43*/): typedParamsFieldInfo{
			set: &params.HaltPollFailTimeSet,
			ul:  &params.HaltPollFailTime,
		},
	}
}

type DomainStatsBalloon struct {
	CurrentSet        bool
	Current           uint64
	MaximumSet        bool
	Maximum           uint64
	SwapInSet         bool
	SwapIn            uint64
	SwapOutSet        bool
	SwapOut           uint64
	MajorFaultSet     bool
	MajorFault        uint64
	MinorFaultSet     bool
	MinorFault        uint64
	UnusedSet         bool
	Unused            uint64
	AvailableSet      bool
	Available         uint64
	RssSet            bool
	Rss               uint64
	UsableSet         bool
	Usable            uint64
	LastUpdateSet     bool
	LastUpdate        uint64
	DiskCachesSet     bool
	DiskCaches        uint64
	HugetlbPgAllocSet bool
	HugetlbPgAlloc    uint64
	HugetlbPgFailSet  bool
	HugetlbPgFail     uint64
}

func getDomainStatsBalloonFieldInfo(params *DomainStatsBalloon) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :2716:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_CURRENT /*line :2716:36*/): typedParamsFieldInfo{
			set: &params.CurrentSet,
			ul:  &params.Current,
		},
		( /*line :2720:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_MAXIMUM /*line :2720:36*/): typedParamsFieldInfo{
			set: &params.MaximumSet,
			ul:  &params.Maximum,
		},
		( /*line :2724:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_SWAP_IN /*line :2724:36*/): typedParamsFieldInfo{
			set: &params.SwapInSet,
			ul:  &params.SwapIn,
		},
		( /*line :2728:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_SWAP_OUT /*line :2728:37*/): typedParamsFieldInfo{
			set: &params.SwapOutSet,
			ul:  &params.SwapOut,
		},
		( /*line :2732:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_MAJOR_FAULT /*line :2732:40*/): typedParamsFieldInfo{
			set: &params.MajorFaultSet,
			ul:  &params.MajorFault,
		},
		( /*line :2736:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_MINOR_FAULT /*line :2736:40*/): typedParamsFieldInfo{
			set: &params.MinorFaultSet,
			ul:  &params.MinorFault,
		},
		( /*line :2740:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_UNUSED /*line :2740:35*/): typedParamsFieldInfo{
			set: &params.UnusedSet,
			ul:  &params.Unused,
		},
		( /*line :2744:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_AVAILABLE /*line :2744:38*/): typedParamsFieldInfo{
			set: &params.AvailableSet,
			ul:  &params.Available,
		},
		( /*line :2748:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_RSS /*line :2748:32*/): typedParamsFieldInfo{
			set: &params.RssSet,
			ul:  &params.Rss,
		},
		( /*line :2752:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_USABLE /*line :2752:35*/): typedParamsFieldInfo{
			set: &params.UsableSet,
			ul:  &params.Usable,
		},
		( /*line :2756:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_LAST_UPDATE /*line :2756:40*/): typedParamsFieldInfo{
			set: &params.LastUpdateSet,
			ul:  &params.LastUpdate,
		},
		( /*line :2760:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_DISK_CACHES /*line :2760:40*/): typedParamsFieldInfo{
			set: &params.DiskCachesSet,
			ul:  &params.DiskCaches,
		},
		( /*line :2764:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_HUGETLB_PGALLOC /*line :2764:44*/): typedParamsFieldInfo{
			set: &params.HugetlbPgAllocSet,
			ul:  &params.HugetlbPgAlloc,
		},
		( /*line :2768:3*/_Csconst_VIR_DOMAIN_STATS_BALLOON_HUGETLB_PGFAIL /*line :2768:43*/): typedParamsFieldInfo{
			set: &params.HugetlbPgFailSet,
			ul:  &params.HugetlbPgFail,
		},
	}
}

type DomainStatsVcpu struct {
	StateSet  bool
	State     VcpuState
	TimeSet   bool
	Time      uint64
	WaitSet   bool
	Wait      uint64
	HaltedSet bool
	Halted    bool
	DelaySet  bool
	Delay     uint64
	Custom    []TypedParamValue
}

func getDomainStatsVcpuFieldInfo(idx int, params *DomainStatsVcpu) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2791:15*/_Csconst_VIR_DOMAIN_STATS_VCPU_PREFIX /*line :2791:44*/)+"%d"+
			( /*line :2792:4*/_Csconst_VIR_DOMAIN_STATS_VCPU_SUFFIX_STATE /*line :2792:39*/), idx): typedParamsFieldInfo{
			set: &params.StateSet,
			i:   (*int)(unsafe.Pointer(&params.State)),
		},
		fmt.Sprintf(( /*line :2796:15*/_Csconst_VIR_DOMAIN_STATS_VCPU_PREFIX /*line :2796:44*/)+"%d"+
			( /*line :2797:4*/_Csconst_VIR_DOMAIN_STATS_VCPU_SUFFIX_TIME /*line :2797:38*/), idx): typedParamsFieldInfo{
			set: &params.TimeSet,
			ul:  &params.Time,
		},
		fmt.Sprintf(( /*line :2801:15*/_Csconst_VIR_DOMAIN_STATS_VCPU_PREFIX /*line :2801:44*/)+"%d"+
			( /*line :2802:4*/_Csconst_VIR_DOMAIN_STATS_VCPU_SUFFIX_WAIT /*line :2802:38*/), idx): typedParamsFieldInfo{
			set: &params.WaitSet,
			ul:  &params.Wait,
		},
		fmt.Sprintf(( /*line :2806:15*/_Csconst_VIR_DOMAIN_STATS_VCPU_PREFIX /*line :2806:44*/)+"%d"+
			( /*line :2807:4*/_Csconst_VIR_DOMAIN_STATS_VCPU_SUFFIX_HALTED /*line :2807:40*/), idx): typedParamsFieldInfo{
			set: &params.HaltedSet,
			b:   &params.Halted,
		},
		fmt.Sprintf(( /*line :2811:15*/_Csconst_VIR_DOMAIN_STATS_VCPU_PREFIX /*line :2811:44*/)+"%d"+
			( /*line :2812:4*/_Csconst_VIR_DOMAIN_STATS_VCPU_SUFFIX_DELAY /*line :2812:39*/), idx): typedParamsFieldInfo{
			set: &params.DelaySet,
			ul:  &params.Delay,
		},
	}
}

type DomainStatsNet struct {
	NameSet    bool
	Name       string
	RxBytesSet bool
	RxBytes    uint64
	RxPktsSet  bool
	RxPkts     uint64
	RxErrsSet  bool
	RxErrs     uint64
	RxDropSet  bool
	RxDrop     uint64
	TxBytesSet bool
	TxBytes    uint64
	TxPktsSet  bool
	TxPkts     uint64
	TxErrsSet  bool
	TxErrs     uint64
	TxDropSet  bool
	TxDrop     uint64
}

func getDomainStatsNetFieldInfo(idx int, params *DomainStatsNet) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2842:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2842:43*/)+"%d"+
			( /*line :2843:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_NAME /*line :2843:37*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :2847:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2847:43*/)+"%d"+
			( /*line :2848:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_RX_BYTES /*line :2848:41*/), idx): typedParamsFieldInfo{
			set: &params.RxBytesSet,
			ul:  &params.RxBytes,
		},
		fmt.Sprintf(( /*line :2852:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2852:43*/)+"%d"+
			( /*line :2853:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_RX_PKTS /*line :2853:40*/), idx): typedParamsFieldInfo{
			set: &params.RxPktsSet,
			ul:  &params.RxPkts,
		},
		fmt.Sprintf(( /*line :2857:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2857:43*/)+"%d"+
			( /*line :2858:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_RX_ERRS /*line :2858:40*/), idx): typedParamsFieldInfo{
			set: &params.RxErrsSet,
			ul:  &params.RxErrs,
		},
		fmt.Sprintf(( /*line :2862:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2862:43*/)+"%d"+
			( /*line :2863:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_RX_DROP /*line :2863:40*/), idx): typedParamsFieldInfo{
			set: &params.RxDropSet,
			ul:  &params.RxDrop,
		},
		fmt.Sprintf(( /*line :2867:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2867:43*/)+"%d"+
			( /*line :2868:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_TX_BYTES /*line :2868:41*/), idx): typedParamsFieldInfo{
			set: &params.TxBytesSet,
			ul:  &params.TxBytes,
		},
		fmt.Sprintf(( /*line :2872:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2872:43*/)+"%d"+
			( /*line :2873:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_TX_PKTS /*line :2873:40*/), idx): typedParamsFieldInfo{
			set: &params.TxPktsSet,
			ul:  &params.TxPkts,
		},
		fmt.Sprintf(( /*line :2877:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2877:43*/)+"%d"+
			( /*line :2878:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_TX_ERRS /*line :2878:40*/), idx): typedParamsFieldInfo{
			set: &params.TxErrsSet,
			ul:  &params.TxErrs,
		},
		fmt.Sprintf(( /*line :2882:15*/_Csconst_VIR_DOMAIN_STATS_NET_PREFIX /*line :2882:43*/)+"%d"+
			( /*line :2883:4*/_Csconst_VIR_DOMAIN_STATS_NET_SUFFIX_TX_DROP /*line :2883:40*/), idx): typedParamsFieldInfo{
			set: &params.TxDropSet,
			ul:  &params.TxDrop,
		},
	}
}

type DomainStatsBlock struct {
	NameSet         bool
	Name            string
	BackingIndexSet bool
	BackingIndex    uint
	PathSet         bool
	Path            string
	RdReqsSet       bool
	RdReqs          uint64
	RdBytesSet      bool
	RdBytes         uint64
	RdTimesSet      bool
	RdTimes         uint64
	WrReqsSet       bool
	WrReqs          uint64
	WrBytesSet      bool
	WrBytes         uint64
	WrTimesSet      bool
	WrTimes         uint64
	FlReqsSet       bool
	FlReqs          uint64
	FlTimesSet      bool
	FlTimes         uint64
	ErrorsSet       bool
	Errors          uint64
	AllocationSet   bool
	Allocation      uint64
	CapacitySet     bool
	Capacity        uint64
	PhysicalSet     bool
	Physical        uint64
	ThresholdSet    bool
	Threshold       uint64
}

func getDomainStatsBlockFieldInfo(idx int, params *DomainStatsBlock) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :2927:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2927:45*/)+"%d"+
			( /*line :2928:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_NAME /*line :2928:39*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :2932:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2932:45*/)+"%d"+
			( /*line :2933:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_BACKINGINDEX /*line :2933:47*/), idx): typedParamsFieldInfo{
			set: &params.BackingIndexSet,
			ui:  &params.BackingIndex,
		},
		fmt.Sprintf(( /*line :2937:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2937:45*/)+"%d"+
			( /*line :2938:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_PATH /*line :2938:39*/), idx): typedParamsFieldInfo{
			set: &params.PathSet,
			s:   &params.Path,
		},
		fmt.Sprintf(( /*line :2942:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2942:45*/)+"%d"+
			( /*line :2943:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_RD_REQS /*line :2943:42*/), idx): typedParamsFieldInfo{
			set: &params.RdReqsSet,
			ul:  &params.RdReqs,
		},
		fmt.Sprintf(( /*line :2947:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2947:45*/)+"%d"+
			( /*line :2948:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_RD_BYTES /*line :2948:43*/), idx): typedParamsFieldInfo{
			set: &params.RdBytesSet,
			ul:  &params.RdBytes,
		},
		fmt.Sprintf(( /*line :2952:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2952:45*/)+"%d"+
			( /*line :2953:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_RD_TIMES /*line :2953:43*/), idx): typedParamsFieldInfo{
			set: &params.RdTimesSet,
			ul:  &params.RdTimes,
		},
		fmt.Sprintf(( /*line :2957:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2957:45*/)+"%d"+
			( /*line :2958:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_WR_REQS /*line :2958:42*/), idx): typedParamsFieldInfo{
			set: &params.WrReqsSet,
			ul:  &params.WrReqs,
		},
		fmt.Sprintf(( /*line :2962:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2962:45*/)+"%d"+
			( /*line :2963:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_WR_BYTES /*line :2963:43*/), idx): typedParamsFieldInfo{
			set: &params.WrBytesSet,
			ul:  &params.WrBytes,
		},
		fmt.Sprintf(( /*line :2967:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2967:45*/)+"%d"+
			( /*line :2968:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_WR_TIMES /*line :2968:43*/), idx): typedParamsFieldInfo{
			set: &params.WrTimesSet,
			ul:  &params.WrTimes,
		},
		fmt.Sprintf(( /*line :2972:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2972:45*/)+"%d"+
			( /*line :2973:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_FL_REQS /*line :2973:42*/), idx): typedParamsFieldInfo{
			set: &params.FlReqsSet,
			ul:  &params.FlReqs,
		},
		fmt.Sprintf(( /*line :2977:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2977:45*/)+"%d"+
			( /*line :2978:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_FL_TIMES /*line :2978:43*/), idx): typedParamsFieldInfo{
			set: &params.FlTimesSet,
			ul:  &params.FlTimes,
		},
		fmt.Sprintf(( /*line :2982:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2982:45*/)+"%d"+
			( /*line :2983:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_ERRORS /*line :2983:41*/), idx): typedParamsFieldInfo{
			set: &params.ErrorsSet,
			ul:  &params.Errors,
		},
		fmt.Sprintf(( /*line :2987:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2987:45*/)+"%d"+
			( /*line :2988:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_ALLOCATION /*line :2988:45*/), idx): typedParamsFieldInfo{
			set: &params.AllocationSet,
			ul:  &params.Allocation,
		},
		fmt.Sprintf(( /*line :2992:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2992:45*/)+"%d"+
			( /*line :2993:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_CAPACITY /*line :2993:43*/), idx): typedParamsFieldInfo{
			set: &params.CapacitySet,
			ul:  &params.Capacity,
		},
		fmt.Sprintf(( /*line :2997:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :2997:45*/)+"%d"+
			( /*line :2998:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_PHYSICAL /*line :2998:43*/), idx): typedParamsFieldInfo{
			set: &params.PhysicalSet,
			ul:  &params.Physical,
		},
		fmt.Sprintf(( /*line :3002:15*/_Csconst_VIR_DOMAIN_STATS_BLOCK_PREFIX /*line :3002:45*/)+"%d"+
			( /*line :3003:4*/_Csconst_VIR_DOMAIN_STATS_BLOCK_SUFFIX_THRESHOLD /*line :3003:44*/), idx): typedParamsFieldInfo{
			set: &params.ThresholdSet,
			ul:  &params.Threshold,
		},
	}
}

type DomainStatsPerf struct {
	CmtSet                   bool
	Cmt                      uint64
	MbmtSet                  bool
	Mbmt                     uint64
	MbmlSet                  bool
	Mbml                     uint64
	CacheMissesSet           bool
	CacheMisses              uint64
	CacheReferencesSet       bool
	CacheReferences          uint64
	InstructionsSet          bool
	Instructions             uint64
	CpuCyclesSet             bool
	CpuCycles                uint64
	BranchInstructionsSet    bool
	BranchInstructions       uint64
	BranchMissesSet          bool
	BranchMisses             uint64
	BusCyclesSet             bool
	BusCycles                uint64
	StalledCyclesFrontendSet bool
	StalledCyclesFrontend    uint64
	StalledCyclesBackendSet  bool
	StalledCyclesBackend     uint64
	RefCpuCyclesSet          bool
	RefCpuCycles             uint64
	CpuClockSet              bool
	CpuClock                 uint64
	TaskClockSet             bool
	TaskClock                uint64
	PageFaultsSet            bool
	PageFaults               uint64
	ContextSwitchesSet       bool
	ContextSwitches          uint64
	CpuMigrationsSet         bool
	CpuMigrations            uint64
	PageFaultsMinSet         bool
	PageFaultsMin            uint64
	PageFaultsMajSet         bool
	PageFaultsMaj            uint64
	AlignmentFaultsSet       bool
	AlignmentFaults          uint64
	EmulationFaultsSet       bool
	EmulationFaults          uint64
}

func getDomainStatsPerfFieldInfo(params *DomainStatsPerf) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3059:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CMT /*line :3059:29*/): typedParamsFieldInfo{
			set: &params.CmtSet,
			ul:  &params.Cmt,
		},
		( /*line :3063:3*/_Csconst_VIR_DOMAIN_STATS_PERF_MBMT /*line :3063:30*/): typedParamsFieldInfo{
			set: &params.MbmtSet,
			ul:  &params.Mbmt,
		},
		( /*line :3067:3*/_Csconst_VIR_DOMAIN_STATS_PERF_MBML /*line :3067:30*/): typedParamsFieldInfo{
			set: &params.MbmlSet,
			ul:  &params.Mbml,
		},
		( /*line :3071:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CACHE_MISSES /*line :3071:38*/): typedParamsFieldInfo{
			set: &params.CacheMissesSet,
			ul:  &params.CacheMisses,
		},
		( /*line :3075:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CACHE_REFERENCES /*line :3075:42*/): typedParamsFieldInfo{
			set: &params.CacheReferencesSet,
			ul:  &params.CacheReferences,
		},
		( /*line :3079:3*/_Csconst_VIR_DOMAIN_STATS_PERF_INSTRUCTIONS /*line :3079:38*/): typedParamsFieldInfo{
			set: &params.InstructionsSet,
			ul:  &params.Instructions,
		},
		( /*line :3083:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CPU_CYCLES /*line :3083:36*/): typedParamsFieldInfo{
			set: &params.CpuCyclesSet,
			ul:  &params.CpuCycles,
		},
		( /*line :3087:3*/_Csconst_VIR_DOMAIN_STATS_PERF_BRANCH_INSTRUCTIONS /*line :3087:45*/): typedParamsFieldInfo{
			set: &params.BranchInstructionsSet,
			ul:  &params.BranchInstructions,
		},
		( /*line :3091:3*/_Csconst_VIR_DOMAIN_STATS_PERF_BRANCH_MISSES /*line :3091:39*/): typedParamsFieldInfo{
			set: &params.BranchMissesSet,
			ul:  &params.BranchMisses,
		},
		( /*line :3095:3*/_Csconst_VIR_DOMAIN_STATS_PERF_BUS_CYCLES /*line :3095:36*/): typedParamsFieldInfo{
			set: &params.BusCyclesSet,
			ul:  &params.BusCycles,
		},
		( /*line :3099:3*/_Csconst_VIR_DOMAIN_STATS_PERF_STALLED_CYCLES_FRONTEND /*line :3099:49*/): typedParamsFieldInfo{
			set: &params.StalledCyclesFrontendSet,
			ul:  &params.StalledCyclesFrontend,
		},
		( /*line :3103:3*/_Csconst_VIR_DOMAIN_STATS_PERF_STALLED_CYCLES_BACKEND /*line :3103:48*/): typedParamsFieldInfo{
			set: &params.StalledCyclesBackendSet,
			ul:  &params.StalledCyclesBackend,
		},
		( /*line :3107:3*/_Csconst_VIR_DOMAIN_STATS_PERF_REF_CPU_CYCLES /*line :3107:40*/): typedParamsFieldInfo{
			set: &params.RefCpuCyclesSet,
			ul:  &params.RefCpuCycles,
		},
		( /*line :3111:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CPU_CLOCK /*line :3111:35*/): typedParamsFieldInfo{
			set: &params.CpuClockSet,
			ul:  &params.CpuClock,
		},
		( /*line :3115:3*/_Csconst_VIR_DOMAIN_STATS_PERF_TASK_CLOCK /*line :3115:36*/): typedParamsFieldInfo{
			set: &params.TaskClockSet,
			ul:  &params.TaskClock,
		},
		( /*line :3119:3*/_Csconst_VIR_DOMAIN_STATS_PERF_PAGE_FAULTS /*line :3119:37*/): typedParamsFieldInfo{
			set: &params.PageFaultsSet,
			ul:  &params.PageFaults,
		},
		( /*line :3123:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CONTEXT_SWITCHES /*line :3123:42*/): typedParamsFieldInfo{
			set: &params.ContextSwitchesSet,
			ul:  &params.ContextSwitches,
		},
		( /*line :3127:3*/_Csconst_VIR_DOMAIN_STATS_PERF_CPU_MIGRATIONS /*line :3127:40*/): typedParamsFieldInfo{
			set: &params.CpuMigrationsSet,
			ul:  &params.CpuMigrations,
		},
		( /*line :3131:3*/_Csconst_VIR_DOMAIN_STATS_PERF_PAGE_FAULTS_MIN /*line :3131:41*/): typedParamsFieldInfo{
			set: &params.PageFaultsMinSet,
			ul:  &params.PageFaultsMin,
		},
		( /*line :3135:3*/_Csconst_VIR_DOMAIN_STATS_PERF_PAGE_FAULTS_MAJ /*line :3135:41*/): typedParamsFieldInfo{
			set: &params.PageFaultsMajSet,
			ul:  &params.PageFaultsMaj,
		},
		( /*line :3139:3*/_Csconst_VIR_DOMAIN_STATS_PERF_ALIGNMENT_FAULTS /*line :3139:42*/): typedParamsFieldInfo{
			set: &params.AlignmentFaultsSet,
			ul:  &params.AlignmentFaults,
		},
		( /*line :3143:3*/_Csconst_VIR_DOMAIN_STATS_PERF_EMULATION_FAULTS /*line :3143:42*/): typedParamsFieldInfo{
			set: &params.EmulationFaultsSet,
			ul:  &params.EmulationFaults,
		},
	}
}

type DomainStatsMemory struct {
	BandwidthMonitor []DomainStatsMemoryBandwidthMonitor
}

type DomainStatsMemoryBandwidthMonitor struct {
	NameSet  bool
	Name     string
	VCPUsSet bool
	VCPUs    string
	Nodes    []DomainStatsMemoryBandwidthMonitorNode
}

func getDomainStatsMemoryBandwidthMonitorFieldInfo(idx int, params *DomainStatsMemoryBandwidthMonitor) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :3164:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3164:64*/)+"%d"+
			( /*line :3165:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NAME /*line :3165:58*/), idx): typedParamsFieldInfo{
			set: &params.NameSet,
			s:   &params.Name,
		},
		fmt.Sprintf(( /*line :3169:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3169:64*/)+"%d"+
			( /*line :3170:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_VCPUS /*line :3170:59*/), idx): typedParamsFieldInfo{
			set: &params.VCPUsSet,
			s:   &params.VCPUs,
		},
	}
}

type domainStatsMemoryBandwidthMonitorLengths struct {
	NodeCountSet bool
	NodeCount    uint
}

func getDomainStatsMemoryBandwidthMonitorLengthsFieldInfo(idx int, params *domainStatsMemoryBandwidthMonitorLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :3184:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3184:64*/)+"%d"+
			( /*line :3185:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_COUNT /*line :3185:64*/), idx): typedParamsFieldInfo{
			set: &params.NodeCountSet,
			ui:  &params.NodeCount,
		},
	}
}

type DomainStatsMemoryBandwidthMonitorNode struct {
	IDSet         bool
	ID            uint
	BytesLocalSet bool
	BytesLocal    uint64
	BytesTotalSet bool
	BytesTotal    uint64
}

func getDomainStatsMemoryBandwidthMonitorNodeFieldInfo(idx1, idx2 int, params *DomainStatsMemoryBandwidthMonitorNode) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :3203:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3203:64*/)+"%d"+
			( /*line :3204:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_PREFIX /*line :3204:65*/)+"%d"+
			( /*line :3205:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_SUFFIX_ID /*line :3205:68*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.IDSet,
			ui:  &params.ID,
		},
		fmt.Sprintf(( /*line :3209:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3209:64*/)+"%d"+
			( /*line :3210:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_PREFIX /*line :3210:65*/)+"%d"+
			( /*line :3211:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_SUFFIX_BYTES_LOCAL /*line :3211:77*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.BytesLocalSet,
			ul:  &params.BytesLocal,
		},
		fmt.Sprintf(( /*line :3215:15*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_PREFIX /*line :3215:64*/)+"%d"+
			( /*line :3216:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_PREFIX /*line :3216:65*/)+"%d"+
			( /*line :3217:4*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_SUFFIX_NODE_SUFFIX_BYTES_TOTAL /*line :3217:77*/), idx1, idx2): typedParamsFieldInfo{
			set: &params.BytesTotalSet,
			ul:  &params.BytesTotal,
		},
	}
}

type DomainStatsDirtyRateVCPU struct {
	MegabytesPerSecondSet bool
	MegabytesPerSecond    int64
}

func getDomainStatsDirtyRateVCPUFieldInfo(idx int, params *DomainStatsDirtyRateVCPU) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :3231:15*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_VCPU_PREFIX /*line :3231:54*/)+"%d"+
			( /*line :3232:4*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_VCPU_SUFFIX_MEGABYTES_PER_SECOND /*line :3232:64*/), idx): typedParamsFieldInfo{
			set: &params.MegabytesPerSecondSet,
			l:   &params.MegabytesPerSecond,
		},
	}
}

type DomainStatsDirtyRate struct {
	CalcStatusSet         bool
	CalcStatus            int
	CalcStartTimeSet      bool
	CalcStartTime         int64
	CalcPeriodSet         bool
	CalcPeriod            int
	MegabytesPerSecondSet bool
	MegabytesPerSecond    int64
	CalcModeSet           bool
	CalcMode              string
	VCPUS                 []DomainStatsDirtyRateVCPU
}

func getDomainStatsDirtyRateFieldInfo(params *DomainStatsDirtyRate) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3255:3*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_CALC_STATUS /*line :3255:42*/): typedParamsFieldInfo{
			set: &params.CalcStatusSet,
			i:   &params.CalcStatus,
		},
		( /*line :3259:3*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_CALC_START_TIME /*line :3259:46*/): typedParamsFieldInfo{
			set: &params.CalcStartTimeSet,
			l:   &params.CalcStartTime,
		},
		( /*line :3263:3*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_CALC_PERIOD /*line :3263:42*/): typedParamsFieldInfo{
			set: &params.CalcPeriodSet,
			i:   &params.CalcPeriod,
		},
		( /*line :3267:3*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_MEGABYTES_PER_SECOND /*line :3267:51*/): typedParamsFieldInfo{
			set: &params.MegabytesPerSecondSet,
			l:   &params.MegabytesPerSecond,
		},
		( /*line :3271:3*/_Csconst_VIR_DOMAIN_STATS_DIRTYRATE_CALC_MODE /*line :3271:40*/): typedParamsFieldInfo{
			set: &params.CalcModeSet,
			s:   &params.CalcMode,
		},
	}
}

type DomainStatsIOThread struct {
	PollMaxNSSet  bool
	PollMaxNS     uint64
	PollGrowSet   bool
	PollGrow      uint
	PollGrow64    uint64
	PollShrinkSet bool
	PollShrink    uint
	PollShrink64  uint64
}

func getDomainStatsIOThreadFieldInfo(idx int, params *DomainStatsIOThread) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		fmt.Sprintf(( /*line :3291:15*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_PREFIX /*line :3291:48*/)+"%d"+
			( /*line :3292:4*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_SUFFIX_POLL_MAX_NS /*line :3292:49*/), idx): typedParamsFieldInfo{
			set: &params.PollMaxNSSet,
			ul:  &params.PollMaxNS,
		},
		fmt.Sprintf(( /*line :3296:15*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_PREFIX /*line :3296:48*/)+"%d"+
			( /*line :3297:4*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_SUFFIX_POLL_GROW /*line :3297:47*/), idx): typedParamsFieldInfo{
			set: &params.PollGrowSet,
			ui:  &params.PollGrow,
			ul:  &params.PollGrow64,
		},
		fmt.Sprintf(( /*line :3302:15*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_PREFIX /*line :3302:48*/)+"%d"+
			( /*line :3303:4*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_SUFFIX_POLL_SHRINK /*line :3303:49*/), idx): typedParamsFieldInfo{
			set: &params.PollShrinkSet,
			ui:  &params.PollShrink,
			ul:  &params.PollShrink64,
		},
	}
}

type DomainStats struct {
	Domain    *Domain
	State     *DomainStatsState
	Cpu       *DomainStatsCPU
	Balloon   *DomainStatsBalloon
	Vcpu      []DomainStatsVcpu
	Net       []DomainStatsNet
	Block     []DomainStatsBlock
	Perf      *DomainStatsPerf
	Memory    *DomainStatsMemory
	DirtyRate *DomainStatsDirtyRate
	VM        []TypedParamValue
	IOThread  []DomainStatsIOThread
}

type domainStatsLengths struct {
	VcpuCurrentSet    bool
	VcpuCurrent       uint
	VcpuMaximumSet    bool
	VcpuMaximum       uint
	NetCountSet       bool
	NetCount          uint
	BlockCountSet     bool
	BlockCount        uint
	BandwidthCountSet bool
	BandwidthCount    uint
	IOThreadCountSet  bool
	IOThreadCount     uint
}

func getDomainStatsLengthsFieldInfo(params *domainStatsLengths) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3343:3*/_Csconst_VIR_DOMAIN_STATS_VCPU_CURRENT /*line :3343:33*/): typedParamsFieldInfo{
			set: &params.VcpuCurrentSet,
			ui:  &params.VcpuCurrent,
		},
		( /*line :3347:3*/_Csconst_VIR_DOMAIN_STATS_VCPU_MAXIMUM /*line :3347:33*/): typedParamsFieldInfo{
			set: &params.VcpuMaximumSet,
			ui:  &params.VcpuMaximum,
		},
		( /*line :3351:3*/_Csconst_VIR_DOMAIN_STATS_NET_COUNT /*line :3351:30*/): typedParamsFieldInfo{
			set: &params.NetCountSet,
			ui:  &params.NetCount,
		},
		( /*line :3355:3*/_Csconst_VIR_DOMAIN_STATS_BLOCK_COUNT /*line :3355:32*/): typedParamsFieldInfo{
			set: &params.BlockCountSet,
			ui:  &params.BlockCount,
		},
		( /*line :3359:3*/_Csconst_VIR_DOMAIN_STATS_MEMORY_BANDWIDTH_MONITOR_COUNT /*line :3359:51*/): typedParamsFieldInfo{
			set: &params.BandwidthCountSet,
			ui:  &params.BandwidthCount,
		},
		( /*line :3363:3*/_Csconst_VIR_DOMAIN_STATS_IOTHREAD_COUNT /*line :3363:35*/): typedParamsFieldInfo{
			set: &params.IOThreadCountSet,
			ui:  &params.IOThreadCount,
		},
	}
}

func filterCustomStats(key string) bool {
	if !strings.HasSuffix(key, ( /*line :3371:29*/_Csconst_VIR_DOMAIN_STATS_CUSTOM_SUFFIX_TYPE_CUR /*line :3371:69*/)) &&
		!strings.HasSuffix(key, ( /*line :3372:27*/_Csconst_VIR_DOMAIN_STATS_CUSTOM_SUFFIX_TYPE_MAX /*line :3372:67*/)) &&
		!strings.HasSuffix(key, ( /*line :3373:27*/_Csconst_VIR_DOMAIN_STATS_CUSTOM_SUFFIX_TYPE_SUM /*line :3373:67*/)) {
		return false
	}
	return true
}

// See also https://libvirt.org/html/libvirt-libvirt-domain.html#virConnectGetAllDomainStats
//
// Note that each struct element in the returned 'DomainStats'
// array will contain a pointer to a 'Domain' object which
// holds a new reference. This pointer may or may not be the
// same as any pointers passed into the 'doms' parameter, but
// will at least refer to the same libvirt object.
//
// The caller must invoke 'Free' on the 'Domain' object in
// each array element, in order to release the references.
func (c *Connect) GetAllDomainStats(doms []*Domain, statsTypes DomainStatsTypes, flags ConnectGetAllDomainStatsFlags) ([]DomainStats, error) {
	var ret  /*line :3390:10*/_Ctype_int /*line :3390:15*/
	var cstats * /*line :3391:14*/_Ctype_virDomainStatsRecordPtr /*line :3391:39*/
	var err  /*line :3392:10*/_Ctype_virError /*line :3392:20*/
	if len(doms) > 0 {
		cdoms := make([] /*line :3394:19*/_Ctype_virDomainPtr /*line :3394:33*/, len(doms)+1)
		for i := 0; i < len(doms); i++ {
			cdoms[i] = doms[i].ptr
		}

		ret = func() _Ctype_int{ _cgoIndex0 := &/*line :3399:41*/cdoms; _cgo0 := /*line :3399:40*/&(*_cgoIndex0)[0]; var _cgo1 _Ctype_uint = _Ctype_uint /*line :3399:57*/(statsTypes); _cgoBase2 := /*line :3399:71*/&cstats; _cgo2 := _cgoBase2; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3399:86*/(flags); _cgoBase4 := /*line :3399:95*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, *_cgoIndex0); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3399:100*/_Cfunc_virDomainListGetStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	} else {
		ret = func() _Ctype_int{ _cgo0 := /*line :3401:46*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :3401:59*/(statsTypes); _cgoBase2 := /*line :3401:73*/&cstats; _cgo2 := _cgoBase2; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3401:88*/(flags); _cgoBase4 := /*line :3401:97*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3401:102*/_Cfunc_virConnectGetAllDomainStatsWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	}
	if ret == -1 {
		return []DomainStats{}, makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :3407:46*/cstats; return func() { _cgoCheckPointer(_cgo0, nil); /*line :3407:53*/_Cfunc_virDomainStatsRecordListFreeWrapper(_cgo0); }}()()

	stats := make([]DomainStats, ret)
	for i := 0; i < int(ret); i++ {
		cdomstats := *(* /*line :3411:19*/_Ctype_virDomainStatsRecordPtr /*line :3411:44*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cstats)) + (unsafe.Sizeof(*cstats) * uintptr(i))))

		domstats := DomainStats{
			Domain: &Domain{ptr: cdomstats.dom},
		}

		state := &DomainStatsState{}
		stateInfo := getDomainStatsStateFieldInfo(state)

		count, gerr := typedParamsUnpack(cdomstats.params, cdomstats.nparams, stateInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}
		if count != 0 {
			domstats.State = state
		}

		cpu := &DomainStatsCPU{}
		cpuInfo := getDomainStatsCPUFieldInfo(cpu)

		count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, cpuInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}
		if count != 0 {
			domstats.Cpu = cpu
		}

		cpuLengths := domainStatsCPULengths{}
		cpuLengthsInfo := getDomainStatsCPULengthsFieldInfo(&cpuLengths)

		_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, cpuLengthsInfo)
		if gerr != nil {
			return nil, gerr
		}

		if cpuLengths.CacheMonitorCountSet && cpuLengths.CacheMonitorCount > 0 {
			cpu.CacheMonitors = make([]DomainStatsCPUCacheMonitor, cpuLengths.CacheMonitorCount)
			for i := 0; i < int(cpuLengths.CacheMonitorCount); i++ {
				cpuCacheInfo := getDomainStatsCPUCacheMonitorFieldInfo(i, &cpu.CacheMonitors[i])

				_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, cpuCacheInfo)
				if gerr != nil {
					return nil, gerr
				}

				cpuCacheMonitorLengths := domainStatsCPUCacheMonitorLengths{}
				cpuCacheMonitorLengthsInfo := getDomainStatsCPUCacheMonitorLengthsFieldInfo(i, &cpuCacheMonitorLengths)

				_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, cpuCacheMonitorLengthsInfo)
				if gerr != nil {
					return nil, gerr
				}

				if cpuCacheMonitorLengths.BankCountSet && cpuCacheMonitorLengths.BankCount > 0 {
					cpu.CacheMonitors[i].Banks = make([]DomainStatsCPUCacheMonitorBank, cpuCacheMonitorLengths.BankCount)
					for j := 0; j < int(cpuCacheMonitorLengths.BankCount); j++ {
						cpuCacheBankInfo := getDomainStatsCPUCacheMonitorBankFieldInfo(i, j, &cpu.CacheMonitors[i].Banks[j])

						_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, cpuCacheBankInfo)
						if gerr != nil {
							return nil, gerr
						}
					}
				}

			}
		}

		balloon := &DomainStatsBalloon{}
		balloonInfo := getDomainStatsBalloonFieldInfo(balloon)

		count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, balloonInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}
		if count != 0 {
			domstats.Balloon = balloon
		}

		perf := &DomainStatsPerf{}
		perfInfo := getDomainStatsPerfFieldInfo(perf)

		count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, perfInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}
		if count != 0 {
			domstats.Perf = perf
		}

		lengths := domainStatsLengths{}
		lengthsInfo := getDomainStatsLengthsFieldInfo(&lengths)

		count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, lengthsInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}

		if !lengths.VcpuMaximumSet && lengths.VcpuCurrentSet {
			lengths.VcpuMaximum = lengths.VcpuCurrent
		}

		if lengths.VcpuMaximum > 0 {

			domstats.Vcpu = make([]DomainStatsVcpu, lengths.VcpuMaximum)
			for j := 0; j < int(lengths.VcpuMaximum); j++ {
				vcpu := DomainStatsVcpu{}
				vcpuInfo := getDomainStatsVcpuFieldInfo(j, &vcpu)

				count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, vcpuInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}
				if count == 0 {
					vcpu.StateSet = true
					vcpu.State = VCPU_OFFLINE
				}

				vcpu.Custom, gerr = typedParamsUnpackRaw(
					fmt.Sprintf("vcpu.%d.", j), filterCustomStats,
					cdomstats.params, cdomstats.nparams)
				if gerr != nil {
					return []DomainStats{}, gerr
				}

				domstats.Vcpu[j] = vcpu
			}
		}

		if lengths.BlockCountSet && lengths.BlockCount > 0 {
			domstats.Block = make([]DomainStatsBlock, lengths.BlockCount)
			for j := 0; j < int(lengths.BlockCount); j++ {
				block := DomainStatsBlock{}
				blockInfo := getDomainStatsBlockFieldInfo(j, &block)

				count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, blockInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}
				if count != 0 {
					domstats.Block[j] = block
				}
			}
		}

		if lengths.NetCountSet && lengths.NetCount > 0 {
			domstats.Net = make([]DomainStatsNet, lengths.NetCount)
			for j := 0; j < int(lengths.NetCount); j++ {
				net := DomainStatsNet{}
				netInfo := getDomainStatsNetFieldInfo(j, &net)

				count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, netInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}
				if count != 0 {
					domstats.Net[j] = net
				}
			}
		}

		if lengths.BandwidthCountSet && lengths.BandwidthCount > 0 {
			domstats.Memory = &DomainStatsMemory{
				BandwidthMonitor: make([]DomainStatsMemoryBandwidthMonitor, lengths.BandwidthCount),
			}

			for j := 0; j < int(lengths.BandwidthCount); j++ {
				bwmon := DomainStatsMemoryBandwidthMonitor{}

				bwmonInfo := getDomainStatsMemoryBandwidthMonitorFieldInfo(j, &bwmon)

				_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, bwmonInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}

				bwmonlen := domainStatsMemoryBandwidthMonitorLengths{}

				bwmonlenInfo := getDomainStatsMemoryBandwidthMonitorLengthsFieldInfo(j, &bwmonlen)

				_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, bwmonlenInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}

				if bwmonlen.NodeCountSet && bwmonlen.NodeCount > 0 {
					bwmon.Nodes = make([]DomainStatsMemoryBandwidthMonitorNode, bwmonlen.NodeCount)
					for k := 0; k < int(bwmonlen.NodeCount); k++ {
						bwmonnode := DomainStatsMemoryBandwidthMonitorNode{}

						bwmonnodeInfo := getDomainStatsMemoryBandwidthMonitorNodeFieldInfo(j, k, &bwmonnode)

						_, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, bwmonnodeInfo)
						if gerr != nil {
							return []DomainStats{}, gerr
						}

						bwmon.Nodes[k] = bwmonnode
					}
				}

				domstats.Memory.BandwidthMonitor[j] = bwmon
			}
		}

		dirtyrate := &DomainStatsDirtyRate{}
		dirtyrateInfo := getDomainStatsDirtyRateFieldInfo(dirtyrate)

		count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, dirtyrateInfo)
		if gerr != nil {
			return []DomainStats{}, gerr
		}
		if count != 0 {
			domstats.DirtyRate = dirtyrate
		}

		vcpuCount, gerr := domstats.Domain.GetVcpusFlags(DOMAIN_VCPU_MAXIMUM)
		if vcpuCount > 0 {
			dirtyrate.VCPUS = make([]DomainStatsDirtyRateVCPU, count)
			for j := 0; j < int(vcpuCount); j++ {
				vcpu := DomainStatsDirtyRateVCPU{}
				vcpuInfo := getDomainStatsDirtyRateVCPUFieldInfo(j, &vcpu)

				count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, vcpuInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}
				if count != 0 {
					dirtyrate.VCPUS[j] = vcpu
				}
			}
		}

		if lengths.IOThreadCountSet && lengths.IOThreadCount > 0 {
			domstats.IOThread = make([]DomainStatsIOThread, lengths.IOThreadCount)
			for j := 0; j < int(lengths.IOThreadCount); j++ {
				block := DomainStatsIOThread{}
				blockInfo := getDomainStatsIOThreadFieldInfo(j, &block)

				count, gerr = typedParamsUnpack(cdomstats.params, cdomstats.nparams, blockInfo)
				if gerr != nil {
					return []DomainStats{}, gerr
				}
				if count != 0 {
					domstats.IOThread[j] = block
				}
			}
		}

		domstats.VM, gerr = typedParamsUnpackRaw(( /*line :3661:44*/_Csconst_VIR_DOMAIN_STATS_VM_PREFIX /*line :3661:71*/),
			filterCustomStats, cdomstats.params, cdomstats.nparams)
		if gerr != nil {
			return []DomainStats{}, gerr
		}

		stats[i] = domstats
	}

	for i := 0; i < len(stats); i++ {
		ret = func() _Ctype_int{ _cgo0 := /*line :3671:31*/stats[i].Domain.ptr; _cgoBase1 := /*line :3671:52*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :3671:57*/_Cfunc_virDomainRefWrapper(_cgo0, _cgo1); }()
		if ret < 0 {
			return []DomainStats{}, makeError(&err)
		}
	}

	return stats, nil
}

type NodeSEVParameters struct {
	PDHSet             bool
	PDH                string
	CertChainSet       bool
	CertChain          string
	CBitPosSet         bool
	CBitPos            uint
	ReducedPhysBitsSet bool
	ReducedPhysBits    uint
	MaxGuestsSet       bool
	MaxGuests          uint
	MaxEsGuestsSet     bool
	MaxEsGuests        uint
	CPU0IDSet          bool
	CPU0ID             string
}

func getNodeSEVFieldInfo(params *NodeSEVParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :3699:3*/_Csconst_VIR_NODE_SEV_PDH /*line :3699:20*/): typedParamsFieldInfo{
			set: &params.PDHSet,
			s:   &params.PDH,
		},
		( /*line :3703:3*/_Csconst_VIR_NODE_SEV_CERT_CHAIN /*line :3703:27*/): typedParamsFieldInfo{
			set: &params.CertChainSet,
			s:   &params.CertChain,
		},
		( /*line :3707:3*/_Csconst_VIR_NODE_SEV_CBITPOS /*line :3707:24*/): typedParamsFieldInfo{
			set: &params.CBitPosSet,
			ui:  &params.CBitPos,
		},
		( /*line :3711:3*/_Csconst_VIR_NODE_SEV_REDUCED_PHYS_BITS /*line :3711:34*/): typedParamsFieldInfo{
			set: &params.ReducedPhysBitsSet,
			ui:  &params.ReducedPhysBits,
		},
		( /*line :3715:3*/_Csconst_VIR_NODE_SEV_MAX_GUESTS /*line :3715:27*/): typedParamsFieldInfo{
			set: &params.MaxGuestsSet,
			ui:  &params.MaxGuests,
		},
		( /*line :3719:3*/_Csconst_VIR_NODE_SEV_MAX_ES_GUESTS /*line :3719:30*/): typedParamsFieldInfo{
			set: &params.MaxEsGuestsSet,
			ui:  &params.MaxEsGuests,
		},
		( /*line :3723:3*/_Csconst_VIR_NODE_SEV_CPU0_ID /*line :3723:24*/): typedParamsFieldInfo{
			set: &params.CPU0IDSet,
			s:   &params.CPU0ID,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-host.html#virNodeGetSEVInfo
func (c *Connect) GetSEVInfo(flags uint32) (*NodeSEVParameters, error) {
	params := &NodeSEVParameters{}
	info := getNodeSEVFieldInfo(params)

	var cparams * /*line :3735:15*/_Ctype_virTypedParameter /*line :3735:34*/
	var cnparams  /*line :3736:15*/_Ctype_int /*line :3736:20*/

	var err  /*line :3738:10*/_Ctype_virError /*line :3738:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :3739:36*/c.ptr; _cgoBase1 := /*line :3739:84*/&cparams; _cgo1 := /*line :3739:43*/(*_Ctype_virTypedParameterPtr /*line :3739:67*/)(unsafe.Pointer(_cgoBase1)); var _cgo2 *_Ctype_int = /*line :3739:96*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :3739:113*/(flags); _cgoBase4 := /*line :3739:122*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :3739:127*/_Cfunc_virNodeGetSEVInfoWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :3744:8*/_Cfunc_virTypedParamsFreeWrapper /*line :3744:34*/)(cparams, cnparams)

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterBindingCreateXML
func (c *Connect) NWFilterBindingCreateXML(xmlConfig string, flags NWFilterBindingCreateFlags) (*NWFilterBinding, error) {
	cXml := ( /*line :3756:10*/_Cfunc_CString /*line :3756:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :3757:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3757:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :3758:10*/_Ctype_virError /*line :3758:20*/
	ptr := func() _Ctype_virNWFilterBindingPtr{ _cgo0 := /*line :3759:46*/c.ptr; var _cgo1 *_Ctype_char = /*line :3759:53*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :3759:65*/(flags); _cgoBase3 := /*line :3759:74*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :3759:79*/_Cfunc_virNWFilterBindingCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &NWFilterBinding{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virConnectGetStoragePoolCapabilities
func (c *Connect) GetStoragePoolCapabilities(flags uint32) (string, error) {
	var err  /*line :3768:10*/_Ctype_virError /*line :3768:20*/
	ret := func() *_Ctype_char{ _cgo0 := /*line :3769:55*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :3769:68*/(flags); _cgoBase2 := /*line :3769:77*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :3769:82*/_Cfunc_virConnectGetStoragePoolCapabilitiesWrapper(_cgo0, _cgo1, _cgo2); }()
	if ret == nil {
		return "", makeError(&err)
	}

	defer func() func() { _cgo0 := /*line :3774:15*/unsafe.Pointer(ret); return func() { _cgoCheckPointer(_cgo0, nil); /*line :3774:35*/_Cfunc_free(_cgo0); }}()()

	return ( /*line :3776:9*/_Cfunc_GoString /*line :3776:18*/)(ret), nil
}
