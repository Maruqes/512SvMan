// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/node_device.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type NodeDeviceEventID int

const (
	NODE_DEVICE_EVENT_ID_LIFECYCLE = NodeDeviceEventID(( /*line :45:53*/_Ciconst_VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE /*line :45:88*/))
	NODE_DEVICE_EVENT_ID_UPDATE    = NodeDeviceEventID(( /*line :46:53*/_Ciconst_VIR_NODE_DEVICE_EVENT_ID_UPDATE /*line :46:85*/))
)

type NodeDeviceEventLifecycleType int

const (
	NODE_DEVICE_EVENT_CREATED   = NodeDeviceEventLifecycleType(( /*line :52:61*/_Ciconst_VIR_NODE_DEVICE_EVENT_CREATED /*line :52:91*/))
	NODE_DEVICE_EVENT_DELETED   = NodeDeviceEventLifecycleType(( /*line :53:61*/_Ciconst_VIR_NODE_DEVICE_EVENT_DELETED /*line :53:91*/))
	NODE_DEVICE_EVENT_DEFINED   = NodeDeviceEventLifecycleType(( /*line :54:61*/_Ciconst_VIR_NODE_DEVICE_EVENT_DEFINED /*line :54:91*/))
	NODE_DEVICE_EVENT_UNDEFINED = NodeDeviceEventLifecycleType(( /*line :55:61*/_Ciconst_VIR_NODE_DEVICE_EVENT_UNDEFINED /*line :55:93*/))
)

type NodeDeviceCreateXMLFlags int

const (
	NODE_DEVICE_CREATE_XML_VALIDATE = NodeDeviceCreateXMLFlags(( /*line :61:61*/_Ciconst_VIR_NODE_DEVICE_CREATE_XML_VALIDATE /*line :61:97*/))
)

type NodeDeviceDefineXMLFlags int

const (
	NODE_DEVICE_DEFINE_XML_VALIDATE = NodeDeviceDefineXMLFlags(( /*line :67:61*/_Ciconst_VIR_NODE_DEVICE_DEFINE_XML_VALIDATE /*line :67:97*/))
)

type NodeDeviceXMLFlags int

const (
	NODE_DEVICE_XML_INACTIVE = NodeDeviceXMLFlags(( /*line :73:48*/_Ciconst_VIR_NODE_DEVICE_XML_INACTIVE /*line :73:77*/))
)

type NodeDeviceUpdateFlags int

const (
	NODE_DEVICE_UPDATE_AFFECT_CURRENT = NodeDeviceUpdateFlags(( /*line :79:60*/_Ciconst_VIR_NODE_DEVICE_UPDATE_AFFECT_CURRENT /*line :79:98*/))
	NODE_DEVICE_UPDATE_AFFECT_CONFIG  = NodeDeviceUpdateFlags(( /*line :80:60*/_Ciconst_VIR_NODE_DEVICE_UPDATE_AFFECT_CONFIG /*line :80:97*/))
	NODE_DEVICE_UPDATE_AFFECT_LIVE    = NodeDeviceUpdateFlags(( /*line :81:60*/_Ciconst_VIR_NODE_DEVICE_UPDATE_AFFECT_LIVE /*line :81:95*/))
)

type NodeDevice struct {
	ptr  /*line :85:6*/_Ctype_virNodeDevicePtr /*line :85:24*/
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceFree
func (n *NodeDevice) Free() error {
	var err  /*line :90:10*/_Ctype_virError /*line :90:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :91:36*/n.ptr; _cgoBase1 := /*line :91:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :91:48*/_Cfunc_virNodeDeviceFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceRef
func (c *NodeDevice) Ref() error {
	var err  /*line :100:10*/_Ctype_virError /*line :100:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :101:35*/c.ptr; _cgoBase1 := /*line :101:42*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :101:47*/_Cfunc_virNodeDeviceRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceDestroy
func (n *NodeDevice) Destroy() error {
	var err  /*line :110:10*/_Ctype_virError /*line :110:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :111:42*/n.ptr; _cgoBase1 := /*line :111:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :111:54*/_Cfunc_virNodeDeviceDestroyWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceReset
func (n *NodeDevice) Reset() error {
	var err  /*line :120:10*/_Ctype_virError /*line :120:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :121:40*/n.ptr; _cgoBase1 := /*line :121:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :121:52*/_Cfunc_virNodeDeviceResetWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceDettach
func (n *NodeDevice) Detach() error {
	var err  /*line :130:10*/_Ctype_virError /*line :130:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :131:42*/n.ptr; _cgoBase1 := /*line :131:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :131:54*/_Cfunc_virNodeDeviceDettachWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceDetachFlags
func (n *NodeDevice) DetachFlags(driverName string, flags uint32) error {
	cDriverName := ( /*line :140:17*/_Cfunc_CString /*line :140:25*/)(driverName)
	defer func() func() { _cgo0 := /*line :141:15*/unsafe.Pointer(cDriverName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :141:43*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :142:10*/_Ctype_virError /*line :142:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :143:46*/n.ptr; var _cgo1 *_Ctype_char = /*line :143:53*/cDriverName; var _cgo2 _Ctype_uint = _Ctype_uint /*line :143:72*/(flags); _cgoBase3 := /*line :143:81*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :143:86*/_Cfunc_virNodeDeviceDetachFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceReAttach
func (n *NodeDevice) ReAttach() error {
	var err  /*line :152:10*/_Ctype_virError /*line :152:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :153:43*/n.ptr; _cgoBase1 := /*line :153:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :153:55*/_Cfunc_virNodeDeviceReAttachWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceGetName
func (n *NodeDevice) GetName() (string, error) {
	var err  /*line :162:10*/_Ctype_virError /*line :162:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :163:40*/n.ptr; _cgoBase1 := /*line :163:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :163:52*/_Cfunc_virNodeDeviceGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :167:9*/_Cfunc_GoString /*line :167:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceGetXMLDesc
func (n *NodeDevice) GetXMLDesc(flags NodeDeviceXMLFlags) (string, error) {
	var err  /*line :172:10*/_Ctype_virError /*line :172:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :173:45*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :173:58*/(flags); _cgoBase2 := /*line :173:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :173:72*/_Cfunc_virNodeDeviceGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :177:9*/_Cfunc_GoString /*line :177:18*/)(result)
	func() { _cgo0 := /*line :178:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :178:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceGetParent
func (n *NodeDevice) GetParent() (string, error) {
	var err  /*line :184:10*/_Ctype_virError /*line :184:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :185:44*/n.ptr; _cgoBase1 := /*line :185:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :185:56*/_Cfunc_virNodeDeviceGetParentWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	defer func() func() { _cgo0 := /*line :189:15*/unsafe.Pointer(result); return func() { _cgoCheckPointer(_cgo0, nil); /*line :189:38*/_Cfunc_free(_cgo0); }}()()
	return ( /*line :190:9*/_Cfunc_GoString /*line :190:18*/)(result), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceNumOfCaps
func (p *NodeDevice) NumOfCaps() (int, error) {
	var err  /*line :195:10*/_Ctype_virError /*line :195:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :196:48*/p.ptr; _cgoBase1 := /*line :196:55*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :196:60*/_Cfunc_virNodeDeviceNumOfCapsWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceListCaps
func (p *NodeDevice) ListCaps() ([]string, error) {
	const maxCaps = 1024
	var names [maxCaps](* /*line :206:23*/_Ctype_char /*line :206:29*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :208:10*/_Ctype_virError /*line :208:20*/
	numCaps := func() _Ctype_int{ _cgo0 := /*line :210:3*/p.ptr; _cgo1 := /*line :211:3*/(**_Ctype_char /*line :211:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :212:3*/maxCaps; _cgoBase3 := /*line :212:12*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :212:17*/_Cfunc_virNodeDeviceListCapsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numCaps == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numCaps)
	for k := 0; k < int(numCaps); k++ {
		goNames[k] = ( /*line :218:16*/_Cfunc_GoString /*line :218:25*/)(names[k])
		func() { _cgo0 := /*line :219:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :219:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceCreate
func (p *NodeDevice) Create(flags uint32) error {
	var err  /*line :226:10*/_Ctype_virError /*line :226:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :227:41*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :227:54*/(flags); _cgoBase2 := /*line :227:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :227:68*/_Cfunc_virNodeDeviceCreateWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nodedev.html#virNodeDeviceUndefine
func (p *NodeDevice) Undefine(flags uint32) error {
	var err  /*line :236:10*/_Ctype_virError /*line :236:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :237:43*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :237:56*/(flags); _cgoBase2 := /*line :237:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :237:70*/_Cfunc_virNodeDeviceUndefineWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNodeDeviceGetAutostart
func (n *NodeDevice) GetAutostart() (bool, error) {
	var out  /*line :246:10*/_Ctype_int /*line :246:15*/
	var err  /*line :247:10*/_Ctype_virError /*line :247:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :248:47*/n.ptr; var _cgo1 *_Ctype_int = /*line :248:54*/(*_Ctype_int /*line :248:61*/)(unsafe.Pointer(&out)); _cgoBase2 := /*line :248:86*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :248:91*/_Cfunc_virNodeDeviceGetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	switch out {
	case 1:
		return true, nil
	default:
		return false, nil
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNodeDeviceSetAutostart
func (n *NodeDevice) SetAutostart(autostart bool) error {
	var cAutostart  /*line :262:17*/_Ctype_int /*line :262:22*/
	switch autostart {
	case true:
		cAutostart = 1
	default:
		cAutostart = 0
	}
	var err  /*line :269:10*/_Ctype_virError /*line :269:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :270:47*/n.ptr; var _cgo1 _Ctype_int = /*line :270:54*/cAutostart; _cgoBase2 := /*line :270:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :270:71*/_Cfunc_virNodeDeviceSetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNodeDeviceIsActive
func (n *NodeDevice) IsActive() (bool, error) {
	var err  /*line :279:10*/_Ctype_virError /*line :279:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :280:43*/n.ptr; _cgoBase1 := /*line :280:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :280:55*/_Cfunc_virNodeDeviceIsActiveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNodeDeviceIsPersistent
func (n *NodeDevice) IsPersistent() (bool, error) {
	var err  /*line :292:10*/_Ctype_virError /*line :292:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :293:47*/n.ptr; _cgoBase1 := /*line :293:54*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :293:59*/_Cfunc_virNodeDeviceIsPersistentWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNodeDeviceUpdate
func (n *NodeDevice) Update(xml string, flags NodeDeviceUpdateFlags) error {
	cXml := ( /*line :305:10*/_Cfunc_CString /*line :305:18*/)(xml)
	defer func() func() { _cgo0 := /*line :306:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :306:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :307:10*/_Ctype_virError /*line :307:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :308:41*/n.ptr; var _cgo1 *_Ctype_char = /*line :308:48*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :308:60*/(flags); _cgoBase3 := /*line :308:69*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :308:74*/_Cfunc_virNodeDeviceUpdateWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}
