// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/domain_events.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

import (
	"fmt"
	"unsafe"
)

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include "domain_events_helper.h"
*/
import _ "unsafe"

type DomainEventGenericCallback func(c *Connect, d *Domain)

type DomainEventLifecycle struct {
	Event DomainEventType
	// TODO: we can make Detail typesafe somehow ?
	Detail int
}

type DomainEventLifecycleCallback func(c *Connect, d *Domain, event *DomainEventLifecycle)

type DomainEventRTCChange struct {
	Utcoffset int64
}

type DomainEventRTCChangeCallback func(c *Connect, d *Domain, event *DomainEventRTCChange)

type DomainEventWatchdog struct {
	Action DomainEventWatchdogAction
}

type DomainEventWatchdogCallback func(c *Connect, d *Domain, event *DomainEventWatchdog)

type DomainEventIOError struct {
	SrcPath  string
	DevAlias string
	Action   DomainEventIOErrorAction
}

type DomainEventIOErrorCallback func(c *Connect, d *Domain, event *DomainEventIOError)

type DomainEventGraphicsAddress struct {
	Family  DomainEventGraphicsAddressType
	Node    string
	Service string
}

type DomainEventGraphicsSubjectIdentity struct {
	Type string
	Name string
}

type DomainEventGraphics struct {
	Phase      DomainEventGraphicsPhase
	Local      DomainEventGraphicsAddress
	Remote     DomainEventGraphicsAddress
	AuthScheme string
	Subject    []DomainEventGraphicsSubjectIdentity
}

type DomainEventGraphicsCallback func(c *Connect, d *Domain, event *DomainEventGraphics)

type DomainEventIOErrorReason struct {
	SrcPath  string
	DevAlias string
	Action   DomainEventIOErrorAction
	Reason   string
}

type DomainEventIOErrorReasonCallback func(c *Connect, d *Domain, event *DomainEventIOErrorReason)

type DomainEventBlockJob struct {
	Disk   string
	Type   DomainBlockJobType
	Status ConnectDomainEventBlockJobStatus
}

type DomainEventBlockJobCallback func(c *Connect, d *Domain, event *DomainEventBlockJob)

type DomainEventDiskChange struct {
	OldSrcPath string
	NewSrcPath string
	DevAlias   string
	Reason     ConnectDomainEventDiskChangeReason
}

type DomainEventDiskChangeCallback func(c *Connect, d *Domain, event *DomainEventDiskChange)

type DomainEventTrayChange struct {
	DevAlias string
	Reason   ConnectDomainEventTrayChangeReason
}

type DomainEventTrayChangeCallback func(c *Connect, d *Domain, event *DomainEventTrayChange)

type DomainEventPMSuspend struct {
	Reason int
}

type DomainEventPMSuspendCallback func(c *Connect, d *Domain, event *DomainEventPMSuspend)

type DomainEventPMWakeup struct {
	Reason int
}

type DomainEventPMWakeupCallback func(c *Connect, d *Domain, event *DomainEventPMWakeup)

type DomainEventPMSuspendDisk struct {
	Reason int
}

type DomainEventPMSuspendDiskCallback func(c *Connect, d *Domain, event *DomainEventPMSuspendDisk)

type DomainEventBalloonChange struct {
	Actual uint64
}

type DomainEventBalloonChangeCallback func(c *Connect, d *Domain, event *DomainEventBalloonChange)

type DomainEventDeviceRemoved struct {
	DevAlias string
}

type DomainEventDeviceRemovedCallback func(c *Connect, d *Domain, event *DomainEventDeviceRemoved)

type DomainEventTunableCpuPin struct {
	VcpuPinSet     bool
	VcpuPin        [][]bool
	EmulatorPinSet bool
	EmulatorPin    []bool
	IOThreadPinSet bool
	IOThreadPin    [][]bool
}

type DomainEventTunable struct {
	CpuSched      *DomainSchedulerParameters
	CpuPin        *DomainEventTunableCpuPin
	BlkdevDiskSet bool
	BlkdevDisk    string
	BlkdevTune    *DomainBlockIoTuneParameters
}

type DomainEventTunableCallback func(c *Connect, d *Domain, event *DomainEventTunable)

type DomainEventAgentLifecycle struct {
	State  ConnectDomainEventAgentLifecycleState
	Reason ConnectDomainEventAgentLifecycleReason
}

type DomainEventAgentLifecycleCallback func(c *Connect, d *Domain, event *DomainEventAgentLifecycle)

type DomainEventDeviceAdded struct {
	DevAlias string
}

type DomainEventDeviceAddedCallback func(c *Connect, d *Domain, event *DomainEventDeviceAdded)

type DomainEventMigrationIteration struct {
	Iteration int
}

type DomainEventMigrationIterationCallback func(c *Connect, d *Domain, event *DomainEventMigrationIteration)

type DomainEventJobCompleted struct {
	Info DomainJobInfo
}

type DomainEventJobCompletedCallback func(c *Connect, d *Domain, event *DomainEventJobCompleted)

type DomainEventDeviceRemovalFailed struct {
	DevAlias string
}

type DomainEventDeviceRemovalFailedCallback func(c *Connect, d *Domain, event *DomainEventDeviceRemovalFailed)

type DomainEventMetadataChange struct {
	Type  DomainMetadataType
	NSURI string
}

type DomainEventMetadataChangeCallback func(c *Connect, d *Domain, event *DomainEventMetadataChange)

type DomainEventBlockThreshold struct {
	Dev       string
	Path      string
	Threshold uint64
	Excess    uint64
}

type DomainEventBlockThresholdCallback func(c *Connect, d *Domain, event *DomainEventBlockThreshold)

type DomainEventMemoryFailure struct {
	Recipient DomainMemoryFailureRecipientType
	Action    DomainMemoryFailureActionType
	Flags     DomainMemoryFailureFlags
}

type DomainEventMemoryFailureCallback func(c *Connect, d *Domain, event *DomainEventMemoryFailure)

type DomainEventMemoryDeviceSizeChange struct {
	Alias string
	Size  uint64
	Flags uint
}

type DomainEventMemoryDeviceSizeChangeCallback func(c *Connect, d *Domain, event *DomainEventMemoryDeviceSizeChange)

type DomainEventNICMACChange struct {
	Alias  string
	OldMAC string
	NewMAC string
}

type DomainEventNICMACChangeCallback func(c *Connect, d *Domain, event *DomainEventNICMACChange)

//export domainEventLifecycleCallback
func domainEventLifecycleCallback(c  /*line :247:37*/_Ctype_virConnectPtr /*line :247:52*/, d  /*line :247:56*/_Ctype_virDomainPtr /*line :247:70*/,
	event int, detail int,
	goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventLifecycle{
		Event:  DomainEventType(event),
		Detail: detail,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventLifecycleCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)
}

//export domainEventGenericCallback
func domainEventGenericCallback(c  /*line :268:35*/_Ctype_virConnectPtr /*line :268:50*/, d  /*line :268:54*/_Ctype_virDomainPtr /*line :268:68*/,
	goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventGenericCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain)
}

//export domainEventRTCChangeCallback
func domainEventRTCChangeCallback(c  /*line :283:37*/_Ctype_virConnectPtr /*line :283:52*/, d  /*line :283:56*/_Ctype_virDomainPtr /*line :283:70*/,
	utcoffset int64, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventRTCChange{
		Utcoffset: utcoffset,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventRTCChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventWatchdogCallback
func domainEventWatchdogCallback(c  /*line :303:36*/_Ctype_virConnectPtr /*line :303:51*/, d  /*line :303:55*/_Ctype_virDomainPtr /*line :303:69*/,
	action int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventWatchdog{
		Action: DomainEventWatchdogAction(action),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventWatchdogCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventIOErrorCallback
func domainEventIOErrorCallback(c  /*line :323:35*/_Ctype_virConnectPtr /*line :323:50*/, d  /*line :323:54*/_Ctype_virDomainPtr /*line :323:68*/,
	srcPath * /*line :324:11*/_Ctype_char /*line :324:17*/, devAlias * /*line :324:29*/_Ctype_char /*line :324:35*/, action int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventIOError{
		SrcPath:  ( /*line :330:13*/_Cfunc_GoString /*line :330:22*/)(srcPath),
		DevAlias: ( /*line :331:13*/_Cfunc_GoString /*line :331:22*/)(devAlias),
		Action:   DomainEventIOErrorAction(action),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventIOErrorCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventGraphicsCallback
func domainEventGraphicsCallback(c  /*line :345:36*/_Ctype_virConnectPtr /*line :345:51*/, d  /*line :345:55*/_Ctype_virDomainPtr /*line :345:69*/,
	phase int,
	local  /*line :347:8*/_Ctype_virDomainEventGraphicsAddressPtr /*line :347:42*/,
	remote  /*line :348:9*/_Ctype_virDomainEventGraphicsAddressPtr /*line :348:43*/,
	authScheme * /*line :349:14*/_Ctype_char /*line :349:20*/,
	subject  /*line :350:10*/_Ctype_virDomainEventGraphicsSubjectPtr /*line :350:44*/,
	goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	subjectGo := make([]DomainEventGraphicsSubjectIdentity, 0)
	for i := 0; i < int(subject.nidentity); i++ {
		cidentity := *(** /*line :358:20*/_Ctype_virDomainEventGraphicsSubjectIdentity /*line :358:59*/)(unsafe.Pointer(uintptr(unsafe.Pointer(subject.identities)) + (unsafe.Sizeof(*subject.identities) * uintptr(i))))
		subjectGo = append(subjectGo,
			DomainEventGraphicsSubjectIdentity{
				Type: ( /*line :361:11*/_Cfunc_GoString /*line :361:20*/)(cidentity._type),
				Name: ( /*line :362:11*/_Cfunc_GoString /*line :362:20*/)(cidentity.name),
			},
		)
	}

	eventDetails := &DomainEventGraphics{
		Phase: DomainEventGraphicsPhase(phase),
		Local: DomainEventGraphicsAddress{
			Family:  DomainEventGraphicsAddressType(local.family),
			Node:    ( /*line :371:13*/_Cfunc_GoString /*line :371:22*/)(local.node),
			Service: ( /*line :372:13*/_Cfunc_GoString /*line :372:22*/)(local.service),
		},
		Remote: DomainEventGraphicsAddress{
			Family:  DomainEventGraphicsAddressType(remote.family),
			Node:    ( /*line :376:13*/_Cfunc_GoString /*line :376:22*/)(remote.node),
			Service: ( /*line :377:13*/_Cfunc_GoString /*line :377:22*/)(remote.service),
		},
		AuthScheme: ( /*line :379:15*/_Cfunc_GoString /*line :379:24*/)(authScheme),
		Subject:    subjectGo,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventGraphicsCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventIOErrorReasonCallback
func domainEventIOErrorReasonCallback(c  /*line :393:41*/_Ctype_virConnectPtr /*line :393:56*/, d  /*line :393:60*/_Ctype_virDomainPtr /*line :393:74*/,
	srcPath * /*line :394:11*/_Ctype_char /*line :394:17*/, devAlias * /*line :394:29*/_Ctype_char /*line :394:35*/, action int, reason * /*line :394:57*/_Ctype_char /*line :394:63*/,
	goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventIOErrorReason{
		SrcPath:  ( /*line :401:13*/_Cfunc_GoString /*line :401:22*/)(srcPath),
		DevAlias: ( /*line :402:13*/_Cfunc_GoString /*line :402:22*/)(devAlias),
		Action:   DomainEventIOErrorAction(action),
		Reason:   ( /*line :404:13*/_Cfunc_GoString /*line :404:22*/)(reason),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventIOErrorReasonCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventBlockJobCallback
func domainEventBlockJobCallback(c  /*line :417:36*/_Ctype_virConnectPtr /*line :417:51*/, d  /*line :417:55*/_Ctype_virDomainPtr /*line :417:69*/,
	disk * /*line :418:8*/_Ctype_char /*line :418:14*/, _type int, status int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventBlockJob{
		Disk:   ( /*line :424:11*/_Cfunc_GoString /*line :424:20*/)(disk),
		Type:   DomainBlockJobType(_type),
		Status: ConnectDomainEventBlockJobStatus(status),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventBlockJobCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventDiskChangeCallback
func domainEventDiskChangeCallback(c  /*line :439:38*/_Ctype_virConnectPtr /*line :439:53*/, d  /*line :439:57*/_Ctype_virDomainPtr /*line :439:71*/,
	oldSrcPath * /*line :440:14*/_Ctype_char /*line :440:20*/, newSrcPath * /*line :440:34*/_Ctype_char /*line :440:40*/, devAlias * /*line :440:52*/_Ctype_char /*line :440:58*/,
	reason int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventDiskChange{
		OldSrcPath: ( /*line :447:15*/_Cfunc_GoString /*line :447:24*/)(oldSrcPath),
		NewSrcPath: ( /*line :448:15*/_Cfunc_GoString /*line :448:24*/)(newSrcPath),
		DevAlias:   ( /*line :449:15*/_Cfunc_GoString /*line :449:24*/)(devAlias),
		Reason:     ConnectDomainEventDiskChangeReason(reason),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventDiskChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventTrayChangeCallback
func domainEventTrayChangeCallback(c  /*line :463:38*/_Ctype_virConnectPtr /*line :463:53*/, d  /*line :463:57*/_Ctype_virDomainPtr /*line :463:71*/,
	devAlias * /*line :464:12*/_Ctype_char /*line :464:18*/, reason int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventTrayChange{
		DevAlias: ( /*line :470:13*/_Cfunc_GoString /*line :470:22*/)(devAlias),
		Reason:   ConnectDomainEventTrayChangeReason(reason),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventTrayChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventPMSuspendCallback
func domainEventPMSuspendCallback(c  /*line :484:37*/_Ctype_virConnectPtr /*line :484:52*/, d  /*line :484:56*/_Ctype_virDomainPtr /*line :484:70*/,
	reason int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventPMSuspend{
		Reason: reason,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventPMSuspendCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventPMWakeupCallback
func domainEventPMWakeupCallback(c  /*line :504:36*/_Ctype_virConnectPtr /*line :504:51*/, d  /*line :504:55*/_Ctype_virDomainPtr /*line :504:69*/,
	reason int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventPMWakeup{
		Reason: reason,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventPMWakeupCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventPMSuspendDiskCallback
func domainEventPMSuspendDiskCallback(c  /*line :524:41*/_Ctype_virConnectPtr /*line :524:56*/, d  /*line :524:60*/_Ctype_virDomainPtr /*line :524:74*/,
	reason int, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventPMSuspendDisk{
		Reason: reason,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventPMSuspendDiskCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventBalloonChangeCallback
func domainEventBalloonChangeCallback(c  /*line :544:41*/_Ctype_virConnectPtr /*line :544:56*/, d  /*line :544:60*/_Ctype_virDomainPtr /*line :544:74*/,
	actual uint64, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventBalloonChange{
		Actual: actual,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventBalloonChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventDeviceRemovedCallback
func domainEventDeviceRemovedCallback(c  /*line :564:41*/_Ctype_virConnectPtr /*line :564:56*/, d  /*line :564:60*/_Ctype_virDomainPtr /*line :564:74*/,
	devAlias * /*line :565:12*/_Ctype_char /*line :565:18*/, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventDeviceRemoved{
		DevAlias: ( /*line :571:13*/_Cfunc_GoString /*line :571:22*/)(devAlias),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventDeviceRemovedCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventMetadataChangeCallback
func domainEventMetadataChangeCallback(c  /*line :583:42*/_Ctype_virConnectPtr /*line :583:57*/, d  /*line :583:61*/_Ctype_virDomainPtr /*line :583:75*/,
	mtype int, nsuri * /*line :584:20*/_Ctype_char /*line :584:26*/, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventMetadataChange{
		Type:  DomainMetadataType(mtype),
		NSURI: ( /*line :591:10*/_Cfunc_GoString /*line :591:19*/)(nsuri),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventMetadataChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

func getDomainTuneSchedulerParametersFieldInfo(params *DomainSchedulerParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :604:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES /*line :604:37*/): typedParamsFieldInfo{
			set: &params.CpuSharesSet,
			ul:  &params.CpuShares,
		},
		( /*line :608:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD /*line :608:40*/): typedParamsFieldInfo{
			set: &params.GlobalPeriodSet,
			ul:  &params.GlobalPeriod,
		},
		( /*line :612:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA /*line :612:39*/): typedParamsFieldInfo{
			set: &params.GlobalQuotaSet,
			l:   &params.GlobalQuota,
		},
		( /*line :616:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD /*line :616:42*/): typedParamsFieldInfo{
			set: &params.EmulatorPeriodSet,
			ul:  &params.EmulatorPeriod,
		},
		( /*line :620:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA /*line :620:41*/): typedParamsFieldInfo{
			set: &params.EmulatorQuotaSet,
			l:   &params.EmulatorQuota,
		},
		( /*line :624:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD /*line :624:38*/): typedParamsFieldInfo{
			set: &params.VcpuPeriodSet,
			ul:  &params.VcpuPeriod,
		},
		( /*line :628:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA /*line :628:37*/): typedParamsFieldInfo{
			set: &params.VcpuQuotaSet,
			l:   &params.VcpuQuota,
		},
		( /*line :632:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD /*line :632:42*/): typedParamsFieldInfo{
			set: &params.IothreadPeriodSet,
			ul:  &params.IothreadPeriod,
		},
		( /*line :636:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA /*line :636:41*/): typedParamsFieldInfo{
			set: &params.IothreadQuotaSet,
			l:   &params.IothreadQuota,
		},
	}
}

func getTuneBlockIoTuneParametersFieldInfo(params *DomainBlockIoTuneParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :645:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC /*line :645:45*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecSet,
			ul:  &params.TotalBytesSec,
		},
		( /*line :649:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC /*line :649:44*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecSet,
			ul:  &params.ReadBytesSec,
		},
		( /*line :653:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC /*line :653:45*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecSet,
			ul:  &params.WriteBytesSec,
		},
		( /*line :657:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC /*line :657:44*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecSet,
			ul:  &params.TotalIopsSec,
		},
		( /*line :661:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC /*line :661:43*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecSet,
			ul:  &params.ReadIopsSec,
		},
		( /*line :665:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC /*line :665:44*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecSet,
			ul:  &params.WriteIopsSec,
		},
		( /*line :669:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX /*line :669:49*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecMaxSet,
			ul:  &params.TotalBytesSecMax,
		},
		( /*line :673:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX /*line :673:48*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecMaxSet,
			ul:  &params.ReadBytesSecMax,
		},
		( /*line :677:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX /*line :677:49*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecMaxSet,
			ul:  &params.WriteBytesSecMax,
		},
		( /*line :681:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX /*line :681:48*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecMaxSet,
			ul:  &params.TotalIopsSecMax,
		},
		( /*line :685:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX /*line :685:47*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecMaxSet,
			ul:  &params.ReadIopsSecMax,
		},
		( /*line :689:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX /*line :689:48*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecMaxSet,
			ul:  &params.WriteIopsSecMax,
		},
		( /*line :693:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH /*line :693:56*/): typedParamsFieldInfo{
			set: &params.TotalBytesSecMaxLengthSet,
			ul:  &params.TotalBytesSecMaxLength,
		},
		( /*line :697:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH /*line :697:55*/): typedParamsFieldInfo{
			set: &params.ReadBytesSecMaxLengthSet,
			ul:  &params.ReadBytesSecMaxLength,
		},
		( /*line :701:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH /*line :701:56*/): typedParamsFieldInfo{
			set: &params.WriteBytesSecMaxLengthSet,
			ul:  &params.WriteBytesSecMaxLength,
		},
		( /*line :705:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH /*line :705:55*/): typedParamsFieldInfo{
			set: &params.TotalIopsSecMaxLengthSet,
			ul:  &params.TotalIopsSecMaxLength,
		},
		( /*line :709:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH /*line :709:54*/): typedParamsFieldInfo{
			set: &params.ReadIopsSecMaxLengthSet,
			ul:  &params.ReadIopsSecMaxLength,
		},
		( /*line :713:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH /*line :713:55*/): typedParamsFieldInfo{
			set: &params.WriteIopsSecMaxLengthSet,
			ul:  &params.WriteIopsSecMaxLength,
		},
		( /*line :717:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC /*line :717:43*/): typedParamsFieldInfo{
			set: &params.SizeIopsSecSet,
			ul:  &params.SizeIopsSec,
		},
		( /*line :721:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME /*line :721:40*/): typedParamsFieldInfo{
			set: &params.GroupNameSet,
			s:   &params.GroupName,
		},
	}
}

type domainEventTunablePinTemp struct {
	VcpuPinSet     bool
	VcpuPin        []string
	EmulatorPinSet bool
	EmulatorPin    string
	IOThreadPinSet bool
	IOThreadPin    []string
}

func getDomainPinTempFieldInfo(numvcpu int, numiothread int, params *domainEventTunablePinTemp) map[string]typedParamsFieldInfo {
	ret := map[string]typedParamsFieldInfo{
		( /*line :739:3*/_Csconst_VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN /*line :739:38*/): typedParamsFieldInfo{
			set: &params.EmulatorPinSet,
			s:   &params.EmulatorPin,
		},
	}
	for i := 0; i < numvcpu; i++ {
		ret[fmt.Sprintf("cputune.vcpupin%d", i)] = typedParamsFieldInfo{
			s: &params.VcpuPin[i],
		}
	}
	for i := 0; i < numiothread; i++ {
		ret[fmt.Sprintf("cputune.iothreadpin%d", i)] = typedParamsFieldInfo{
			s: &params.IOThreadPin[i],
		}
	}

	return ret
}

func countPinInfo(cparams  /*line :758:27*/_Ctype_virTypedParameterPtr /*line :758:49*/, nparams  /*line :758:59*/_Ctype_int /*line :758:64*/) (int, int) {
	maxvcpus := 0
	maxiothreads := 0
	for i := 0; i < int(nparams); i++ {
		var cparam * /*line :762:15*/_Ctype_virTypedParameter /*line :762:34*/
		cparam = (* /*line :763:14*/_Ctype_virTypedParameter /*line :763:33*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cparams)) + unsafe.Sizeof(*cparam)*uintptr(i)))
		name := ( /*line :764:11*/_Cfunc_GoString /*line :764:20*/)((* /*line :764:24*/_Ctype_char /*line :764:30*/)(unsafe.Pointer(&cparam.field)))

		var vcpu int
		_, err := fmt.Scanf(name, "cputune.vcpupin%d", &vcpu)
		if err == nil {
			if vcpu > maxvcpus {
				maxvcpus = vcpu
			}
		}

		var iothread int
		_, err = fmt.Scanf(name, "cputune.iothreadpin%d", &iothread)
		if err == nil {
			if iothread > maxiothreads {
				maxiothreads = iothread
			}
		}
	}

	return maxvcpus + 1, maxiothreads + 1
}

func domainEventTunableGetPin(params  /*line :786:38*/_Ctype_virTypedParameterPtr /*line :786:60*/, cnparams  /*line :786:71*/_Ctype_int /*line :786:76*/) *DomainEventTunableCpuPin {
	var pin domainEventTunablePinTemp
	numvcpus, numiothreads := countPinInfo(params, cnparams)
	pinInfo := getDomainPinTempFieldInfo(numvcpus, numiothreads, &pin)

	num, err := typedParamsUnpack(params, cnparams, pinInfo)
	if num == 0 || err != nil {
		return nil
	}

	info := &DomainEventTunableCpuPin{}

	if pin.VcpuPinSet {
		info.VcpuPinSet = true
		info.VcpuPin = make([][]bool, len(pin.VcpuPin))

		for i := 0; i < len(pin.VcpuPin); i++ {
			bits, err := parseCPUString(pin.VcpuPin[i])
			if err == nil {
				info.VcpuPin[i] = bits
			}
		}
	}

	if pin.EmulatorPinSet {
		bits, err := parseCPUString(pin.EmulatorPin)
		if err == nil {
			info.EmulatorPinSet = true
			info.EmulatorPin = bits
		}
	}

	if pin.IOThreadPinSet {
		info.IOThreadPinSet = true
		info.IOThreadPin = make([][]bool, len(pin.IOThreadPin))

		for i := 0; i < len(pin.IOThreadPin); i++ {
			bits, err := parseCPUString(pin.IOThreadPin[i])
			if err == nil {
				info.IOThreadPin[i] = bits
			}
		}
	}

	return info
}

//export domainEventTunableCallback
func domainEventTunableCallback(c  /*line :834:35*/_Ctype_virConnectPtr /*line :834:50*/, d  /*line :834:54*/_Ctype_virDomainPtr /*line :834:68*/, params  /*line :834:77*/_Ctype_virTypedParameterPtr /*line :834:99*/, cnparams  /*line :834:110*/_Ctype_int /*line :834:115*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventTunable{}

	pin := domainEventTunableGetPin(params, cnparams)
	if pin != nil {
		eventDetails.CpuPin = pin
	}

	var sched DomainSchedulerParameters
	schedInfo := getDomainTuneSchedulerParametersFieldInfo(&sched)

	num, _ := typedParamsUnpack(params, cnparams, schedInfo)
	if num > 0 {
		eventDetails.CpuSched = &sched
	}

	blknameInfo := map[string]typedParamsFieldInfo{
		( /*line :854:3*/_Csconst_VIR_DOMAIN_TUNABLE_BLKDEV_DISK /*line :854:34*/): typedParamsFieldInfo{
			set: &eventDetails.BlkdevDiskSet,
			s:   &eventDetails.BlkdevDisk,
		},
	}
	typedParamsUnpack(params, cnparams, blknameInfo)

	var blktune DomainBlockIoTuneParameters
	blktuneInfo := getTuneBlockIoTuneParametersFieldInfo(&blktune)

	num, _ = typedParamsUnpack(params, cnparams, blktuneInfo)
	if num > 0 {
		eventDetails.BlkdevTune = &blktune
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventTunableCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventAgentLifecycleCallback
func domainEventAgentLifecycleCallback(c  /*line :879:42*/_Ctype_virConnectPtr /*line :879:57*/, d  /*line :879:61*/_Ctype_virDomainPtr /*line :879:75*/, state  /*line :879:83*/_Ctype_int /*line :879:88*/, reason  /*line :879:97*/_Ctype_int /*line :879:102*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventAgentLifecycle{
		State:  ConnectDomainEventAgentLifecycleState(state),
		Reason: ConnectDomainEventAgentLifecycleReason(reason),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventAgentLifecycleCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventDeviceAddedCallback
func domainEventDeviceAddedCallback(c  /*line :897:39*/_Ctype_virConnectPtr /*line :897:54*/, d  /*line :897:58*/_Ctype_virDomainPtr /*line :897:72*/, devalias * /*line :897:84*/_Ctype_char /*line :897:90*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventDeviceAdded{
		DevAlias: ( /*line :902:13*/_Cfunc_GoString /*line :902:22*/)(devalias),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventDeviceAddedCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventMigrationIterationCallback
func domainEventMigrationIterationCallback(c  /*line :914:46*/_Ctype_virConnectPtr /*line :914:61*/, d  /*line :914:65*/_Ctype_virDomainPtr /*line :914:79*/, iteration  /*line :914:91*/_Ctype_int /*line :914:96*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventMigrationIteration{
		Iteration: int(iteration),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventMigrationIterationCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventJobCompletedCallback
func domainEventJobCompletedCallback(c  /*line :931:40*/_Ctype_virConnectPtr /*line :931:55*/, d  /*line :931:59*/_Ctype_virDomainPtr /*line :931:73*/, params  /*line :931:82*/_Ctype_virTypedParameterPtr /*line :931:104*/, cnparams  /*line :931:115*/_Ctype_int /*line :931:120*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventJobCompleted{}
	info := getDomainJobInfoFieldInfo(&eventDetails.Info)

	typedParamsUnpack(params, cnparams, info)

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventJobCompletedCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventDeviceRemovalFailedCallback
func domainEventDeviceRemovalFailedCallback(c  /*line :950:47*/_Ctype_virConnectPtr /*line :950:62*/, d  /*line :950:66*/_Ctype_virDomainPtr /*line :950:80*/, devalias * /*line :950:92*/_Ctype_char /*line :950:98*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventDeviceRemovalFailed{
		DevAlias: ( /*line :955:13*/_Cfunc_GoString /*line :955:22*/)(devalias),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventDeviceRemovalFailedCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventBlockThresholdCallback
func domainEventBlockThresholdCallback(c  /*line :967:42*/_Ctype_virConnectPtr /*line :967:57*/, d  /*line :967:61*/_Ctype_virDomainPtr /*line :967:75*/, dev * /*line :967:82*/_Ctype_char /*line :967:88*/, path * /*line :967:96*/_Ctype_char /*line :967:102*/, threshold  /*line :967:114*/_Ctype_ulonglong /*line :967:125*/, excess  /*line :967:134*/_Ctype_ulonglong /*line :967:145*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventBlockThreshold{
		Dev:       ( /*line :972:14*/_Cfunc_GoString /*line :972:23*/)(dev),
		Path:      ( /*line :973:14*/_Cfunc_GoString /*line :973:23*/)(path),
		Threshold: uint64(threshold),
		Excess:    uint64(excess),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventBlockThresholdCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventMemoryFailureCallback
func domainEventMemoryFailureCallback(c  /*line :987:41*/_Ctype_virConnectPtr /*line :987:56*/, d  /*line :987:60*/_Ctype_virDomainPtr /*line :987:74*/, recipient  /*line :987:86*/_Ctype_int /*line :987:91*/, action  /*line :987:100*/_Ctype_int /*line :987:105*/, flags  /*line :987:113*/_Ctype_uint /*line :987:119*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventMemoryFailure{
		Recipient: DomainMemoryFailureRecipientType(recipient),
		Action:    DomainMemoryFailureActionType(action),
		Flags:     DomainMemoryFailureFlags(flags),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventMemoryFailureCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventMemoryDeviceSizeChangeCallback
func domainEventMemoryDeviceSizeChangeCallback(c  /*line :1006:50*/_Ctype_virConnectPtr /*line :1006:65*/, d  /*line :1006:69*/_Ctype_virDomainPtr /*line :1006:83*/, alias * /*line :1006:92*/_Ctype_char /*line :1006:98*/, size  /*line :1006:105*/_Ctype_ulonglong /*line :1006:116*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventMemoryDeviceSizeChange{
		Alias: ( /*line :1011:10*/_Cfunc_GoString /*line :1011:19*/)(alias),
		Size:  uint64(size),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventMemoryDeviceSizeChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

//export domainEventNICMACChangeCallback
func domainEventNICMACChangeCallback(c  /*line :1024:40*/_Ctype_virConnectPtr /*line :1024:55*/, d  /*line :1024:59*/_Ctype_virDomainPtr /*line :1024:73*/, alias * /*line :1024:82*/_Ctype_char /*line :1024:88*/, oldMAC * /*line :1024:98*/_Ctype_char /*line :1024:104*/, newMAC * /*line :1024:114*/_Ctype_char /*line :1024:120*/, goCallbackId int) {
	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainEventNICMACChange{
		Alias:  ( /*line :1029:11*/_Cfunc_GoString /*line :1029:20*/)(alias),
		OldMAC: ( /*line :1030:11*/_Cfunc_GoString /*line :1030:20*/)(oldMAC),
		NewMAC: ( /*line :1031:11*/_Cfunc_GoString /*line :1031:20*/)(newMAC),
	}
	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainEventNICMACChangeCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)
}

func (c *Connect) DomainEventLifecycleRegister(dom *Domain, callback DomainEventLifecycleCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1044:32*/_Cgo_ptr(_Cfpvar_fp_domainEventLifecycleCallbackHelper) /*line :1044:67*/))
	var cdom  /*line :1045:11*/_Ctype_virDomainPtr /*line :1045:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1049:10*/_Ctype_virError /*line :1049:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1050:50*/c.ptr; _cgo1 := /*line :1050:57*/cdom; var _cgo2 _Ctype_int = /*line :1051:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_LIFECYCLE /*line :1051:34*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1052:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1053:9*/(goCallBackId); _cgoBase5 := /*line :1053:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1053:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventRebootRegister(dom *Domain, callback DomainEventGenericCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1064:32*/_Cgo_ptr(_Cfpvar_fp_domainEventGenericCallbackHelper) /*line :1064:65*/))
	var cdom  /*line :1065:11*/_Ctype_virDomainPtr /*line :1065:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1069:10*/_Ctype_virError /*line :1069:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1070:50*/c.ptr; _cgo1 := /*line :1070:57*/cdom; var _cgo2 _Ctype_int = /*line :1071:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_REBOOT /*line :1071:31*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1072:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1073:9*/(goCallBackId); _cgoBase5 := /*line :1073:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1073:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventRTCChangeRegister(dom *Domain, callback DomainEventRTCChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1084:32*/_Cgo_ptr(_Cfpvar_fp_domainEventRTCChangeCallbackHelper) /*line :1084:67*/))
	var cdom  /*line :1085:11*/_Ctype_virDomainPtr /*line :1085:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1089:10*/_Ctype_virError /*line :1089:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1090:50*/c.ptr; _cgo1 := /*line :1090:57*/cdom; var _cgo2 _Ctype_int = /*line :1091:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_RTC_CHANGE /*line :1091:35*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1092:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1093:9*/(goCallBackId); _cgoBase5 := /*line :1093:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1093:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventWatchdogRegister(dom *Domain, callback DomainEventWatchdogCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1104:32*/_Cgo_ptr(_Cfpvar_fp_domainEventWatchdogCallbackHelper) /*line :1104:66*/))
	var cdom  /*line :1105:11*/_Ctype_virDomainPtr /*line :1105:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1109:10*/_Ctype_virError /*line :1109:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1110:50*/c.ptr; _cgo1 := /*line :1110:57*/cdom; var _cgo2 _Ctype_int = /*line :1111:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_WATCHDOG /*line :1111:33*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1112:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1113:9*/(goCallBackId); _cgoBase5 := /*line :1113:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1113:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventIOErrorRegister(dom *Domain, callback DomainEventIOErrorCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1124:32*/_Cgo_ptr(_Cfpvar_fp_domainEventIOErrorCallbackHelper) /*line :1124:65*/))
	var cdom  /*line :1125:11*/_Ctype_virDomainPtr /*line :1125:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1129:10*/_Ctype_virError /*line :1129:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1130:50*/c.ptr; _cgo1 := /*line :1130:57*/cdom; var _cgo2 _Ctype_int = /*line :1131:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_IO_ERROR /*line :1131:33*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1132:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1133:9*/(goCallBackId); _cgoBase5 := /*line :1133:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1133:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventGraphicsRegister(dom *Domain, callback DomainEventGraphicsCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1144:32*/_Cgo_ptr(_Cfpvar_fp_domainEventGraphicsCallbackHelper) /*line :1144:66*/))
	var cdom  /*line :1145:11*/_Ctype_virDomainPtr /*line :1145:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1149:10*/_Ctype_virError /*line :1149:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1150:50*/c.ptr; _cgo1 := /*line :1150:57*/cdom; var _cgo2 _Ctype_int = /*line :1151:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_GRAPHICS /*line :1151:33*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1152:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1153:9*/(goCallBackId); _cgoBase5 := /*line :1153:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1153:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventIOErrorReasonRegister(dom *Domain, callback DomainEventIOErrorReasonCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1164:32*/_Cgo_ptr(_Cfpvar_fp_domainEventIOErrorReasonCallbackHelper) /*line :1164:71*/))
	var cdom  /*line :1165:11*/_Ctype_virDomainPtr /*line :1165:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1169:10*/_Ctype_virError /*line :1169:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1170:50*/c.ptr; _cgo1 := /*line :1170:57*/cdom; var _cgo2 _Ctype_int = /*line :1171:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON /*line :1171:40*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1172:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1173:9*/(goCallBackId); _cgoBase5 := /*line :1173:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1173:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventControlErrorRegister(dom *Domain, callback DomainEventGenericCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1184:32*/_Cgo_ptr(_Cfpvar_fp_domainEventGenericCallbackHelper) /*line :1184:65*/))
	var cdom  /*line :1185:11*/_Ctype_virDomainPtr /*line :1185:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1189:10*/_Ctype_virError /*line :1189:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1190:50*/c.ptr; _cgo1 := /*line :1190:57*/cdom; var _cgo2 _Ctype_int = /*line :1191:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_CONTROL_ERROR /*line :1191:38*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1192:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1193:9*/(goCallBackId); _cgoBase5 := /*line :1193:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1193:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventBlockJobRegister(dom *Domain, callback DomainEventBlockJobCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1204:32*/_Cgo_ptr(_Cfpvar_fp_domainEventBlockJobCallbackHelper) /*line :1204:66*/))
	var cdom  /*line :1205:11*/_Ctype_virDomainPtr /*line :1205:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1209:10*/_Ctype_virError /*line :1209:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1210:50*/c.ptr; _cgo1 := /*line :1210:57*/cdom; var _cgo2 _Ctype_int = /*line :1211:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_BLOCK_JOB /*line :1211:34*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1212:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1213:9*/(goCallBackId); _cgoBase5 := /*line :1213:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1213:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventDiskChangeRegister(dom *Domain, callback DomainEventDiskChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1224:32*/_Cgo_ptr(_Cfpvar_fp_domainEventDiskChangeCallbackHelper) /*line :1224:68*/))
	var cdom  /*line :1225:11*/_Ctype_virDomainPtr /*line :1225:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1229:10*/_Ctype_virError /*line :1229:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1230:50*/c.ptr; _cgo1 := /*line :1230:57*/cdom; var _cgo2 _Ctype_int = /*line :1231:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_DISK_CHANGE /*line :1231:36*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1232:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1233:9*/(goCallBackId); _cgoBase5 := /*line :1233:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1233:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventTrayChangeRegister(dom *Domain, callback DomainEventTrayChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1244:32*/_Cgo_ptr(_Cfpvar_fp_domainEventTrayChangeCallbackHelper) /*line :1244:68*/))
	var cdom  /*line :1245:11*/_Ctype_virDomainPtr /*line :1245:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1249:10*/_Ctype_virError /*line :1249:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1250:50*/c.ptr; _cgo1 := /*line :1250:57*/cdom; var _cgo2 _Ctype_int = /*line :1251:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_TRAY_CHANGE /*line :1251:36*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1252:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1253:9*/(goCallBackId); _cgoBase5 := /*line :1253:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1253:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventPMWakeupRegister(dom *Domain, callback DomainEventPMWakeupCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1264:32*/_Cgo_ptr(_Cfpvar_fp_domainEventPMWakeupCallbackHelper) /*line :1264:66*/))
	var cdom  /*line :1265:11*/_Ctype_virDomainPtr /*line :1265:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1269:10*/_Ctype_virError /*line :1269:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1270:50*/c.ptr; _cgo1 := /*line :1270:57*/cdom; var _cgo2 _Ctype_int = /*line :1271:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_PMWAKEUP /*line :1271:33*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1272:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1273:9*/(goCallBackId); _cgoBase5 := /*line :1273:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1273:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventPMSuspendRegister(dom *Domain, callback DomainEventPMSuspendCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1284:32*/_Cgo_ptr(_Cfpvar_fp_domainEventPMSuspendCallbackHelper) /*line :1284:67*/))
	var cdom  /*line :1285:11*/_Ctype_virDomainPtr /*line :1285:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1289:10*/_Ctype_virError /*line :1289:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1290:50*/c.ptr; _cgo1 := /*line :1290:57*/cdom; var _cgo2 _Ctype_int = /*line :1291:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_PMSUSPEND /*line :1291:34*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1292:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1293:9*/(goCallBackId); _cgoBase5 := /*line :1293:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1293:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventBalloonChangeRegister(dom *Domain, callback DomainEventBalloonChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1304:32*/_Cgo_ptr(_Cfpvar_fp_domainEventBalloonChangeCallbackHelper) /*line :1304:71*/))
	var cdom  /*line :1305:11*/_Ctype_virDomainPtr /*line :1305:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1309:10*/_Ctype_virError /*line :1309:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1310:50*/c.ptr; _cgo1 := /*line :1310:57*/cdom; var _cgo2 _Ctype_int = /*line :1311:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE /*line :1311:39*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1312:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1313:9*/(goCallBackId); _cgoBase5 := /*line :1313:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1313:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventPMSuspendDiskRegister(dom *Domain, callback DomainEventPMSuspendDiskCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1324:32*/_Cgo_ptr(_Cfpvar_fp_domainEventPMSuspendDiskCallbackHelper) /*line :1324:71*/))
	var cdom  /*line :1325:11*/_Ctype_virDomainPtr /*line :1325:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1329:10*/_Ctype_virError /*line :1329:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1330:50*/c.ptr; _cgo1 := /*line :1330:57*/cdom; var _cgo2 _Ctype_int = /*line :1331:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK /*line :1331:39*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1332:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1333:9*/(goCallBackId); _cgoBase5 := /*line :1333:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1333:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventDeviceRemovedRegister(dom *Domain, callback DomainEventDeviceRemovedCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1344:32*/_Cgo_ptr(_Cfpvar_fp_domainEventDeviceRemovedCallbackHelper) /*line :1344:71*/))
	var cdom  /*line :1345:11*/_Ctype_virDomainPtr /*line :1345:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1349:10*/_Ctype_virError /*line :1349:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1350:50*/c.ptr; _cgo1 := /*line :1350:57*/cdom; var _cgo2 _Ctype_int = /*line :1351:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED /*line :1351:39*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1352:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1353:9*/(goCallBackId); _cgoBase5 := /*line :1353:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1353:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventBlockJob2Register(dom *Domain, callback DomainEventBlockJobCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1364:32*/_Cgo_ptr(_Cfpvar_fp_domainEventBlockJobCallbackHelper) /*line :1364:66*/))
	var cdom  /*line :1365:11*/_Ctype_virDomainPtr /*line :1365:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1369:10*/_Ctype_virError /*line :1369:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1370:50*/c.ptr; _cgo1 := /*line :1370:57*/cdom; var _cgo2 _Ctype_int = /*line :1371:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2 /*line :1371:36*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1372:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1373:9*/(goCallBackId); _cgoBase5 := /*line :1373:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1373:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventTunableRegister(dom *Domain, callback DomainEventTunableCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1384:32*/_Cgo_ptr(_Cfpvar_fp_domainEventTunableCallbackHelper) /*line :1384:65*/))
	var cdom  /*line :1385:11*/_Ctype_virDomainPtr /*line :1385:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1389:10*/_Ctype_virError /*line :1389:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1390:50*/c.ptr; _cgo1 := /*line :1390:57*/cdom; var _cgo2 _Ctype_int = /*line :1391:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_TUNABLE /*line :1391:32*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1392:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1393:9*/(goCallBackId); _cgoBase5 := /*line :1393:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1393:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventAgentLifecycleRegister(dom *Domain, callback DomainEventAgentLifecycleCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1404:32*/_Cgo_ptr(_Cfpvar_fp_domainEventAgentLifecycleCallbackHelper) /*line :1404:72*/))
	var cdom  /*line :1405:11*/_Ctype_virDomainPtr /*line :1405:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1409:10*/_Ctype_virError /*line :1409:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1410:50*/c.ptr; _cgo1 := /*line :1410:57*/cdom; var _cgo2 _Ctype_int = /*line :1411:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE /*line :1411:40*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1412:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1413:9*/(goCallBackId); _cgoBase5 := /*line :1413:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1413:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventDeviceAddedRegister(dom *Domain, callback DomainEventDeviceAddedCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1424:32*/_Cgo_ptr(_Cfpvar_fp_domainEventDeviceAddedCallbackHelper) /*line :1424:69*/))
	var cdom  /*line :1425:11*/_Ctype_virDomainPtr /*line :1425:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1429:10*/_Ctype_virError /*line :1429:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1430:50*/c.ptr; _cgo1 := /*line :1430:57*/cdom; var _cgo2 _Ctype_int = /*line :1431:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_DEVICE_ADDED /*line :1431:37*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1432:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1433:9*/(goCallBackId); _cgoBase5 := /*line :1433:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1433:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventMigrationIterationRegister(dom *Domain, callback DomainEventMigrationIterationCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1444:32*/_Cgo_ptr(_Cfpvar_fp_domainEventMigrationIterationCallbackHelper) /*line :1444:76*/))
	var cdom  /*line :1445:11*/_Ctype_virDomainPtr /*line :1445:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1449:10*/_Ctype_virError /*line :1449:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1450:50*/c.ptr; _cgo1 := /*line :1450:57*/cdom; var _cgo2 _Ctype_int = /*line :1451:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION /*line :1451:44*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1452:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1453:9*/(goCallBackId); _cgoBase5 := /*line :1453:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1453:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventJobCompletedRegister(dom *Domain, callback DomainEventJobCompletedCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1464:32*/_Cgo_ptr(_Cfpvar_fp_domainEventJobCompletedCallbackHelper) /*line :1464:70*/))
	var cdom  /*line :1465:11*/_Ctype_virDomainPtr /*line :1465:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1469:10*/_Ctype_virError /*line :1469:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1470:50*/c.ptr; _cgo1 := /*line :1470:57*/cdom; var _cgo2 _Ctype_int = /*line :1471:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_JOB_COMPLETED /*line :1471:38*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1472:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1473:9*/(goCallBackId); _cgoBase5 := /*line :1473:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1473:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventDeviceRemovalFailedRegister(dom *Domain, callback DomainEventDeviceRemovalFailedCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1484:32*/_Cgo_ptr(_Cfpvar_fp_domainEventDeviceRemovalFailedCallbackHelper) /*line :1484:77*/))
	var cdom  /*line :1485:11*/_Ctype_virDomainPtr /*line :1485:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1489:10*/_Ctype_virError /*line :1489:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1490:50*/c.ptr; _cgo1 := /*line :1490:57*/cdom; var _cgo2 _Ctype_int = /*line :1491:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED /*line :1491:46*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1492:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1493:9*/(goCallBackId); _cgoBase5 := /*line :1493:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1493:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventMetadataChangeRegister(dom *Domain, callback DomainEventMetadataChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1504:32*/_Cgo_ptr(_Cfpvar_fp_domainEventMetadataChangeCallbackHelper) /*line :1504:72*/))
	var cdom  /*line :1505:11*/_Ctype_virDomainPtr /*line :1505:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1509:10*/_Ctype_virError /*line :1509:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1510:50*/c.ptr; _cgo1 := /*line :1510:57*/cdom; var _cgo2 _Ctype_int = /*line :1511:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_METADATA_CHANGE /*line :1511:40*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1512:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1513:9*/(goCallBackId); _cgoBase5 := /*line :1513:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1513:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventBlockThresholdRegister(dom *Domain, callback DomainEventBlockThresholdCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1524:32*/_Cgo_ptr(_Cfpvar_fp_domainEventBlockThresholdCallbackHelper) /*line :1524:72*/))
	var cdom  /*line :1525:11*/_Ctype_virDomainPtr /*line :1525:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1529:10*/_Ctype_virError /*line :1529:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1530:50*/c.ptr; _cgo1 := /*line :1530:57*/cdom; var _cgo2 _Ctype_int = /*line :1531:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD /*line :1531:40*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1532:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1533:9*/(goCallBackId); _cgoBase5 := /*line :1533:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1533:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventMemoryFailureRegister(dom *Domain, callback DomainEventMemoryFailureCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1544:32*/_Cgo_ptr(_Cfpvar_fp_domainEventMemoryFailureCallbackHelper) /*line :1544:71*/))
	var cdom  /*line :1545:11*/_Ctype_virDomainPtr /*line :1545:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1549:10*/_Ctype_virError /*line :1549:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1550:50*/c.ptr; _cgo1 := /*line :1550:57*/cdom; var _cgo2 _Ctype_int = /*line :1551:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_MEMORY_FAILURE /*line :1551:39*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1552:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1553:9*/(goCallBackId); _cgoBase5 := /*line :1553:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1553:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventMemoryDeviceSizeChangeRegister(dom *Domain, callback DomainEventMemoryDeviceSizeChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1564:32*/_Cgo_ptr(_Cfpvar_fp_domainEventMemoryDeviceSizeChangeCallbackHelper) /*line :1564:80*/))
	var cdom  /*line :1565:11*/_Ctype_virDomainPtr /*line :1565:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1569:10*/_Ctype_virError /*line :1569:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1570:50*/c.ptr; _cgo1 := /*line :1570:57*/cdom; var _cgo2 _Ctype_int = /*line :1571:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE /*line :1571:50*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1572:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1573:9*/(goCallBackId); _cgoBase5 := /*line :1573:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1573:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventNICMACChangeRegister(dom *Domain, callback DomainEventNICMACChangeCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :1584:32*/_Cgo_ptr(_Cfpvar_fp_domainEventNICMACChangeCallbackHelper) /*line :1584:70*/))
	var cdom  /*line :1585:11*/_Ctype_virDomainPtr /*line :1585:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :1589:10*/_Ctype_virError /*line :1589:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :1590:50*/c.ptr; _cgo1 := /*line :1590:57*/cdom; var _cgo2 _Ctype_int = /*line :1591:3*/_Ciconst_VIR_DOMAIN_EVENT_ID_NIC_MAC_CHANGE /*line :1591:39*/; var _cgo3 *[0]byte = _Ctype_virConnectDomainEventGenericCallback /*line :1592:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :1593:9*/(goCallBackId); _cgoBase5 := /*line :1593:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :1593:30*/_Cfunc_virConnectDomainEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) DomainEventDeregister(callbackId int) error {
	// Deregister the callback
	var err  /*line :1603:10*/_Ctype_virError /*line :1603:20*/
	ret := int(func() _Ctype_int{ _cgo0 := /*line :1604:57*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :1604:69*/(callbackId); _cgoBase2 := /*line :1604:83*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :1604:88*/_Cfunc_virConnectDomainEventDeregisterAnyWrapper(_cgo0, _cgo1, _cgo2); }())
	if ret < 0 {
		return makeError(&err)
	}
	return nil
}

func (e DomainEventLifecycle) String() string {
	var detail, event string
	switch e.Event {
	case DOMAIN_EVENT_DEFINED:
		event = "defined"
		switch DomainEventDefinedDetailType(e.Detail) {
		case DOMAIN_EVENT_DEFINED_ADDED:
			detail = "added"
		case DOMAIN_EVENT_DEFINED_UPDATED:
			detail = "updated"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_UNDEFINED:
		event = "undefined"
		switch DomainEventUndefinedDetailType(e.Detail) {
		case DOMAIN_EVENT_UNDEFINED_REMOVED:
			detail = "removed"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_STARTED:
		event = "started"
		switch DomainEventStartedDetailType(e.Detail) {
		case DOMAIN_EVENT_STARTED_BOOTED:
			detail = "booted"
		case DOMAIN_EVENT_STARTED_MIGRATED:
			detail = "migrated"
		case DOMAIN_EVENT_STARTED_RESTORED:
			detail = "restored"
		case DOMAIN_EVENT_STARTED_FROM_SNAPSHOT:
			detail = "snapshot"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_SUSPENDED:
		event = "suspended"
		switch DomainEventSuspendedDetailType(e.Detail) {
		case DOMAIN_EVENT_SUSPENDED_PAUSED:
			detail = "paused"
		case DOMAIN_EVENT_SUSPENDED_MIGRATED:
			detail = "migrated"
		case DOMAIN_EVENT_SUSPENDED_IOERROR:
			detail = "I/O error"
		case DOMAIN_EVENT_SUSPENDED_WATCHDOG:
			detail = "watchdog"
		case DOMAIN_EVENT_SUSPENDED_RESTORED:
			detail = "restored"
		case DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT:
			detail = "snapshot"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_RESUMED:
		event = "resumed"
		switch DomainEventResumedDetailType(e.Detail) {
		case DOMAIN_EVENT_RESUMED_UNPAUSED:
			detail = "unpaused"
		case DOMAIN_EVENT_RESUMED_MIGRATED:
			detail = "migrated"
		case DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT:
			detail = "snapshot"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_STOPPED:
		event = "stopped"
		switch DomainEventStoppedDetailType(e.Detail) {
		case DOMAIN_EVENT_STOPPED_SHUTDOWN:
			detail = "shutdown"
		case DOMAIN_EVENT_STOPPED_DESTROYED:
			detail = "destroyed"
		case DOMAIN_EVENT_STOPPED_CRASHED:
			detail = "crashed"
		case DOMAIN_EVENT_STOPPED_MIGRATED:
			detail = "migrated"
		case DOMAIN_EVENT_STOPPED_SAVED:
			detail = "saved"
		case DOMAIN_EVENT_STOPPED_FAILED:
			detail = "failed"
		case DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT:
			detail = "snapshot"
		default:
			detail = "unknown"
		}

	case DOMAIN_EVENT_SHUTDOWN:
		event = "shutdown"
		switch DomainEventShutdownDetailType(e.Detail) {
		case DOMAIN_EVENT_SHUTDOWN_FINISHED:
			detail = "finished"
		default:
			detail = "unknown"
		}

	default:
		event = "unknown"
	}

	return fmt.Sprintf("Domain event=%q detail=%q", event, detail)
}

func (e DomainEventRTCChange) String() string {
	return fmt.Sprintf("RTC change offset=%d", e.Utcoffset)
}

func (e DomainEventWatchdog) String() string {
	return fmt.Sprintf("Watchdog action=%d", e.Action)
}

func (e DomainEventIOError) String() string {
	return fmt.Sprintf("I/O error path=%q alias=%q action=%d",
		e.SrcPath, e.DevAlias, e.Action)
}

func (e DomainEventGraphics) String() string {
	var phase string
	switch e.Phase {
	case DOMAIN_EVENT_GRAPHICS_CONNECT:
		phase = "connected"
	case DOMAIN_EVENT_GRAPHICS_INITIALIZE:
		phase = "initialized"
	case DOMAIN_EVENT_GRAPHICS_DISCONNECT:
		phase = "disconnected"
	default:
		phase = "unknown"
	}

	return fmt.Sprintf("Graphics phase=%q", phase)
}

func (e DomainEventIOErrorReason) String() string {
	return fmt.Sprintf("IO error path=%q alias=%q action=%d reason=%q",
		e.SrcPath, e.DevAlias, e.Action, e.Reason)
}

func (e DomainEventBlockJob) String() string {
	return fmt.Sprintf("Block job disk=%q status=%d type=%d",
		e.Disk, e.Status, e.Type)
}

func (e DomainEventDiskChange) String() string {
	return fmt.Sprintf("Disk change old=%q new=%q alias=%q reason=%d",
		e.OldSrcPath, e.NewSrcPath, e.DevAlias, e.Reason)
}

func (e DomainEventTrayChange) String() string {
	return fmt.Sprintf("Tray change dev=%q reason=%d",
		e.DevAlias, e.Reason)
}

func (e DomainEventBalloonChange) String() string {
	return fmt.Sprintf("Ballon change %d", e.Actual)
}

func (e DomainEventDeviceRemoved) String() string {
	return fmt.Sprintf("Device %q removed ", e.DevAlias)
}
