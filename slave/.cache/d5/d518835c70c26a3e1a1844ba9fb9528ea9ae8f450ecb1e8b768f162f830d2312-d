// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/secret.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type SecretUsageType int

const (
	SECRET_USAGE_TYPE_NONE   = SecretUsageType(( /*line :45:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_NONE /*line :45:72*/))
	SECRET_USAGE_TYPE_VOLUME = SecretUsageType(( /*line :46:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_VOLUME /*line :46:74*/))
	SECRET_USAGE_TYPE_CEPH   = SecretUsageType(( /*line :47:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_CEPH /*line :47:72*/))
	SECRET_USAGE_TYPE_ISCSI  = SecretUsageType(( /*line :48:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_ISCSI /*line :48:73*/))
	SECRET_USAGE_TYPE_TLS    = SecretUsageType(( /*line :49:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_TLS /*line :49:71*/))
	SECRET_USAGE_TYPE_VTPM   = SecretUsageType(( /*line :50:45*/_Ciconst_VIR_SECRET_USAGE_TYPE_VTPM /*line :50:72*/))
)

type SecretDefineFlags uint

const (
	SECRET_DEFINE_VALIDATE = SecretDefineFlags(( /*line :56:45*/_Ciconst_VIR_SECRET_DEFINE_VALIDATE /*line :56:72*/))
)

type SecretEventLifecycleType int

const (
	SECRET_EVENT_DEFINED   = SecretEventLifecycleType(( /*line :62:52*/_Ciconst_VIR_SECRET_EVENT_DEFINED /*line :62:77*/))
	SECRET_EVENT_UNDEFINED = SecretEventLifecycleType(( /*line :63:52*/_Ciconst_VIR_SECRET_EVENT_UNDEFINED /*line :63:79*/))
)

type SecretEventID int

const (
	SECRET_EVENT_ID_LIFECYCLE     = SecretEventID(( /*line :69:48*/_Ciconst_VIR_SECRET_EVENT_ID_LIFECYCLE /*line :69:78*/))
	SECRET_EVENT_ID_VALUE_CHANGED = SecretEventID(( /*line :70:48*/_Ciconst_VIR_SECRET_EVENT_ID_VALUE_CHANGED /*line :70:82*/))
)

type Secret struct {
	ptr  /*line :74:6*/_Ctype_virSecretPtr /*line :74:20*/
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretFree
func (s *Secret) Free() error {
	var err  /*line :79:10*/_Ctype_virError /*line :79:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :80:32*/s.ptr; _cgoBase1 := /*line :80:39*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :80:44*/_Cfunc_virSecretFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretRef
func (c *Secret) Ref() error {
	var err  /*line :89:10*/_Ctype_virError /*line :89:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :90:31*/c.ptr; _cgoBase1 := /*line :90:38*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :90:43*/_Cfunc_virSecretRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretUndefine
func (s *Secret) Undefine() error {
	var err  /*line :99:10*/_Ctype_virError /*line :99:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :100:39*/s.ptr; _cgoBase1 := /*line :100:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :100:51*/_Cfunc_virSecretUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetUUID
func (s *Secret) GetUUID() ([]byte, error) {
	var cUuid [( /*line :109:13*/_Ciconst_VIR_UUID_BUFLEN /*line :109:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :111:10*/_Ctype_virError /*line :111:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :112:38*/s.ptr; var _cgo1 *_Ctype_uchar = /*line :112:45*/(*_Ctype_uchar /*line :112:54*/)(cuidPtr); _cgoBase2 := /*line :112:66*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :112:71*/_Cfunc_virSecretGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :116:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :116:28*/_Ciconst_VIR_UUID_BUFLEN /*line :116:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :116:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetUUIDString
func (s *Secret) GetUUIDString() (string, error) {
	var cUuid [( /*line :121:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :121:36*/)]( /*line :121:39*/_Ctype_char /*line :121:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :123:10*/_Ctype_virError /*line :123:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :124:44*/s.ptr; var _cgo1 *_Ctype_char = /*line :124:51*/(*_Ctype_char /*line :124:59*/)(cuidPtr); _cgoBase2 := /*line :124:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :124:76*/_Cfunc_virSecretGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :128:9*/_Cfunc_GoString /*line :128:18*/)((* /*line :128:22*/_Ctype_char /*line :128:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetUsageID
func (s *Secret) GetUsageID() (string, error) {
	var err  /*line :133:10*/_Ctype_virError /*line :133:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :134:41*/s.ptr; _cgoBase1 := /*line :134:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :134:53*/_Cfunc_virSecretGetUsageIDWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	return ( /*line :138:9*/_Cfunc_GoString /*line :138:18*/)(result), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetUsageType
func (s *Secret) GetUsageType() (SecretUsageType, error) {
	var err  /*line :143:10*/_Ctype_virError /*line :143:20*/
	result := SecretUsageType(func() _Ctype_int{ _cgo0 := /*line :144:59*/s.ptr; _cgoBase1 := /*line :144:66*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :144:71*/_Cfunc_virSecretGetUsageTypeWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetXMLDesc
func (s *Secret) GetXMLDesc(flags uint32) (string, error) {
	var err  /*line :153:10*/_Ctype_virError /*line :153:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :154:41*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :154:54*/(flags); _cgoBase2 := /*line :154:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :154:68*/_Cfunc_virSecretGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :158:9*/_Cfunc_GoString /*line :158:18*/)(result)
	func() { _cgo0 := /*line :159:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :159:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretGetValue
func (s *Secret) GetValue(flags uint32) ([]byte, error) {
	var cvalue_size  /*line :165:18*/_Ctype_size_t /*line :165:26*/

	var err  /*line :167:10*/_Ctype_virError /*line :167:20*/
	cvalue := func() *_Ctype_uchar{ _cgo0 := /*line :168:39*/s.ptr; var _cgo1 *_Ctype_size_t = /*line :168:46*/&cvalue_size; var _cgo2 _Ctype_uint = _Ctype_uint /*line :168:66*/(flags); _cgoBase3 := /*line :168:75*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :168:80*/_Cfunc_virSecretGetValueWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if cvalue == nil {
		return nil, makeError(&err)
	}
	defer func() func() { _cgo0 := /*line :172:15*/unsafe.Pointer(cvalue); return func() { _cgoCheckPointer(_cgo0, nil); /*line :172:38*/_Cfunc_free(_cgo0); }}()()
	ret := func() []byte{ _cgo0 := /*line :173:19*/unsafe.Pointer(cvalue); var _cgo1 _Ctype_int = _Ctype_int /*line :173:48*/(cvalue_size); _cgoCheckPointer(_cgo0, nil); return /*line :173:62*/_Cfunc_GoBytes(_cgo0, _cgo1); }()
	return ret, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-secret.html#virSecretSetValue
func (s *Secret) SetValue(value []byte, flags uint32) error {
	nvalue := len(value)
	cvalue := make([] /*line :180:19*/_Ctype_uchar /*line :180:26*/, nvalue)

	for i := 0; i < nvalue; i++ {
		cvalue[i] =  /*line :183:15*/_Ctype_uchar /*line :183:22*/(value[i])
	}

	var err  /*line :186:10*/_Ctype_virError /*line :186:20*/
	var cvaluePtr * /*line :187:17*/_Ctype_uchar /*line :187:24*/ = nil
	if nvalue > 0 {
		cvaluePtr = &cvalue[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :191:39*/s.ptr; var _cgo1 *_Ctype_uchar = /*line :191:46*/cvaluePtr; var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :191:65*/(nvalue); var _cgo3 _Ctype_uint = _Ctype_uint /*line :191:81*/(flags); _cgoBase4 := /*line :191:90*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :191:95*/_Cfunc_virSecretSetValueWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result == -1 {
		return makeError(&err)
	}

	return nil
}
