// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/typedparams.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt; import _cgo_unsafe "unsafe"

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include <string.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"fmt"
	"strings"
	"unsafe"
)

type TypedParamValue struct {
	Name   string
	Int    *int
	UInt   *uint
	Long   *int64
	ULong  *uint64
	Bool   *bool
	Float  *float64
	String *string
}

func (val *TypedParamValue) ValueString() string {
	if val.Int != nil {
		return fmt.Sprintf("%d", *val.Int)
	} else if val.UInt != nil {
		return fmt.Sprintf("%d", *val.UInt)
	} else if val.Long != nil {
		return fmt.Sprintf("%d", *val.Long)
	} else if val.ULong != nil {
		return fmt.Sprintf("%d", *val.ULong)
	} else if val.Bool != nil {
		return fmt.Sprintf("%t", *val.Bool)
	} else if val.Float != nil {
		return fmt.Sprintf("%f", *val.Float)
	} else if val.Float != nil {
		return *val.String
	} else {
		return "<nil>"
	}
}

type typedParamsFieldInfo struct {
	set *bool
	i   *int
	ui  *uint
	l   *int64
	ul  *uint64
	b   *bool
	d   *float64
	s   *string
	sl  *[]string
}

type typedParamsFilter func(key string) bool

func typedParamsUnpackRaw(prefix string, filter typedParamsFilter, cparams * /*line :90:77*/_Ctype_virTypedParameter /*line :90:96*/, cnparams  /*line :90:107*/_Ctype_int /*line :90:112*/) ([]TypedParamValue, error) {
	ret := []TypedParamValue{}
	for n := 0; n < int(cnparams); n++ {
		var param TypedParamValue
		var cparam * /*line :94:15*/_Ctype_virTypedParameter /*line :94:34*/
		cparam = (* /*line :95:14*/_Ctype_virTypedParameter /*line :95:33*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cparams)) +
			(unsafe.Sizeof(*cparam) * uintptr(n))))

		name := ( /*line :98:11*/_Cfunc_GoString /*line :98:20*/)(&cparam.field[0])

		if !strings.HasPrefix(name, prefix) ||
			!filter(name) {
			continue
		}

		param.Name = name[len(prefix):]

		// A union is exposed by CGo as a byte array
		value := cparam.value
		valueptr := unsafe.Pointer(&value[0])

		switch cparam._type {
		case ( /*line :112:8*/_Ciconst_VIR_TYPED_PARAM_INT /*line :112:28*/):
			i := int(*(* /*line :113:16*/_Ctype_int /*line :113:21*/)(valueptr))
			param.Int = &i
		case ( /*line :115:8*/_Ciconst_VIR_TYPED_PARAM_UINT /*line :115:29*/):
			ui := uint(*(* /*line :116:18*/_Ctype_uint /*line :116:24*/)(valueptr))
			param.UInt = &ui
		case ( /*line :118:8*/_Ciconst_VIR_TYPED_PARAM_LLONG /*line :118:30*/):
			l := int64(*(* /*line :119:18*/_Ctype_longlong /*line :119:28*/)(valueptr))
			param.Long = &l
		case ( /*line :121:8*/_Ciconst_VIR_TYPED_PARAM_ULLONG /*line :121:31*/):
			ul := uint64(*(* /*line :122:20*/_Ctype_ulonglong /*line :122:31*/)(valueptr))
			param.ULong = &ul
		case ( /*line :124:8*/_Ciconst_VIR_TYPED_PARAM_BOOLEAN /*line :124:32*/):
			b := bool(*(* /*line :125:17*/_Ctype_char /*line :125:23*/)(valueptr) != 0)
			param.Bool = &b
		case ( /*line :127:8*/_Ciconst_VIR_TYPED_PARAM_DOUBLE /*line :127:31*/):
			f := float64(*(* /*line :128:20*/_Ctype_double /*line :128:28*/)(valueptr))
			param.Float = &f
		case ( /*line :130:8*/_Ciconst_VIR_TYPED_PARAM_STRING /*line :130:31*/):
			s := ( /*line :131:9*/_Cfunc_GoString /*line :131:18*/)(*(** /*line :131:24*/_Ctype_char /*line :131:30*/)(valueptr))
			param.String = &s
		}

		ret = append(ret, param)
	}

	return ret, nil
}

func typedParamsUnpack(cparams * /*line :141:33*/_Ctype_virTypedParameter /*line :141:52*/, cnparams  /*line :141:63*/_Ctype_int /*line :141:68*/, infomap map[string]typedParamsFieldInfo) (uint, error) {
	count := uint(0)
	for name, value := range infomap {
		var err  /*line :144:11*/_Ctype_virError /*line :144:21*/
		var ret  /*line :145:11*/_Ctype_int /*line :145:16*/
		cname := ( /*line :146:12*/_Cfunc_CString /*line :146:20*/)(name)
		defer func() func() { _cgo0 := /*line :147:16*/unsafe.Pointer(cname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :147:38*/_Cfunc_free(_cgo0); }}()()
		if value.sl != nil {
			for i := 0; i < int(cnparams); i++ {
				var cparam * /*line :150:17*/_Ctype_virTypedParameter /*line :150:36*/
				cparam = (* /*line :151:16*/_Ctype_virTypedParameter /*line :151:35*/)(unsafe.Pointer(uintptr(unsafe.Pointer(cparams)) +
					(unsafe.Sizeof(*cparam) * uintptr(i))))
				var cs * /*line :153:13*/_Ctype_char /*line :153:19*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :154:44*/cparam; var _cgo1 _Ctype_int = /*line :154:52*/1; var _cgo2 *_Ctype_char = /*line :154:55*/cname; _cgoBase3 := /*line :154:62*/&cs; _cgo3 := _cgoBase3; _cgoBase4 := /*line :154:67*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase3, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :154:72*/_Cfunc_virTypedParamsGetStringWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.sl = append(*value.sl, ( /*line :156:36*/_Cfunc_GoString /*line :156:45*/)(cs))
					*value.set = true
					count++
				} else if ret < 0 {
					break
				}
			}
		} else {
			if value.i != nil {
				var ci  /*line :165:12*/_Ctype_int /*line :165:17*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :166:41*/cparams; var _cgo1 _Ctype_int = /*line :166:50*/cnparams; var _cgo2 *_Ctype_char = /*line :166:60*/cname; var _cgo3 *_Ctype_int = /*line :166:67*/&ci; _cgoBase4 := /*line :166:72*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :166:77*/_Cfunc_virTypedParamsGetIntWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.i = int(ci)
				} else if ret < 0 {
					if value.l != nil {
						var cl  /*line :171:14*/_Ctype_longlong /*line :171:24*/
						func() { _cgoBase0 := /*line :172:30*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); /*line :172:35*/_Cfunc_virResetErrorWrapper(_cgo0); }()
						ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :173:45*/cparams; var _cgo1 _Ctype_int = /*line :173:54*/cnparams; var _cgo2 *_Ctype_char = /*line :173:64*/cname; var _cgo3 *_Ctype_longlong = /*line :173:71*/&cl; _cgoBase4 := /*line :173:76*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :173:81*/_Cfunc_virTypedParamsGetLLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
						if ret == 1 {
							*value.l = int64(cl)
						}
					}
				}
			} else if value.ui != nil {
				var cui  /*line :180:13*/_Ctype_uint /*line :180:19*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :181:42*/cparams; var _cgo1 _Ctype_int = /*line :181:51*/cnparams; var _cgo2 *_Ctype_char = /*line :181:61*/cname; var _cgo3 *_Ctype_uint = /*line :181:68*/&cui; _cgoBase4 := /*line :181:74*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :181:79*/_Cfunc_virTypedParamsGetUIntWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.ui = uint(cui)
				} else if ret < 0 {
					if value.ul != nil {
						var cul  /*line :186:15*/_Ctype_ulonglong /*line :186:26*/
						func() { _cgoBase0 := /*line :187:30*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); /*line :187:35*/_Cfunc_virResetErrorWrapper(_cgo0); }()
						ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :188:46*/cparams; var _cgo1 _Ctype_int = /*line :188:55*/cnparams; var _cgo2 *_Ctype_char = /*line :188:65*/cname; var _cgo3 *_Ctype_ulonglong = /*line :188:72*/&cul; _cgoBase4 := /*line :188:78*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :188:83*/_Cfunc_virTypedParamsGetULLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
						if ret == 1 {
							*value.ul = uint64(cul)
						}
					}
				}
			} else if value.l != nil {
				var cl  /*line :195:12*/_Ctype_longlong /*line :195:22*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :196:43*/cparams; var _cgo1 _Ctype_int = /*line :196:52*/cnparams; var _cgo2 *_Ctype_char = /*line :196:62*/cname; var _cgo3 *_Ctype_longlong = /*line :196:69*/&cl; _cgoBase4 := /*line :196:74*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :196:79*/_Cfunc_virTypedParamsGetLLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.l = int64(cl)
				}
			} else if value.ul != nil {
				var cul  /*line :201:13*/_Ctype_ulonglong /*line :201:24*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :202:44*/cparams; var _cgo1 _Ctype_int = /*line :202:53*/cnparams; var _cgo2 *_Ctype_char = /*line :202:63*/cname; var _cgo3 *_Ctype_ulonglong = /*line :202:70*/&cul; _cgoBase4 := /*line :202:76*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :202:81*/_Cfunc_virTypedParamsGetULLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.ul = uint64(cul)
				}
			} else if value.d != nil {
				var cd  /*line :207:12*/_Ctype_double /*line :207:20*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :208:44*/cparams; var _cgo1 _Ctype_int = /*line :208:53*/cnparams; var _cgo2 *_Ctype_char = /*line :208:63*/cname; var _cgo3 *_Ctype_double = /*line :208:70*/&cd; _cgoBase4 := /*line :208:75*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :208:80*/_Cfunc_virTypedParamsGetDoubleWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.d = float64(cd)
				}
			} else if value.b != nil {
				var cb  /*line :213:12*/_Ctype_int /*line :213:17*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :214:45*/cparams; var _cgo1 _Ctype_int = /*line :214:54*/cnparams; var _cgo2 *_Ctype_char = /*line :214:64*/cname; var _cgo3 *_Ctype_int = /*line :214:71*/&cb; _cgoBase4 := /*line :214:76*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :214:81*/_Cfunc_virTypedParamsGetBooleanWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					if cb == 1 {
						*value.b = true
					} else {
						*value.b = false
					}
				}
			} else if value.s != nil {
				var cs * /*line :223:13*/_Ctype_char /*line :223:19*/
				ret = func() _Ctype_int{ var _cgo0 *_Ctype_struct__virTypedParameter = /*line :224:44*/cparams; var _cgo1 _Ctype_int = /*line :224:53*/cnparams; var _cgo2 *_Ctype_char = /*line :224:63*/cname; _cgoBase3 := /*line :224:70*/&cs; _cgo3 := _cgoBase3; _cgoBase4 := /*line :224:75*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase3, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :224:80*/_Cfunc_virTypedParamsGetStringWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
				if ret == 1 {
					*value.s = ( /*line :226:17*/_Cfunc_GoString /*line :226:26*/)(cs)
				}
			}
			if ret == 1 {
				*value.set = true
				count++
			}
		}
		if ret < 0 {
			return count, makeError(&err)
		}
	}

	return count, nil
}

func typedParamsNew(nparams  /*line :242:29*/_Ctype_int /*line :242:34*/) * /*line :242:37*/_Ctype_virTypedParameter /*line :242:56*/ {
	var cparams * /*line :243:15*/_Ctype_virTypedParameter /*line :243:34*/
	memlen :=  /*line :244:12*/_Ctype_size_t /*line :244:20*/(unsafe.Sizeof(*cparams) * uintptr(nparams))
	cparams = (* /*line :245:14*/_Ctype_virTypedParameter /*line :245:33*/)(( /*line :245:35*/_Cfunc__CMalloc /*line :245:42*/)(memlen))
	if cparams == nil {
		( /*line :247:3*/_Cfunc_abort /*line :247:9*/)()
	}
	func() _cgo_unsafe.Pointer{ _cgo0 := /*line :249:11*/unsafe.Pointer(cparams); var _cgo1 _Ctype_int = /*line :249:36*/0; var _cgo2 _Ctype_size_t = /*line :249:39*/memlen; _cgoCheckPointer(_cgo0, nil); return /*line :249:46*/_Cfunc_memset(_cgo0, _cgo1, _cgo2); }()
	return cparams
}

func typedParamsPackNew(infomap map[string]typedParamsFieldInfo) (* /*line :253:68*/_Ctype_virTypedParameter /*line :253:87*/,  /*line :253:89*/_Ctype_int /*line :253:94*/, error) {
	var cparams  /*line :254:14*/_Ctype_virTypedParameterPtr /*line :254:36*/
	var nparams  /*line :255:14*/_Ctype_int /*line :255:19*/
	var maxparams  /*line :256:16*/_Ctype_int /*line :256:21*/

	defer ( /*line :258:8*/_Cfunc_virTypedParamsFreeWrapper /*line :258:34*/)(cparams, nparams)

	for name, value := range infomap {
		if !*value.set {
			continue
		}

		cname := ( /*line :265:12*/_Cfunc_CString /*line :265:20*/)(name)
		defer func() func() { _cgo0 := /*line :266:16*/unsafe.Pointer(cname); return func() { _cgoCheckPointer(_cgo0, nil); /*line :266:38*/_Cfunc_free(_cgo0); }}()()
		if value.sl != nil {
			/* We're not actually using virTypedParamsAddStringList, as it is
			 * easier to avoid creating a 'char **' in Go to hold all the strings.
			 */
			for i := 0; i < len(*value.sl); i++ {
				cvalue := ( /*line :272:15*/_Cfunc_CString /*line :272:23*/)((*value.sl)[i])
				defer func() func() { _cgo0 := /*line :273:18*/unsafe.Pointer(cvalue); return func() { _cgoCheckPointer(_cgo0, nil); /*line :273:41*/_Cfunc_free(_cgo0); }}()()
				var err  /*line :274:13*/_Ctype_virError /*line :274:23*/
				ret := func() _Ctype_int{ _cgoBase0 := /*line :275:45*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :275:55*/&nparams; var _cgo2 *_Ctype_int = /*line :275:65*/&maxparams; var _cgo3 *_Ctype_char = /*line :275:77*/cname; var _cgo4 *_Ctype_char = /*line :275:84*/cvalue; _cgoBase5 := /*line :275:92*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :275:97*/_Cfunc_virTypedParamsAddStringWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
				if ret < 0 {
					return nil, 0, makeError(&err)
				}
			}
		} else {
			var err  /*line :281:12*/_Ctype_virError /*line :281:22*/
			var ret  /*line :282:12*/_Ctype_int /*line :282:17*/
			if value.i != nil {
				ret = func() _Ctype_int{ _cgoBase0 := /*line :284:41*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :284:51*/&nparams; var _cgo2 *_Ctype_int = /*line :284:61*/&maxparams; var _cgo3 *_Ctype_char = /*line :284:73*/cname; var _cgo4 _Ctype_int = _Ctype_int /*line :284:85*/(*value.i); _cgoBase5 := /*line :284:97*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :284:102*/_Cfunc_virTypedParamsAddIntWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.ui != nil {
				ret = func() _Ctype_int{ _cgoBase0 := /*line :286:42*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :286:52*/&nparams; var _cgo2 *_Ctype_int = /*line :286:62*/&maxparams; var _cgo3 *_Ctype_char = /*line :286:74*/cname; var _cgo4 _Ctype_uint = _Ctype_uint /*line :286:87*/(*value.ui); _cgoBase5 := /*line :286:100*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :286:105*/_Cfunc_virTypedParamsAddUIntWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.l != nil {
				ret = func() _Ctype_int{ _cgoBase0 := /*line :288:43*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :288:53*/&nparams; var _cgo2 *_Ctype_int = /*line :288:63*/&maxparams; var _cgo3 *_Ctype_char = /*line :288:75*/cname; var _cgo4 _Ctype_longlong = _Ctype_longlong /*line :288:92*/(*value.l); _cgoBase5 := /*line :288:104*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :288:109*/_Cfunc_virTypedParamsAddLLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.ul != nil {
				ret = func() _Ctype_int{ _cgoBase0 := /*line :290:44*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :290:54*/&nparams; var _cgo2 *_Ctype_int = /*line :290:64*/&maxparams; var _cgo3 *_Ctype_char = /*line :290:76*/cname; var _cgo4 _Ctype_ulonglong = _Ctype_ulonglong /*line :290:94*/(*value.ul); _cgoBase5 := /*line :290:107*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :290:112*/_Cfunc_virTypedParamsAddULLongWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.b != nil {
				v := 0
				if *value.b {
					v = 1
				}
				ret = func() _Ctype_int{ _cgoBase0 := /*line :296:45*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :296:55*/&nparams; var _cgo2 *_Ctype_int = /*line :296:65*/&maxparams; var _cgo3 *_Ctype_char = /*line :296:77*/cname; var _cgo4 _Ctype_int = _Ctype_int /*line :296:89*/(v); _cgoBase5 := /*line :296:94*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :296:99*/_Cfunc_virTypedParamsAddBooleanWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.d != nil {
				ret = func() _Ctype_int{ _cgoBase0 := /*line :298:44*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :298:54*/&nparams; var _cgo2 *_Ctype_int = /*line :298:64*/&maxparams; var _cgo3 *_Ctype_char = /*line :298:76*/cname; var _cgo4 _Ctype_double = _Ctype_double /*line :298:91*/(*value.d); _cgoBase5 := /*line :298:103*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :298:108*/_Cfunc_virTypedParamsAddDoubleWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else if value.s != nil {
				cvalue := ( /*line :300:15*/_Cfunc_CString /*line :300:23*/)(*value.s)
				defer func() func() { _cgo0 := /*line :301:18*/unsafe.Pointer(cvalue); return func() { _cgoCheckPointer(_cgo0, nil); /*line :301:41*/_Cfunc_free(_cgo0); }}()()
				ret = func() _Ctype_int{ _cgoBase0 := /*line :302:44*/&cparams; _cgo0 := _cgoBase0; var _cgo1 *_Ctype_int = /*line :302:54*/&nparams; var _cgo2 *_Ctype_int = /*line :302:64*/&maxparams; var _cgo3 *_Ctype_char = /*line :302:76*/cname; var _cgo4 *_Ctype_char = /*line :302:83*/cvalue; _cgoBase5 := /*line :302:91*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgoBase0, 0 == 0); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :302:96*/_Cfunc_virTypedParamsAddStringWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
			} else {
				return nil, 0, fmt.Errorf("No typed parameter value set for field '%s'", name)
			}
			if ret < 0 {
				return nil, 0, makeError(&err)
			}
		}
	}

	return cparams, nparams, nil
}
