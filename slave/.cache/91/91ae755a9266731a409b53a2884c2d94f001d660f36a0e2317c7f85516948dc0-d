// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/events.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdint.h>
#include "events_helper.h"
*/
import _ "unsafe"

type EventHandleType int

const (
	EVENT_HANDLE_READABLE = EventHandleType(( /*line :41:42*/_Ciconst_VIR_EVENT_HANDLE_READABLE /*line :41:68*/))
	EVENT_HANDLE_WRITABLE = EventHandleType(( /*line :42:42*/_Ciconst_VIR_EVENT_HANDLE_WRITABLE /*line :42:68*/))
	EVENT_HANDLE_ERROR    = EventHandleType(( /*line :43:42*/_Ciconst_VIR_EVENT_HANDLE_ERROR /*line :43:65*/))
	EVENT_HANDLE_HANGUP   = EventHandleType(( /*line :44:42*/_Ciconst_VIR_EVENT_HANDLE_HANGUP /*line :44:66*/))
)

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventRegisterDefaultImpl
//
// Note that registering an event loop implementation must be
// done before creating any Connect object instance
func EventRegisterDefaultImpl() error {
	var err  /*line :52:10*/_Ctype_virError /*line :52:20*/
	if func() _Ctype_int{ _cgoBase0 := /*line :53:28*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); return /*line :53:33*/_Cfunc_virInitializeWrapper(_cgo0); }() < 0 {
		return makeError(&err)
	}
	e := adminInitialize()
	if e != nil {
		return e
	}
	if i := int(func() _Ctype_int{ _cgoBase0 := /*line :60:51*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); return /*line :60:56*/_Cfunc_virEventRegisterDefaultImplWrapper(_cgo0); }()); i != 0 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventRunDefaultImpl
func EventRunDefaultImpl() error {
	var err  /*line :68:10*/_Ctype_virError /*line :68:20*/
	if i := int(func() _Ctype_int{ _cgoBase0 := /*line :69:46*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); return /*line :69:51*/_Cfunc_virEventRunDefaultImplWrapper(_cgo0); }()); i != 0 {
		return makeError(&err)
	}
	return nil
}

type EventHandleCallback func(watch int, file int, events EventHandleType)

//export eventHandleCallback
func eventHandleCallback(watch int, fd int, events int, callbackID int) {
	callbackFunc := getCallbackId(callbackID)

	callback, ok := callbackFunc.(EventHandleCallback)
	if !ok {
		panic("Incorrect event handle callback data")
	}

	callback(watch, fd, (EventHandleType)(events))
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventAddHandle
func EventAddHandle(fd int, events EventHandleType, callback EventHandleCallback) (int, error) {
	callbackID := registerCallbackId(callback)

	var err  /*line :93:10*/_Ctype_virError /*line :93:20*/
	ret := func() _Ctype_int{ var _cgo0 _Ctype_int = /*line :94:35*/(_Ctype_int /*line :94:41*/)(fd); var _cgo1 _Ctype_int = /*line :94:48*/(_Ctype_int /*line :94:54*/)(events); var _cgo2 _Ctype_int = /*line :94:65*/(_Ctype_int /*line :94:71*/)(callbackID); _cgoBase3 := /*line :94:86*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :94:91*/_Cfunc_virEventAddHandleHelper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return int(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventUpdateHandle
func EventUpdateHandle(watch int, events EventHandleType) {
	( /*line :104:2*/_Cfunc_virEventUpdateHandleWrapper /*line :104:30*/)(( /*line :104:33*/_Ctype_int /*line :104:38*/)(watch), ( /*line :104:49*/_Ctype_int /*line :104:54*/)(events))
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventRemoveHandle
func EventRemoveHandle(watch int) error {
	var err  /*line :109:10*/_Ctype_virError /*line :109:20*/
	ret := func() _Ctype_int{ var _cgo0 _Ctype_int = /*line :110:39*/(_Ctype_int /*line :110:45*/)(watch); _cgoBase1 := /*line :110:55*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :110:60*/_Cfunc_virEventRemoveHandleWrapper(_cgo0, _cgo1); }()
	if ret < 0 {
		return makeError(&err)
	}

	return nil
}

type EventTimeoutCallback func(timer int)

//export eventTimeoutCallback
func eventTimeoutCallback(timer int, callbackID int) {
	callbackFunc := getCallbackId(callbackID)

	callback, ok := callbackFunc.(EventTimeoutCallback)
	if !ok {
		panic("Incorrect event timeout callback data")
	}

	callback(timer)
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventAddTimeout
func EventAddTimeout(freq int, callback EventTimeoutCallback) (int, error) {
	callbackID := registerCallbackId(callback)

	var err  /*line :136:10*/_Ctype_virError /*line :136:20*/
	ret := func() _Ctype_int{ var _cgo0 _Ctype_int = /*line :137:36*/(_Ctype_int /*line :137:42*/)(freq); var _cgo1 _Ctype_int = /*line :137:51*/(_Ctype_int /*line :137:57*/)(callbackID); _cgoBase2 := /*line :137:72*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :137:77*/_Cfunc_virEventAddTimeoutHelper(_cgo0, _cgo1, _cgo2); }()
	if ret == -1 {
		return 0, makeError(&err)
	}

	return int(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventUpdateTimeout
func EventUpdateTimeout(timer int, freq int) {
	( /*line :147:2*/_Cfunc_virEventUpdateTimeoutWrapper /*line :147:31*/)(( /*line :147:34*/_Ctype_int /*line :147:39*/)(timer), ( /*line :147:50*/_Ctype_int /*line :147:55*/)(freq))
}

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventRemoveTimeout
func EventRemoveTimeout(timer int) error {
	var err  /*line :152:10*/_Ctype_virError /*line :152:20*/
	ret := func() _Ctype_int{ var _cgo0 _Ctype_int = /*line :153:40*/(_Ctype_int /*line :153:46*/)(timer); _cgoBase1 := /*line :153:56*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :153:61*/_Cfunc_virEventRemoveTimeoutWrapper(_cgo0, _cgo1); }()
	if ret < 0 {
		return makeError(&err)
	}

	return nil
}

type EventHandleCallbackInfo struct {
	callback uintptr
	opaque   uintptr
	free     uintptr
}

type EventTimeoutCallbackInfo struct {
	callback uintptr
	opaque   uintptr
	free     uintptr
}

func (i *EventHandleCallbackInfo) Invoke(watch int, fd int, event EventHandleType) {
	( /*line :174:2*/_Cfunc_eventHandleCallbackInvoke /*line :174:28*/)( /*line :174:30*/_Ctype_int /*line :174:35*/(watch),  /*line :174:44*/_Ctype_int /*line :174:49*/(fd),  /*line :174:55*/_Ctype_int /*line :174:60*/(event),  /*line :174:69*/_Ctype_uintptr_t /*line :174:80*/(i.callback),  /*line :174:94*/_Ctype_uintptr_t /*line :174:105*/(i.opaque))
}

func (i *EventTimeoutCallbackInfo) Invoke(timer int) {
	( /*line :178:2*/_Cfunc_eventTimeoutCallbackInvoke /*line :178:29*/)( /*line :178:31*/_Ctype_int /*line :178:36*/(timer),  /*line :178:45*/_Ctype_uintptr_t /*line :178:56*/(i.callback),  /*line :178:70*/_Ctype_uintptr_t /*line :178:81*/(i.opaque))
}

func (i *EventHandleCallbackInfo) Free() {
	( /*line :182:2*/_Cfunc_eventHandleCallbackFree /*line :182:26*/)( /*line :182:28*/_Ctype_uintptr_t /*line :182:39*/(i.free),  /*line :182:49*/_Ctype_uintptr_t /*line :182:60*/(i.opaque))
}

func (i *EventTimeoutCallbackInfo) Free() {
	( /*line :186:2*/_Cfunc_eventTimeoutCallbackFree /*line :186:27*/)( /*line :186:29*/_Ctype_uintptr_t /*line :186:40*/(i.free),  /*line :186:50*/_Ctype_uintptr_t /*line :186:61*/(i.opaque))
}

type EventLoop interface {
	AddHandleFunc(fd int, event EventHandleType, callback *EventHandleCallbackInfo) int
	UpdateHandleFunc(watch int, event EventHandleType)
	RemoveHandleFunc(watch int) int
	AddTimeoutFunc(freq int, callback *EventTimeoutCallbackInfo) int
	UpdateTimeoutFunc(timer int, freq int)
	RemoveTimeoutFunc(timer int) int
}

var eventLoopImpl EventLoop

// See also https://libvirt.org/html/libvirt-libvirt-event.html#virEventRegisterImpl
//
// Note that registering an event loop implementation must be
// done before creating any Connect object instance
func EventRegisterImpl(impl EventLoop) error {
	var err  /*line :205:10*/_Ctype_virError /*line :205:20*/
	eventLoopImpl = impl
	if func() _Ctype_int{ _cgoBase0 := /*line :207:28*/&err; _cgo0 := _cgoBase0; _cgoCheckPointer(_cgoBase0, 0 == 0); return /*line :207:33*/_Cfunc_virInitializeWrapper(_cgo0); }() < 0 {
		return makeError(&err)
	}
	( /*line :210:2*/_Cfunc_virEventRegisterImplHelper /*line :210:29*/)()
	return nil
}

//export eventAddHandleFunc
func eventAddHandleFunc(fd  /*line :215:28*/_Ctype_int /*line :215:33*/, event  /*line :215:41*/_Ctype_int /*line :215:46*/, callback uintptr, opaque uintptr, free uintptr)  /*line :215:96*/_Ctype_int /*line :215:101*/ {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	cbinfo := &EventHandleCallbackInfo{
		callback: callback,
		opaque:   opaque,
		free:     free,
	}

	return  /*line :226:9*/_Ctype_int /*line :226:14*/(eventLoopImpl.AddHandleFunc(int(fd), EventHandleType(event), cbinfo))
}

//export eventUpdateHandleFunc
func eventUpdateHandleFunc(watch  /*line :230:34*/_Ctype_int /*line :230:39*/, event  /*line :230:47*/_Ctype_int /*line :230:52*/) {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	eventLoopImpl.UpdateHandleFunc(int(watch), EventHandleType(event))
}

//export eventRemoveHandleFunc
func eventRemoveHandleFunc(watch  /*line :239:34*/_Ctype_int /*line :239:39*/) {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	eventLoopImpl.RemoveHandleFunc(int(watch))
}

//export eventAddTimeoutFunc
func eventAddTimeoutFunc(freq  /*line :248:31*/_Ctype_int /*line :248:36*/, callback uintptr, opaque uintptr, free uintptr)  /*line :248:86*/_Ctype_int /*line :248:91*/ {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	cbinfo := &EventTimeoutCallbackInfo{
		callback: callback,
		opaque:   opaque,
		free:     free,
	}

	return  /*line :259:9*/_Ctype_int /*line :259:14*/(eventLoopImpl.AddTimeoutFunc(int(freq), cbinfo))
}

//export eventUpdateTimeoutFunc
func eventUpdateTimeoutFunc(timer  /*line :263:35*/_Ctype_int /*line :263:40*/, freq  /*line :263:47*/_Ctype_int /*line :263:52*/) {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	eventLoopImpl.UpdateTimeoutFunc(int(timer), int(freq))
}

//export eventRemoveTimeoutFunc
func eventRemoveTimeoutFunc(timer  /*line :272:35*/_Ctype_int /*line :272:40*/) {
	if eventLoopImpl == nil {
		panic("Event loop impl is missing")
	}

	eventLoopImpl.RemoveTimeoutFunc(int(timer))
}
