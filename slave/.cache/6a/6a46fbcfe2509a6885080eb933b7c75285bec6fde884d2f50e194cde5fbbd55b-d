// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/storage_pool.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"reflect"
	"unsafe"
)

type StoragePoolState int

const (
	STORAGE_POOL_INACTIVE     = StoragePoolState(( /*line :46:47*/_Ciconst_VIR_STORAGE_POOL_INACTIVE /*line :46:73*/))     // Not running
	STORAGE_POOL_BUILDING     = StoragePoolState(( /*line :47:47*/_Ciconst_VIR_STORAGE_POOL_BUILDING /*line :47:73*/))     // Initializing pool,not available
	STORAGE_POOL_RUNNING      = StoragePoolState(( /*line :48:47*/_Ciconst_VIR_STORAGE_POOL_RUNNING /*line :48:72*/))      // Running normally
	STORAGE_POOL_DEGRADED     = StoragePoolState(( /*line :49:47*/_Ciconst_VIR_STORAGE_POOL_DEGRADED /*line :49:73*/))     // Running degraded
	STORAGE_POOL_INACCESSIBLE = StoragePoolState(( /*line :50:47*/_Ciconst_VIR_STORAGE_POOL_INACCESSIBLE /*line :50:77*/)) // Running,but not accessible
)

type StoragePoolBuildFlags uint

const (
	STORAGE_POOL_BUILD_NEW          = StoragePoolBuildFlags(( /*line :56:58*/_Ciconst_VIR_STORAGE_POOL_BUILD_NEW /*line :56:85*/))          // Regular build from scratch
	STORAGE_POOL_BUILD_REPAIR       = StoragePoolBuildFlags(( /*line :57:58*/_Ciconst_VIR_STORAGE_POOL_BUILD_REPAIR /*line :57:88*/))       // Repair / reinitialize
	STORAGE_POOL_BUILD_RESIZE       = StoragePoolBuildFlags(( /*line :58:58*/_Ciconst_VIR_STORAGE_POOL_BUILD_RESIZE /*line :58:88*/))       // Extend existing pool
	STORAGE_POOL_BUILD_NO_OVERWRITE = StoragePoolBuildFlags(( /*line :59:58*/_Ciconst_VIR_STORAGE_POOL_BUILD_NO_OVERWRITE /*line :59:94*/)) // Do not overwrite existing pool
	STORAGE_POOL_BUILD_OVERWRITE    = StoragePoolBuildFlags(( /*line :60:58*/_Ciconst_VIR_STORAGE_POOL_BUILD_OVERWRITE /*line :60:91*/))    // Overwrite data
)

type StoragePoolCreateFlags uint

const (
	STORAGE_POOL_CREATE_NORMAL                  = StoragePoolCreateFlags(( /*line :66:71*/_Ciconst_VIR_STORAGE_POOL_CREATE_NORMAL /*line :66:102*/))
	STORAGE_POOL_CREATE_WITH_BUILD              = StoragePoolCreateFlags(( /*line :67:71*/_Ciconst_VIR_STORAGE_POOL_CREATE_WITH_BUILD /*line :67:106*/))
	STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE    = StoragePoolCreateFlags(( /*line :68:71*/_Ciconst_VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE /*line :68:116*/))
	STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE = StoragePoolCreateFlags(( /*line :69:71*/_Ciconst_VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE /*line :69:119*/))
)

type StoragePoolDefineFlags uint

const (
	STORAGE_POOL_DEFINE_VALIDATE = StoragePoolDefineFlags(( /*line :75:56*/_Ciconst_VIR_STORAGE_POOL_DEFINE_VALIDATE /*line :75:89*/))
)

type StoragePoolDeleteFlags uint

const (
	STORAGE_POOL_DELETE_NORMAL = StoragePoolDeleteFlags(( /*line :81:54*/_Ciconst_VIR_STORAGE_POOL_DELETE_NORMAL /*line :81:85*/))
	STORAGE_POOL_DELETE_ZEROED = StoragePoolDeleteFlags(( /*line :82:54*/_Ciconst_VIR_STORAGE_POOL_DELETE_ZEROED /*line :82:85*/))
)

type StoragePoolEventID int

const (
	STORAGE_POOL_EVENT_ID_LIFECYCLE = StoragePoolEventID(( /*line :88:55*/_Ciconst_VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE /*line :88:91*/))
	STORAGE_POOL_EVENT_ID_REFRESH   = StoragePoolEventID(( /*line :89:55*/_Ciconst_VIR_STORAGE_POOL_EVENT_ID_REFRESH /*line :89:89*/))
)

type StoragePoolEventLifecycleType int

const (
	STORAGE_POOL_EVENT_DEFINED   = StoragePoolEventLifecycleType(( /*line :95:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_DEFINED /*line :95:94*/))
	STORAGE_POOL_EVENT_UNDEFINED = StoragePoolEventLifecycleType(( /*line :96:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_UNDEFINED /*line :96:96*/))
	STORAGE_POOL_EVENT_STARTED   = StoragePoolEventLifecycleType(( /*line :97:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_STARTED /*line :97:94*/))
	STORAGE_POOL_EVENT_STOPPED   = StoragePoolEventLifecycleType(( /*line :98:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_STOPPED /*line :98:94*/))
	STORAGE_POOL_EVENT_CREATED   = StoragePoolEventLifecycleType(( /*line :99:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_CREATED /*line :99:94*/))
	STORAGE_POOL_EVENT_DELETED   = StoragePoolEventLifecycleType(( /*line :100:63*/_Ciconst_VIR_STORAGE_POOL_EVENT_DELETED /*line :100:94*/))
)

type StoragePool struct {
	ptr  /*line :104:6*/_Ctype_virStoragePoolPtr /*line :104:25*/
}

type StoragePoolInfo struct {
	State      StoragePoolState
	Capacity   uint64
	Allocation uint64
	Available  uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolBuild
func (p *StoragePool) Build(flags StoragePoolBuildFlags) error {
	var err  /*line :116:10*/_Ctype_virError /*line :116:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :117:41*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :117:54*/(flags); _cgoBase2 := /*line :117:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :117:68*/_Cfunc_virStoragePoolBuildWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolCreate
func (p *StoragePool) Create(flags StoragePoolCreateFlags) error {
	var err  /*line :126:10*/_Ctype_virError /*line :126:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :127:42*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :127:55*/(flags); _cgoBase2 := /*line :127:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :127:69*/_Cfunc_virStoragePoolCreateWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolDelete
func (p *StoragePool) Delete(flags StoragePoolDeleteFlags) error {
	var err  /*line :136:10*/_Ctype_virError /*line :136:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :137:42*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :137:55*/(flags); _cgoBase2 := /*line :137:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :137:69*/_Cfunc_virStoragePoolDeleteWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolDestroy
func (p *StoragePool) Destroy() error {
	var err  /*line :146:10*/_Ctype_virError /*line :146:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :147:43*/p.ptr; _cgoBase1 := /*line :147:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :147:55*/_Cfunc_virStoragePoolDestroyWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolFree
func (p *StoragePool) Free() error {
	var err  /*line :156:10*/_Ctype_virError /*line :156:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :157:37*/p.ptr; _cgoBase1 := /*line :157:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :157:49*/_Cfunc_virStoragePoolFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolRef
func (c *StoragePool) Ref() error {
	var err  /*line :166:10*/_Ctype_virError /*line :166:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :167:36*/c.ptr; _cgoBase1 := /*line :167:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :167:48*/_Cfunc_virStoragePoolRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetAutostart
func (p *StoragePool) GetAutostart() (bool, error) {
	var out  /*line :176:10*/_Ctype_int /*line :176:15*/
	var err  /*line :177:10*/_Ctype_virError /*line :177:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :178:48*/p.ptr; var _cgo1 *_Ctype_int = /*line :178:55*/(*_Ctype_int /*line :178:62*/)(unsafe.Pointer(&out)); _cgoBase2 := /*line :178:87*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :178:92*/_Cfunc_virStoragePoolGetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	switch out {
	case 1:
		return true, nil
	default:
		return false, nil
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetInfo
func (p *StoragePool) GetInfo() (*StoragePoolInfo, error) {
	var cinfo  /*line :192:12*/_Ctype_virStoragePoolInfo /*line :192:32*/
	var err  /*line :193:10*/_Ctype_virError /*line :193:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :194:43*/p.ptr; var _cgo1 *_Ctype_struct__virStoragePoolInfo = /*line :194:50*/&cinfo; _cgoBase2 := /*line :194:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :194:63*/_Cfunc_virStoragePoolGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return nil, makeError(&err)
	}
	return &StoragePoolInfo{
		State:      StoragePoolState(cinfo.state),
		Capacity:   uint64(cinfo.capacity),
		Allocation: uint64(cinfo.allocation),
		Available:  uint64(cinfo.available),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetName
func (p *StoragePool) GetName() (string, error) {
	var err  /*line :208:10*/_Ctype_virError /*line :208:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :209:41*/p.ptr; _cgoBase1 := /*line :209:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :209:53*/_Cfunc_virStoragePoolGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :213:9*/_Cfunc_GoString /*line :213:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetUUID
func (p *StoragePool) GetUUID() ([]byte, error) {
	var cUuid [( /*line :218:13*/_Ciconst_VIR_UUID_BUFLEN /*line :218:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :220:10*/_Ctype_virError /*line :220:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :221:43*/p.ptr; var _cgo1 *_Ctype_uchar = /*line :221:50*/(*_Ctype_uchar /*line :221:59*/)(cuidPtr); _cgoBase2 := /*line :221:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :221:76*/_Cfunc_virStoragePoolGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :225:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :225:28*/_Ciconst_VIR_UUID_BUFLEN /*line :225:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :225:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetUUIDString
func (p *StoragePool) GetUUIDString() (string, error) {
	var cUuid [( /*line :230:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :230:36*/)]( /*line :230:39*/_Ctype_char /*line :230:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :232:10*/_Ctype_virError /*line :232:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :233:49*/p.ptr; var _cgo1 *_Ctype_char = /*line :233:56*/(*_Ctype_char /*line :233:64*/)(cuidPtr); _cgoBase2 := /*line :233:76*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :233:81*/_Cfunc_virStoragePoolGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :237:9*/_Cfunc_GoString /*line :237:18*/)((* /*line :237:22*/_Ctype_char /*line :237:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolGetXMLDesc
func (p *StoragePool) GetXMLDesc(flags StorageXMLFlags) (string, error) {
	var err  /*line :242:10*/_Ctype_virError /*line :242:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :243:46*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :243:59*/(flags); _cgoBase2 := /*line :243:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :243:73*/_Cfunc_virStoragePoolGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :247:9*/_Cfunc_GoString /*line :247:18*/)(result)
	func() { _cgo0 := /*line :248:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :248:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolIsActive
func (p *StoragePool) IsActive() (bool, error) {
	var err  /*line :254:10*/_Ctype_virError /*line :254:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :255:44*/p.ptr; _cgoBase1 := /*line :255:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :255:56*/_Cfunc_virStoragePoolIsActiveWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolIsPersistent
func (p *StoragePool) IsPersistent() (bool, error) {
	var err  /*line :267:10*/_Ctype_virError /*line :267:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :268:48*/p.ptr; _cgoBase1 := /*line :268:55*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :268:60*/_Cfunc_virStoragePoolIsPersistentWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolSetAutostart
func (p *StoragePool) SetAutostart(autostart bool) error {
	var cAutostart  /*line :280:17*/_Ctype_int /*line :280:22*/
	switch autostart {
	case true:
		cAutostart = 1
	default:
		cAutostart = 0
	}
	var err  /*line :287:10*/_Ctype_virError /*line :287:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :288:48*/p.ptr; var _cgo1 _Ctype_int = /*line :288:55*/cAutostart; _cgoBase2 := /*line :288:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :288:72*/_Cfunc_virStoragePoolSetAutostartWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolRefresh
func (p *StoragePool) Refresh(flags uint32) error {
	var err  /*line :297:10*/_Ctype_virError /*line :297:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :298:43*/p.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :298:56*/(flags); _cgoBase2 := /*line :298:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :298:70*/_Cfunc_virStoragePoolRefreshWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolUndefine
func (p *StoragePool) Undefine() error {
	var err  /*line :307:10*/_Ctype_virError /*line :307:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :308:44*/p.ptr; _cgoBase1 := /*line :308:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :308:56*/_Cfunc_virStoragePoolUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolCreateXML
func (p *StoragePool) StorageVolCreateXML(xmlConfig string, flags StorageVolCreateFlags) (*StorageVol, error) {
	cXml := ( /*line :317:10*/_Cfunc_CString /*line :317:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :318:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :318:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :319:10*/_Ctype_virError /*line :319:20*/
	ptr := func() _Ctype_virStorageVolPtr{ _cgo0 := /*line :320:41*/p.ptr; var _cgo1 *_Ctype_char = /*line :320:48*/cXml; var _cgo2 _Ctype_uint = _Ctype_uint /*line :320:60*/(flags); _cgoBase3 := /*line :320:69*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :320:74*/_Cfunc_virStorageVolCreateXMLWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StorageVol{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolCreateXMLFrom
func (p *StoragePool) StorageVolCreateXMLFrom(xmlConfig string, clonevol *StorageVol, flags StorageVolCreateFlags) (*StorageVol, error) {
	cXml := ( /*line :329:10*/_Cfunc_CString /*line :329:18*/)(string(xmlConfig))
	defer func() func() { _cgo0 := /*line :330:15*/unsafe.Pointer(cXml); return func() { _cgoCheckPointer(_cgo0, nil); /*line :330:36*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :331:10*/_Ctype_virError /*line :331:20*/
	ptr := func() _Ctype_virStorageVolPtr{ _cgo0 := /*line :332:45*/p.ptr; var _cgo1 *_Ctype_char = /*line :332:52*/cXml; _cgo2 := /*line :332:58*/clonevol.ptr; var _cgo3 _Ctype_uint = _Ctype_uint /*line :332:78*/(flags); _cgoBase4 := /*line :332:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :332:92*/_Cfunc_virStorageVolCreateXMLFromWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StorageVol{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolLookupByName
func (p *StoragePool) LookupStorageVolByName(name string) (*StorageVol, error) {
	cName := ( /*line :341:11*/_Cfunc_CString /*line :341:19*/)(name)
	defer func() func() { _cgo0 := /*line :342:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); /*line :342:37*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :343:10*/_Ctype_virError /*line :343:20*/
	ptr := func() _Ctype_virStorageVolPtr{ _cgo0 := /*line :344:44*/p.ptr; var _cgo1 *_Ctype_char = /*line :344:51*/cName; _cgoBase2 := /*line :344:58*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :344:63*/_Cfunc_virStorageVolLookupByNameWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &StorageVol{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolNumOfVolumes
func (p *StoragePool) NumOfStorageVolumes() (int, error) {
	var err  /*line :353:10*/_Ctype_virError /*line :353:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :354:52*/p.ptr; _cgoBase1 := /*line :354:59*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :354:64*/_Cfunc_virStoragePoolNumOfVolumesWrapper(_cgo0, _cgo1); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolListVolumes
func (p *StoragePool) ListStorageVolumes() ([]string, error) {
	const maxVols = 1024
	var names [maxVols](* /*line :364:23*/_Ctype_char /*line :364:29*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :366:10*/_Ctype_virError /*line :366:20*/
	numStorageVols := func() _Ctype_int{ _cgo0 := /*line :368:3*/p.ptr; _cgo1 := /*line :369:3*/(**_Ctype_char /*line :369:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :370:3*/maxVols; _cgoBase3 := /*line :370:12*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :370:17*/_Cfunc_virStoragePoolListVolumesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numStorageVols == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numStorageVols)
	for k := 0; k < int(numStorageVols); k++ {
		goNames[k] = ( /*line :376:16*/_Cfunc_GoString /*line :376:25*/)(names[k])
		func() { _cgo0 := /*line :377:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :377:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolListAllVolumes
func (p *StoragePool) ListAllStorageVolumes(flags uint32) ([]StorageVol, error) {
	var cList * /*line :384:13*/_Ctype_virStorageVolPtr /*line :384:31*/
	var err  /*line :385:10*/_Ctype_virError /*line :385:20*/
	numVols := func() _Ctype_int{ _cgo0 := /*line :386:51*/p.ptr; _cgoBase1 := /*line :386:81*/&cList; _cgo1 := /*line :386:58*/(**_Ctype_virStorageVolPtr /*line :386:79*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :386:96*/(flags); _cgoBase3 := /*line :386:105*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :386:110*/_Cfunc_virStoragePoolListAllVolumesWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numVols == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numVols),
		Cap:  int(numVols),
	}
	var pools []StorageVol
	slice := *(*[] /*line :396:16*/_Ctype_virStorageVolPtr /*line :396:34*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, StorageVol{ptr})
	}
	func() { _cgo0 := /*line :400:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :400:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}
