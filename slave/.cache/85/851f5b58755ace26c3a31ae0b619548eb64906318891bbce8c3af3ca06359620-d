// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/node_device_events.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

import (
	"fmt"
	"unsafe"
)

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include "node_device_events_helper.h"
*/
import _ "unsafe"

type NodeDeviceEventGenericCallback func(c *Connect, d *NodeDevice)

type NodeDeviceEventLifecycle struct {
	Event NodeDeviceEventLifecycleType
	// TODO: we can make Detail typesafe somehow ?
	Detail int
}

type NodeDeviceEventLifecycleCallback func(c *Connect, n *NodeDevice, event *NodeDeviceEventLifecycle)

//export nodeDeviceEventLifecycleCallback
func nodeDeviceEventLifecycleCallback(c  /*line :53:41*/_Ctype_virConnectPtr /*line :53:56*/, s  /*line :53:60*/_Ctype_virNodeDevicePtr /*line :53:78*/,
	event int, detail int,
	goCallbackId int) {

	node_device := &NodeDevice{ptr: s}
	connection := &Connect{ptr: c}

	eventDetails := &NodeDeviceEventLifecycle{
		Event:  NodeDeviceEventLifecycleType(event),
		Detail: detail,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(NodeDeviceEventLifecycleCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, node_device, eventDetails)
}

//export nodeDeviceEventGenericCallback
func nodeDeviceEventGenericCallback(c  /*line :74:39*/_Ctype_virConnectPtr /*line :74:54*/, d  /*line :74:58*/_Ctype_virNodeDevicePtr /*line :74:76*/,
	goCallbackId int) {

	node_device := &NodeDevice{ptr: d}
	connection := &Connect{ptr: c}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(NodeDeviceEventGenericCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, node_device)
}

func (c *Connect) NodeDeviceEventLifecycleRegister(device *NodeDevice, callback NodeDeviceEventLifecycleCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :91:32*/_Cgo_ptr(_Cfpvar_fp_nodeDeviceEventLifecycleCallbackHelper) /*line :91:71*/))
	var cdevice  /*line :92:14*/_Ctype_virNodeDevicePtr /*line :92:32*/
	if device != nil {
		cdevice = device.ptr
	}
	var err  /*line :96:10*/_Ctype_virError /*line :96:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :97:54*/c.ptr; _cgo1 := /*line :97:61*/cdevice; var _cgo2 _Ctype_int = /*line :98:3*/_Ciconst_VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE /*line :98:39*/; var _cgo3 *[0]byte = _Ctype_virConnectNodeDeviceEventGenericCallback /*line :99:45*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :100:9*/(goCallBackId); _cgoBase5 := /*line :100:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :100:30*/_Cfunc_virConnectNodeDeviceEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) NodeDeviceEventUpdateRegister(device *NodeDevice, callback NodeDeviceEventGenericCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)

	callbackPtr := unsafe.Pointer(( /*line :111:32*/_Cgo_ptr(_Cfpvar_fp_nodeDeviceEventGenericCallbackHelper) /*line :111:69*/))
	var cdevice  /*line :112:14*/_Ctype_virNodeDevicePtr /*line :112:32*/
	if device != nil {
		cdevice = device.ptr
	}
	var err  /*line :116:10*/_Ctype_virError /*line :116:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :117:54*/c.ptr; _cgo1 := /*line :117:61*/cdevice; var _cgo2 _Ctype_int = /*line :118:3*/_Ciconst_VIR_NODE_DEVICE_EVENT_ID_UPDATE /*line :118:36*/; var _cgo3 *[0]byte = _Ctype_virConnectNodeDeviceEventGenericCallback /*line :119:45*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :120:9*/(goCallBackId); _cgoBase5 := /*line :120:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :120:30*/_Cfunc_virConnectNodeDeviceEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) NodeDeviceEventDeregister(callbackId int) error {
	// Deregister the callback
	var err  /*line :130:10*/_Ctype_virError /*line :130:20*/
	ret := int(func() _Ctype_int{ _cgo0 := /*line :131:61*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :131:73*/(callbackId); _cgoBase2 := /*line :131:87*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :131:92*/_Cfunc_virConnectNodeDeviceEventDeregisterAnyWrapper(_cgo0, _cgo1, _cgo2); }())
	if ret < 0 {
		return makeError(&err)
	}
	return nil
}

func (e NodeDeviceEventLifecycle) String() string {
	var event string
	switch e.Event {
	case NODE_DEVICE_EVENT_CREATED:
		event = "created"

	case NODE_DEVICE_EVENT_DELETED:
		event = "deleted"

	default:
		event = "unknown"
	}

	return fmt.Sprintf("NodeDevice event=%q", event)
}
