// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/github.com/coreos/go-systemd/v22@v22.6.0/internal/dlopen/dlopen_example.go:1:1
// Copyright 2015 CoreOS, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//go:build linux

package dlopen

// #include <string.h>
// #include <stdlib.h>
//
// int
// my_strlen(void *f, const char *s)
// {
//   size_t (*strlen)(const char *);
//
//   strlen = (size_t (*)(const char *))f;
//   return strlen(s);
// }
import _ "unsafe"

import (
	"fmt"
	"unsafe"
)

func strlen(libs []string, s string) (int, error) {
	h, err := GetHandle(libs)
	if err != nil {
		return -1, fmt.Errorf(`couldn't get a handle to the library: %v`, err)
	}
	defer h.Close()

	f := "strlen"
	cs := ( /*line :45:8*/_Cfunc_CString /*line :45:16*/)(s)
	defer func() func() { _cgo0 := /*line :46:15*/unsafe.Pointer(cs); return func() { _cgoCheckPointer(_cgo0, nil); /*line :46:34*/_Cfunc_free(_cgo0); }}()()

	strlen, err := h.GetSymbolPointer(f)
	if err != nil {
		return -1, fmt.Errorf(`couldn't get symbol %q: %v`, f, err)
	}

	len := func() _Ctype_int{ _cgo0 := /*line :53:21*/strlen; var _cgo1 *_Ctype_char = /*line :53:29*/cs; _cgoCheckPointer(_cgo0, nil); return /*line :53:32*/_Cfunc_my_strlen(_cgo0, _cgo1); }()

	return int(len), nil
}
