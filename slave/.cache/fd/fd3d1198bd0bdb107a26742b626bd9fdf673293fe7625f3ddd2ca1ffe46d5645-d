// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/secret_events.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

import (
	"fmt"
	"unsafe"
)

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include "secret_events_helper.h"
*/
import _ "unsafe"

type SecretEventLifecycle struct {
	Event SecretEventLifecycleType
	// TODO: we can make Detail typesafe somehow ?
	Detail int
}

type SecretEventLifecycleCallback func(c *Connect, n *Secret, event *SecretEventLifecycle)

type SecretEventGenericCallback func(c *Connect, n *Secret)

//export secretEventLifecycleCallback
func secretEventLifecycleCallback(c  /*line :53:37*/_Ctype_virConnectPtr /*line :53:52*/, n  /*line :53:56*/_Ctype_virSecretPtr /*line :53:70*/,
	event int, detail int,
	goCallbackId int) {

	secret := &Secret{ptr: n}
	connection := &Connect{ptr: c}

	eventDetails := &SecretEventLifecycle{
		Event:  SecretEventLifecycleType(event),
		Detail: detail,
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(SecretEventLifecycleCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, secret, eventDetails)
}

//export secretEventGenericCallback
func secretEventGenericCallback(c  /*line :74:35*/_Ctype_virConnectPtr /*line :74:50*/, n  /*line :74:54*/_Ctype_virSecretPtr /*line :74:68*/,
	goCallbackId int) {

	secret := &Secret{ptr: n}
	connection := &Connect{ptr: c}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(SecretEventGenericCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, secret)
}

func (c *Connect) SecretEventLifecycleRegister(secret *Secret, callback SecretEventLifecycleCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)
	callbackPtr := unsafe.Pointer(( /*line :90:32*/_Cgo_ptr(_Cfpvar_fp_secretEventLifecycleCallbackHelper) /*line :90:67*/))
	var csecret  /*line :91:14*/_Ctype_virSecretPtr /*line :91:28*/
	if secret != nil {
		csecret = secret.ptr
	}
	var err  /*line :95:10*/_Ctype_virError /*line :95:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :96:50*/c.ptr; _cgo1 := /*line :96:57*/csecret; var _cgo2 _Ctype_int = /*line :97:3*/_Ciconst_VIR_SECRET_EVENT_ID_LIFECYCLE /*line :97:34*/; var _cgo3 *[0]byte = _Ctype_virConnectSecretEventGenericCallback /*line :98:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :99:9*/(goCallBackId); _cgoBase5 := /*line :99:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :99:30*/_Cfunc_virConnectSecretEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) SecretEventValueChangedRegister(secret *Secret, callback SecretEventGenericCallback) (int, error) {
	goCallBackId := registerCallbackId(callback)
	callbackPtr := unsafe.Pointer(( /*line :109:32*/_Cgo_ptr(_Cfpvar_fp_secretEventGenericCallbackHelper) /*line :109:65*/))
	var csecret  /*line :110:14*/_Ctype_virSecretPtr /*line :110:28*/
	if secret != nil {
		csecret = secret.ptr
	}
	var err  /*line :114:10*/_Ctype_virError /*line :114:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :115:50*/c.ptr; _cgo1 := /*line :115:57*/csecret; var _cgo2 _Ctype_int = /*line :116:3*/_Ciconst_VIR_SECRET_EVENT_ID_VALUE_CHANGED /*line :116:38*/; var _cgo3 *[0]byte = _Ctype_virConnectSecretEventGenericCallback /*line :117:41*/(callbackPtr); var _cgo4 _Ctype_long = _Ctype_long /*line :118:9*/(goCallBackId); _cgoBase5 := /*line :118:25*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :118:30*/_Cfunc_virConnectSecretEventRegisterAnyHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret == -1 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

func (c *Connect) SecretEventDeregister(callbackId int) error {
	// Deregister the callback
	var err  /*line :128:10*/_Ctype_virError /*line :128:20*/
	ret := int(func() _Ctype_int{ _cgo0 := /*line :129:57*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :129:69*/(callbackId); _cgoBase2 := /*line :129:83*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :129:88*/_Cfunc_virConnectSecretEventDeregisterAnyWrapper(_cgo0, _cgo1, _cgo2); }())
	if ret < 0 {
		return makeError(&err)
	}
	return nil
}

func (e SecretEventLifecycle) String() string {
	var event string
	switch e.Event {
	case SECRET_EVENT_DEFINED:
		event = "defined"

	case SECRET_EVENT_UNDEFINED:
		event = "undefined"

	default:
		event = "unknown"
	}

	return fmt.Sprintf("Secret event=%q", event)
}
