// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/qemu.go:1:1
//go:build !libvirt_without_qemu
// +build !libvirt_without_qemu

/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
// Can't rely on pkg-config for libvirt-qemu since it was not
// installed until 2.6.0 onwards
#cgo !libvirt_dlopen LDFLAGS: -lvirt-qemu
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "qemu_helper.h"
*/
import _ "unsafe"

import (
	"os"
	"unsafe"
)

/*
 * QMP has two different kinds of ways to talk to QEMU. One is legacy (HMP,
 * or 'human' monitor protocol. The default is QMP, which is all-JSON.
 *
 * QMP json commands are of the format:
 * 	{"execute" : "query-cpus"}
 *
 * whereas the same command in 'HMP' would be:
 *	'info cpus'
 */

type DomainQemuMonitorCommandFlags uint

const (
	DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT = DomainQemuMonitorCommandFlags(( /*line :63:70*/_Ciconst_VIR_DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT /*line :63:110*/))
	DOMAIN_QEMU_MONITOR_COMMAND_HMP     = DomainQemuMonitorCommandFlags(( /*line :64:70*/_Ciconst_VIR_DOMAIN_QEMU_MONITOR_COMMAND_HMP /*line :64:106*/))
)

type DomainQemuAgentCommandTimeout int

const (
	DOMAIN_QEMU_AGENT_COMMAND_MIN      = DomainQemuAgentCommandTimeout(( /*line :70:69*/_Ciconst_VIR_DOMAIN_QEMU_AGENT_COMMAND_MIN /*line :70:103*/))
	DOMAIN_QEMU_AGENT_COMMAND_BLOCK    = DomainQemuAgentCommandTimeout(( /*line :71:69*/_Ciconst_VIR_DOMAIN_QEMU_AGENT_COMMAND_BLOCK /*line :71:105*/))
	DOMAIN_QEMU_AGENT_COMMAND_DEFAULT  = DomainQemuAgentCommandTimeout(( /*line :72:69*/_Ciconst_VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT /*line :72:107*/))
	DOMAIN_QEMU_AGENT_COMMAND_NOWAIT   = DomainQemuAgentCommandTimeout(( /*line :73:69*/_Ciconst_VIR_DOMAIN_QEMU_AGENT_COMMAND_NOWAIT /*line :73:106*/))
	DOMAIN_QEMU_AGENT_COMMAND_SHUTDOWN = DomainQemuAgentCommandTimeout(( /*line :74:69*/_Ciconst_VIR_DOMAIN_QEMU_AGENT_COMMAND_SHUTDOWN /*line :74:108*/))
)

type DomainQemuMonitorEventFlags uint

const (
	CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_REGEX  = DomainQemuMonitorEventFlags(( /*line :80:82*/_Ciconst_VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_REGEX /*line :80:135*/))
	CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_NOCASE = DomainQemuMonitorEventFlags(( /*line :81:82*/_Ciconst_VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_NOCASE /*line :81:136*/))
)

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virDomainQemuMonitorCommand
func (d *Domain) QemuMonitorCommand(command string, flags DomainQemuMonitorCommandFlags) (string, error) {
	var cResult * /*line :86:15*/_Ctype_char /*line :86:21*/
	cCommand := ( /*line :87:14*/_Cfunc_CString /*line :87:22*/)(command)
	defer func() func() { _cgo0 := /*line :88:15*/unsafe.Pointer(cCommand); return func() { _cgoCheckPointer(_cgo0, nil); /*line :88:40*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :89:10*/_Ctype_virError /*line :89:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :90:49*/d.ptr; var _cgo1 *_Ctype_char = /*line :90:56*/cCommand; _cgoBase2 := /*line :90:66*/&cResult; _cgo2 := _cgoBase2; var _cgo3 _Ctype_uint = _Ctype_uint /*line :90:82*/(flags); _cgoBase4 := /*line :90:91*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :90:96*/_Cfunc_virDomainQemuMonitorCommandWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result != 0 {
		return "", makeError(&err)
	}

	rstring := ( /*line :96:13*/_Cfunc_GoString /*line :96:22*/)(cResult)
	func() { _cgo0 := /*line :97:9*/unsafe.Pointer(cResult); _cgoCheckPointer(_cgo0, nil); /*line :97:33*/_Cfunc_free(_cgo0); }()
	return rstring, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virDomainQemuMonitorCommandWithFiles
func (d *Domain) QemuMonitorCommandWithFiles(command string, infiles []os.File, flags DomainQemuMonitorCommandFlags) (string, []*os.File, error) {
	ninfiles := len(infiles)
	cinfiles := make([] /*line :104:21*/_Ctype_int /*line :104:26*/, ninfiles)
	for i := 0; i < ninfiles; i++ {
		cinfiles[i] =  /*line :106:17*/_Ctype_int /*line :106:22*/(infiles[i].Fd())
	}
	cCommand := ( /*line :108:14*/_Cfunc_CString /*line :108:22*/)(command)
	defer func() func() { _cgo0 := /*line :109:15*/unsafe.Pointer(cCommand); return func() { _cgoCheckPointer(_cgo0, nil); /*line :109:40*/_Cfunc_free(_cgo0); }}()()

	var cResult * /*line :111:15*/_Ctype_char /*line :111:21*/
	var cnoutfiles  /*line :112:17*/_Ctype_uint /*line :112:23*/
	var coutfiles * /*line :113:17*/_Ctype_int /*line :113:22*/
	var err  /*line :114:10*/_Ctype_virError /*line :114:20*/
	var cinfilesPtr * /*line :115:19*/_Ctype_int /*line :115:24*/ = nil
	if ninfiles > 0 {
		cinfilesPtr = &cinfiles[0]
	}
	result := func() _Ctype_int{ _cgo0 := /*line :119:58*/d.ptr; var _cgo1 *_Ctype_char = /*line :119:65*/cCommand; var _cgo2 _Ctype_uint = _Ctype_uint /*line :120:9*/(ninfiles); var _cgo3 *_Ctype_int = /*line :120:21*/cinfilesPtr; var _cgo4 *_Ctype_uint = /*line :120:34*/&cnoutfiles; _cgoBase5 := /*line :120:47*/&coutfiles; _cgo5 := _cgoBase5; _cgoBase6 := /*line :121:3*/&cResult; _cgo6 := _cgoBase6; var _cgo7 _Ctype_uint = _Ctype_uint /*line :121:19*/(flags); _cgoBase8 := /*line :121:28*/&err; _cgo8 := _cgoBase8; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); _cgoCheckPointer(_cgoBase6, 0 == 0); _cgoCheckPointer(_cgoBase8, 0 == 0); return /*line :121:33*/_Cfunc_virDomainQemuMonitorCommandWithFilesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8); }()

	if result != 0 {
		return "", []*os.File{}, makeError(&err)
	}

	outfiles := []*os.File{}
	for i := 0; i < int(cnoutfiles); i++ {
		coutfile := *(* /*line :129:18*/_Ctype_int /*line :129:23*/)(unsafe.Pointer(uintptr(unsafe.Pointer(coutfiles)) + (unsafe.Sizeof(*coutfiles) * uintptr(i))))

		outfiles = append(outfiles, os.NewFile(uintptr(coutfile), "mon-cmd-out"))
	}
	func() { _cgo0 := /*line :133:9*/unsafe.Pointer(coutfiles); _cgoCheckPointer(_cgo0, nil); /*line :133:35*/_Cfunc_free(_cgo0); }()

	rstring := ( /*line :135:13*/_Cfunc_GoString /*line :135:22*/)(cResult)
	func() { _cgo0 := /*line :136:9*/unsafe.Pointer(cResult); _cgoCheckPointer(_cgo0, nil); /*line :136:33*/_Cfunc_free(_cgo0); }()
	return rstring, outfiles, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virDomainQemuAgentCommand
func (d *Domain) QemuAgentCommand(command string, timeout DomainQemuAgentCommandTimeout, flags uint32) (string, error) {
	cCommand := ( /*line :142:14*/_Cfunc_CString /*line :142:22*/)(command)
	defer func() func() { _cgo0 := /*line :143:15*/unsafe.Pointer(cCommand); return func() { _cgoCheckPointer(_cgo0, nil); /*line :143:40*/_Cfunc_free(_cgo0); }}()()
	var err  /*line :144:10*/_Ctype_virError /*line :144:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :145:47*/d.ptr; var _cgo1 *_Ctype_char = /*line :145:54*/cCommand; var _cgo2 _Ctype_int = _Ctype_int /*line :145:69*/(timeout); var _cgo3 _Ctype_uint = _Ctype_uint /*line :145:86*/(flags); _cgoBase4 := /*line :145:95*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :145:100*/_Cfunc_virDomainQemuAgentCommandWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if result == nil {
		return "", makeError(&err)
	}

	rstring := ( /*line :151:13*/_Cfunc_GoString /*line :151:22*/)(result)
	func() { _cgo0 := /*line :152:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :152:32*/_Cfunc_free(_cgo0); }()
	return rstring, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virDomainQemuAttach
func (c *Connect) DomainQemuAttach(pid uint32, flags uint32) (*Domain, error) {
	var err  /*line :158:10*/_Ctype_virError /*line :158:20*/
	ptr := func() _Ctype_virDomainPtr{ _cgo0 := /*line :159:38*/c.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :159:51*/(pid); var _cgo2 _Ctype_uint = _Ctype_uint /*line :159:64*/(flags); _cgoBase3 := /*line :159:73*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :159:78*/_Cfunc_virDomainQemuAttachWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &Domain{ptr: ptr}, nil
}

type DomainQemuMonitorEvent struct {
	Event   string
	Seconds int64
	Micros  uint
	Details string
}

type DomainQemuMonitorEventCallback func(c *Connect, d *Domain, event *DomainQemuMonitorEvent)

//export domainQemuMonitorEventCallback
func domainQemuMonitorEventCallback(c  /*line :176:39*/_Ctype_virConnectPtr /*line :176:54*/, d  /*line :176:58*/_Ctype_virDomainPtr /*line :176:72*/,
	event * /*line :177:9*/_Ctype_char /*line :177:15*/, seconds  /*line :177:25*/_Ctype_longlong /*line :177:35*/, micros  /*line :177:44*/_Ctype_uint /*line :177:50*/, details * /*line :177:61*/_Ctype_char /*line :177:67*/, goCallbackId int) {

	domain := &Domain{ptr: d}
	connection := &Connect{ptr: c}

	eventDetails := &DomainQemuMonitorEvent{
		Event:   ( /*line :183:12*/_Cfunc_GoString /*line :183:21*/)(event),
		Seconds: int64(seconds),
		Micros:  uint(micros),
		Details: ( /*line :186:12*/_Cfunc_GoString /*line :186:21*/)(details),
	}

	callbackFunc := getCallbackId(goCallbackId)
	callback, ok := callbackFunc.(DomainQemuMonitorEventCallback)
	if !ok {
		panic("Inappropriate callback type called")
	}
	callback(connection, domain, eventDetails)

}

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virConnectDomainQemuMonitorEventRegister
func (c *Connect) DomainQemuMonitorEventRegister(dom *Domain, event string, callback DomainQemuMonitorEventCallback, flags DomainQemuMonitorEventFlags) (int, error) {
	cEvent := ( /*line :200:12*/_Cfunc_CString /*line :200:20*/)(event)
	defer func() func() { _cgo0 := /*line :201:15*/unsafe.Pointer(cEvent); return func() { _cgoCheckPointer(_cgo0, nil); /*line :201:38*/_Cfunc_free(_cgo0); }}()()
	goCallBackId := registerCallbackId(callback)

	var cdom  /*line :204:11*/_Ctype_virDomainPtr /*line :204:25*/
	if dom != nil {
		cdom = dom.ptr
	}
	var err  /*line :208:10*/_Ctype_virError /*line :208:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :209:58*/c.ptr; _cgo1 := /*line :209:65*/cdom; var _cgo2 *_Ctype_char = /*line :210:3*/cEvent; var _cgo3 _Ctype_long = _Ctype_long /*line :211:9*/(goCallBackId); var _cgo4 _Ctype_uint = _Ctype_uint /*line :212:9*/(flags); _cgoBase5 := /*line :212:18*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :212:23*/_Cfunc_virConnectDomainQemuMonitorEventRegisterHelper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	if ret < 0 {
		freeCallbackId(goCallBackId)
		return 0, makeError(&err)
	}
	return int(ret), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-qemu.html#virConnectDomainQemuMonitorEventDeregister
func (c *Connect) DomainQemuEventDeregister(callbackId int) error {
	// Deregister the callback
	var err  /*line :223:10*/_Ctype_virError /*line :223:20*/
	ret := int(func() _Ctype_int{ _cgo0 := /*line :224:65*/c.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :224:77*/(callbackId); _cgoBase2 := /*line :224:91*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :224:96*/_Cfunc_virConnectDomainQemuMonitorEventDeregisterWrapper(_cgo0, _cgo1, _cgo2); }())
	if ret < 0 {
		return makeError(&err)
	}
	return nil
}
