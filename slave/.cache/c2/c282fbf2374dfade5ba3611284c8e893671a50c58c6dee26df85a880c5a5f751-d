// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/domain_snapshot.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"reflect"
	"unsafe"
)

type DomainSnapshotCreateFlags uint

const (
	DOMAIN_SNAPSHOT_CREATE_REDEFINE    = DomainSnapshotCreateFlags(( /*line :46:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE /*line :46:101*/))
	DOMAIN_SNAPSHOT_CREATE_CURRENT     = DomainSnapshotCreateFlags(( /*line :47:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT /*line :47:100*/))
	DOMAIN_SNAPSHOT_CREATE_NO_METADATA = DomainSnapshotCreateFlags(( /*line :48:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA /*line :48:104*/))
	DOMAIN_SNAPSHOT_CREATE_HALT        = DomainSnapshotCreateFlags(( /*line :49:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_HALT /*line :49:97*/))
	DOMAIN_SNAPSHOT_CREATE_DISK_ONLY   = DomainSnapshotCreateFlags(( /*line :50:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY /*line :50:102*/))
	DOMAIN_SNAPSHOT_CREATE_REUSE_EXT   = DomainSnapshotCreateFlags(( /*line :51:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT /*line :51:102*/))
	DOMAIN_SNAPSHOT_CREATE_QUIESCE     = DomainSnapshotCreateFlags(( /*line :52:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE /*line :52:100*/))
	DOMAIN_SNAPSHOT_CREATE_ATOMIC      = DomainSnapshotCreateFlags(( /*line :53:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC /*line :53:99*/))
	DOMAIN_SNAPSHOT_CREATE_LIVE        = DomainSnapshotCreateFlags(( /*line :54:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_LIVE /*line :54:97*/))
	DOMAIN_SNAPSHOT_CREATE_VALIDATE    = DomainSnapshotCreateFlags(( /*line :55:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE /*line :55:101*/))
)

type DomainSnapshotListFlags uint

const (
	DOMAIN_SNAPSHOT_LIST_ROOTS       = DomainSnapshotListFlags(( /*line :61:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_ROOTS /*line :61:92*/))
	DOMAIN_SNAPSHOT_LIST_DESCENDANTS = DomainSnapshotListFlags(( /*line :62:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS /*line :62:98*/))
	DOMAIN_SNAPSHOT_LIST_LEAVES      = DomainSnapshotListFlags(( /*line :63:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_LEAVES /*line :63:93*/))
	DOMAIN_SNAPSHOT_LIST_NO_LEAVES   = DomainSnapshotListFlags(( /*line :64:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES /*line :64:96*/))
	DOMAIN_SNAPSHOT_LIST_METADATA    = DomainSnapshotListFlags(( /*line :65:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_METADATA /*line :65:95*/))
	DOMAIN_SNAPSHOT_LIST_NO_METADATA = DomainSnapshotListFlags(( /*line :66:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA /*line :66:98*/))
	DOMAIN_SNAPSHOT_LIST_INACTIVE    = DomainSnapshotListFlags(( /*line :67:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE /*line :67:95*/))
	DOMAIN_SNAPSHOT_LIST_ACTIVE      = DomainSnapshotListFlags(( /*line :68:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE /*line :68:93*/))
	DOMAIN_SNAPSHOT_LIST_DISK_ONLY   = DomainSnapshotListFlags(( /*line :69:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY /*line :69:96*/))
	DOMAIN_SNAPSHOT_LIST_INTERNAL    = DomainSnapshotListFlags(( /*line :70:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL /*line :70:95*/))
	DOMAIN_SNAPSHOT_LIST_EXTERNAL    = DomainSnapshotListFlags(( /*line :71:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL /*line :71:95*/))
	DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL = DomainSnapshotListFlags(( /*line :72:61*/_Ciconst_VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL /*line :72:98*/))
)

type DomainSnapshotRevertFlags uint

const (
	DOMAIN_SNAPSHOT_REVERT_RUNNING     = DomainSnapshotRevertFlags(( /*line :78:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING /*line :78:100*/))
	DOMAIN_SNAPSHOT_REVERT_PAUSED      = DomainSnapshotRevertFlags(( /*line :79:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED /*line :79:99*/))
	DOMAIN_SNAPSHOT_REVERT_FORCE       = DomainSnapshotRevertFlags(( /*line :80:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_REVERT_FORCE /*line :80:98*/))
	DOMAIN_SNAPSHOT_REVERT_RESET_NVRAM = DomainSnapshotRevertFlags(( /*line :81:65*/_Ciconst_VIR_DOMAIN_SNAPSHOT_REVERT_RESET_NVRAM /*line :81:104*/))
)

type DomainSnapshotDeleteFlags uint

const (
	DOMAIN_SNAPSHOT_DELETE_CHILDREN      = DomainSnapshotDeleteFlags(( /*line :87:67*/_Ciconst_VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN /*line :87:103*/))
	DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY = DomainSnapshotDeleteFlags(( /*line :88:67*/_Ciconst_VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY /*line :88:108*/))
	DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY = DomainSnapshotDeleteFlags(( /*line :89:67*/_Ciconst_VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY /*line :89:108*/))
)

type DomainSnapshotXMLFlags uint

const (
	DOMAIN_SNAPSHOT_XML_SECURE = DomainSnapshotXMLFlags(( /*line :95:54*/_Ciconst_VIR_DOMAIN_SNAPSHOT_XML_SECURE /*line :95:85*/))
)

type DomainSnapshot struct {
	ptr  /*line :99:6*/_Ctype_virDomainSnapshotPtr /*line :99:28*/
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotFree
func (s *DomainSnapshot) Free() error {
	var err  /*line :104:10*/_Ctype_virError /*line :104:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :105:40*/s.ptr; _cgoBase1 := /*line :105:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :105:52*/_Cfunc_virDomainSnapshotFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotRef
func (c *DomainSnapshot) Ref() error {
	var err  /*line :114:10*/_Ctype_virError /*line :114:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :115:39*/c.ptr; _cgoBase1 := /*line :115:46*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :115:51*/_Cfunc_virDomainSnapshotRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotDelete
func (s *DomainSnapshot) Delete(flags DomainSnapshotDeleteFlags) error {
	var err  /*line :124:10*/_Ctype_virError /*line :124:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :125:45*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :125:58*/(flags); _cgoBase2 := /*line :125:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :125:72*/_Cfunc_virDomainSnapshotDeleteWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainRevertToSnapshot
func (s *DomainSnapshot) RevertToSnapshot(flags DomainSnapshotRevertFlags) error {
	var err  /*line :134:10*/_Ctype_virError /*line :134:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :135:47*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :135:60*/(flags); _cgoBase2 := /*line :135:69*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :135:74*/_Cfunc_virDomainRevertToSnapshotWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotIsCurrent
func (s *DomainSnapshot) IsCurrent(flags uint32) (bool, error) {
	var err  /*line :144:10*/_Ctype_virError /*line :144:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :145:48*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :145:61*/(flags); _cgoBase2 := /*line :145:70*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :145:75*/_Cfunc_virDomainSnapshotIsCurrentWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotHasMetadata
func (s *DomainSnapshot) HasMetadata(flags uint32) (bool, error) {
	var err  /*line :157:10*/_Ctype_virError /*line :157:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :158:50*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :158:63*/(flags); _cgoBase2 := /*line :158:72*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :158:77*/_Cfunc_virDomainSnapshotHasMetadataWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return false, makeError(&err)
	}
	if result == 1 {
		return true, nil
	}
	return false, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotGetXMLDesc
func (s *DomainSnapshot) GetXMLDesc(flags DomainSnapshotXMLFlags) (string, error) {
	var err  /*line :170:10*/_Ctype_virError /*line :170:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :171:49*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :171:62*/(flags); _cgoBase2 := /*line :171:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :171:76*/_Cfunc_virDomainSnapshotGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :175:9*/_Cfunc_GoString /*line :175:18*/)(result)
	func() { _cgo0 := /*line :176:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :176:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotGetName
func (s *DomainSnapshot) GetName() (string, error) {
	var err  /*line :182:10*/_Ctype_virError /*line :182:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :183:44*/s.ptr; _cgoBase1 := /*line :183:51*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :183:56*/_Cfunc_virDomainSnapshotGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :187:9*/_Cfunc_GoString /*line :187:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotGetParent
func (s *DomainSnapshot) GetParent(flags uint32) (*DomainSnapshot, error) {
	var err  /*line :192:10*/_Ctype_virError /*line :192:20*/
	ptr := func() _Ctype_virDomainSnapshotPtr{ _cgo0 := /*line :193:45*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :193:58*/(flags); _cgoBase2 := /*line :193:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :193:72*/_Cfunc_virDomainSnapshotGetParentWrapper(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil, makeError(&err)
	}
	return &DomainSnapshot{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotNumChildren
func (s *DomainSnapshot) NumChildren(flags DomainSnapshotListFlags) (int, error) {
	var err  /*line :202:10*/_Ctype_virError /*line :202:20*/
	result := int(func() _Ctype_int{ _cgo0 := /*line :203:54*/s.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :203:67*/(flags); _cgoBase2 := /*line :203:76*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :203:81*/_Cfunc_virDomainSnapshotNumChildrenWrapper(_cgo0, _cgo1, _cgo2); }())
	if result == -1 {
		return 0, makeError(&err)
	}
	return result, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotListChildrenNames
func (s *DomainSnapshot) ListChildrenNames(flags DomainSnapshotListFlags) ([]string, error) {
	const maxNames = 1024
	var names [maxNames](* /*line :213:24*/_Ctype_char /*line :213:30*/)
	namesPtr := unsafe.Pointer(&names)
	var err  /*line :215:10*/_Ctype_virError /*line :215:20*/
	numNames := func() _Ctype_int{ _cgo0 := /*line :217:3*/s.ptr; _cgo1 := /*line :218:3*/(**_Ctype_char /*line :218:12*/)(namesPtr); var _cgo2 _Ctype_int = /*line :219:3*/maxNames; var _cgo3 _Ctype_uint = _Ctype_uint /*line :219:19*/(flags); _cgoBase4 := /*line :219:28*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :219:33*/_Cfunc_virDomainSnapshotListChildrenNamesWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if numNames == -1 {
		return nil, makeError(&err)
	}
	goNames := make([]string, numNames)
	for k := 0; k < int(numNames); k++ {
		goNames[k] = ( /*line :225:16*/_Cfunc_GoString /*line :225:25*/)(names[k])
		func() { _cgo0 := /*line :226:10*/unsafe.Pointer(names[k]); _cgoCheckPointer(_cgo0, nil); /*line :226:35*/_Cfunc_free(_cgo0); }()
	}
	return goNames, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-domain-snapshot.html#virDomainSnapshotListAllChildren
func (d *DomainSnapshot) ListAllChildren(flags DomainSnapshotListFlags) ([]DomainSnapshot, error) {
	var cList * /*line :233:13*/_Ctype_virDomainSnapshotPtr /*line :233:35*/
	var err  /*line :234:10*/_Ctype_virError /*line :234:20*/
	numVols := func() _Ctype_int{ _cgo0 := /*line :235:55*/d.ptr; _cgoBase1 := /*line :235:89*/&cList; _cgo1 := /*line :235:62*/(**_Ctype_virDomainSnapshotPtr /*line :235:87*/)(_cgoBase1); var _cgo2 _Ctype_uint = _Ctype_uint /*line :235:104*/(flags); _cgoBase3 := /*line :235:113*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :235:118*/_Cfunc_virDomainSnapshotListAllChildrenWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if numVols == -1 {
		return nil, makeError(&err)
	}
	hdr := reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(cList)),
		Len:  int(numVols),
		Cap:  int(numVols),
	}
	var pools []DomainSnapshot
	slice := *(*[] /*line :245:16*/_Ctype_virDomainSnapshotPtr /*line :245:38*/)(unsafe.Pointer(&hdr))
	for _, ptr := range slice {
		pools = append(pools, DomainSnapshot{ptr})
	}
	func() { _cgo0 := /*line :249:9*/unsafe.Pointer(cList); _cgoCheckPointer(_cgo0, nil); /*line :249:31*/_Cfunc_free(_cgo0); }()
	return pools, nil
}
