// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/storage_volume.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type StorageVolCreateFlags uint

const (
	STORAGE_VOL_CREATE_PREALLOC_METADATA = StorageVolCreateFlags(( /*line :45:63*/_Ciconst_VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA /*line :45:104*/))
	STORAGE_VOL_CREATE_REFLINK           = StorageVolCreateFlags(( /*line :46:63*/_Ciconst_VIR_STORAGE_VOL_CREATE_REFLINK /*line :46:94*/))
	STORAGE_VOL_CREATE_VALIDATE          = StorageVolCreateFlags(( /*line :47:63*/_Ciconst_VIR_STORAGE_VOL_CREATE_VALIDATE /*line :47:95*/))
)

type StorageVolDeleteFlags uint

const (
	STORAGE_VOL_DELETE_NORMAL         = StorageVolDeleteFlags(( /*line :53:60*/_Ciconst_VIR_STORAGE_VOL_DELETE_NORMAL /*line :53:90*/))         // Delete metadata only (fast)
	STORAGE_VOL_DELETE_ZEROED         = StorageVolDeleteFlags(( /*line :54:60*/_Ciconst_VIR_STORAGE_VOL_DELETE_ZEROED /*line :54:90*/))         // Clear all data to zeros (slow)
	STORAGE_VOL_DELETE_WITH_SNAPSHOTS = StorageVolDeleteFlags(( /*line :55:60*/_Ciconst_VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS /*line :55:98*/)) // Force removal of volume, even if in use
)

type StorageVolResizeFlags uint

const (
	STORAGE_VOL_RESIZE_ALLOCATE = StorageVolResizeFlags(( /*line :61:54*/_Ciconst_VIR_STORAGE_VOL_RESIZE_ALLOCATE /*line :61:86*/)) // force allocation of new size
	STORAGE_VOL_RESIZE_DELTA    = StorageVolResizeFlags(( /*line :62:54*/_Ciconst_VIR_STORAGE_VOL_RESIZE_DELTA /*line :62:83*/))    // size is relative to current
	STORAGE_VOL_RESIZE_SHRINK   = StorageVolResizeFlags(( /*line :63:54*/_Ciconst_VIR_STORAGE_VOL_RESIZE_SHRINK /*line :63:84*/))   // allow decrease in capacity
)

type StorageVolType int

const (
	STORAGE_VOL_FILE    = StorageVolType(( /*line :69:39*/_Ciconst_VIR_STORAGE_VOL_FILE /*line :69:60*/))    // Regular file based volumes
	STORAGE_VOL_BLOCK   = StorageVolType(( /*line :70:39*/_Ciconst_VIR_STORAGE_VOL_BLOCK /*line :70:61*/))   // Block based volumes
	STORAGE_VOL_DIR     = StorageVolType(( /*line :71:39*/_Ciconst_VIR_STORAGE_VOL_DIR /*line :71:59*/))     // Directory-passthrough based volume
	STORAGE_VOL_NETWORK = StorageVolType(( /*line :72:39*/_Ciconst_VIR_STORAGE_VOL_NETWORK /*line :72:63*/)) //Network volumes like RBD (RADOS Block Device)
	STORAGE_VOL_NETDIR  = StorageVolType(( /*line :73:39*/_Ciconst_VIR_STORAGE_VOL_NETDIR /*line :73:62*/))  // Network accessible directory that can contain other network volumes
	STORAGE_VOL_PLOOP   = StorageVolType(( /*line :74:39*/_Ciconst_VIR_STORAGE_VOL_PLOOP /*line :74:61*/))   // Ploop directory based volumes
)

type StorageVolWipeAlgorithm int

const (
	STORAGE_VOL_WIPE_ALG_ZERO       = StorageVolWipeAlgorithm(( /*line :80:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_ZERO /*line :80:90*/))       // 1-pass, all zeroes
	STORAGE_VOL_WIPE_ALG_NNSA       = StorageVolWipeAlgorithm(( /*line :81:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_NNSA /*line :81:90*/))       // 4-pass NNSA Policy Letter NAP-14.1-C (XVI-8)
	STORAGE_VOL_WIPE_ALG_DOD        = StorageVolWipeAlgorithm(( /*line :82:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_DOD /*line :82:89*/))        // 4-pass DoD 5220.22-M section 8-306 procedure
	STORAGE_VOL_WIPE_ALG_BSI        = StorageVolWipeAlgorithm(( /*line :83:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_BSI /*line :83:89*/))        // 9-pass method recommended by the German Center of Security in Information Technologies
	STORAGE_VOL_WIPE_ALG_GUTMANN    = StorageVolWipeAlgorithm(( /*line :84:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_GUTMANN /*line :84:93*/))    // The canonical 35-pass sequence
	STORAGE_VOL_WIPE_ALG_SCHNEIER   = StorageVolWipeAlgorithm(( /*line :85:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER /*line :85:94*/))   // 7-pass method described by Bruce Schneier in "Applied Cryptography" (1996)
	STORAGE_VOL_WIPE_ALG_PFITZNER7  = StorageVolWipeAlgorithm(( /*line :86:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7 /*line :86:95*/))  // 7-pass random
	STORAGE_VOL_WIPE_ALG_PFITZNER33 = StorageVolWipeAlgorithm(( /*line :87:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33 /*line :87:96*/)) // 33-pass random
	STORAGE_VOL_WIPE_ALG_RANDOM     = StorageVolWipeAlgorithm(( /*line :88:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_RANDOM /*line :88:92*/))     // 1-pass random
	STORAGE_VOL_WIPE_ALG_TRIM       = StorageVolWipeAlgorithm(( /*line :89:60*/_Ciconst_VIR_STORAGE_VOL_WIPE_ALG_TRIM /*line :89:90*/))       // Trim the underlying storage
)

type StorageXMLFlags uint

const (
	STORAGE_XML_INACTIVE = StorageXMLFlags(( /*line :95:41*/_Ciconst_VIR_STORAGE_XML_INACTIVE /*line :95:66*/))
)

type StorageVolInfoFlags uint

const (
	STORAGE_VOL_USE_ALLOCATION = StorageVolInfoFlags(( /*line :101:51*/_Ciconst_VIR_STORAGE_VOL_USE_ALLOCATION /*line :101:82*/))
	STORAGE_VOL_GET_PHYSICAL   = StorageVolInfoFlags(( /*line :102:51*/_Ciconst_VIR_STORAGE_VOL_GET_PHYSICAL /*line :102:80*/))
)

type StorageVolUploadFlags uint

const (
	STORAGE_VOL_UPLOAD_SPARSE_STREAM = StorageVolUploadFlags(( /*line :108:59*/_Ciconst_VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM /*line :108:96*/))
)

type StorageVolDownloadFlags uint

const (
	STORAGE_VOL_DOWNLOAD_SPARSE_STREAM = StorageVolDownloadFlags(( /*line :114:63*/_Ciconst_VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM /*line :114:102*/))
)

type StorageVol struct {
	ptr  /*line :118:6*/_Ctype_virStorageVolPtr /*line :118:24*/
}

type StorageVolInfo struct {
	Type       StorageVolType
	Capacity   uint64
	Allocation uint64
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolDelete
func (v *StorageVol) Delete(flags StorageVolDeleteFlags) error {
	var err  /*line :129:10*/_Ctype_virError /*line :129:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :130:41*/v.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :130:54*/(flags); _cgoBase2 := /*line :130:63*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :130:68*/_Cfunc_virStorageVolDeleteWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolFree
func (v *StorageVol) Free() error {
	var err  /*line :139:10*/_Ctype_virError /*line :139:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :140:36*/v.ptr; _cgoBase1 := /*line :140:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :140:48*/_Cfunc_virStorageVolFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolRef
func (c *StorageVol) Ref() error {
	var err  /*line :149:10*/_Ctype_virError /*line :149:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :150:35*/c.ptr; _cgoBase1 := /*line :150:42*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :150:47*/_Cfunc_virStorageVolRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetInfo
func (v *StorageVol) GetInfo() (*StorageVolInfo, error) {
	var cinfo  /*line :159:12*/_Ctype_virStorageVolInfo /*line :159:31*/
	var err  /*line :160:10*/_Ctype_virError /*line :160:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :161:42*/v.ptr; var _cgo1 *_Ctype_struct__virStorageVolInfo = /*line :161:49*/&cinfo; _cgoBase2 := /*line :161:57*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :161:62*/_Cfunc_virStorageVolGetInfoWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return nil, makeError(&err)
	}
	return &StorageVolInfo{
		Type:       StorageVolType(cinfo._type),
		Capacity:   uint64(cinfo.capacity),
		Allocation: uint64(cinfo.allocation),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetInfoFlags
func (v *StorageVol) GetInfoFlags(flags StorageVolInfoFlags) (*StorageVolInfo, error) {
	var cinfo  /*line :174:12*/_Ctype_virStorageVolInfo /*line :174:31*/
	var err  /*line :175:10*/_Ctype_virError /*line :175:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :176:47*/v.ptr; var _cgo1 *_Ctype_struct__virStorageVolInfo = /*line :176:54*/&cinfo; var _cgo2 _Ctype_uint = _Ctype_uint /*line :176:68*/(flags); _cgoBase3 := /*line :176:77*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :176:82*/_Cfunc_virStorageVolGetInfoFlagsWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return nil, makeError(&err)
	}
	return &StorageVolInfo{
		Type:       StorageVolType(cinfo._type),
		Capacity:   uint64(cinfo.capacity),
		Allocation: uint64(cinfo.allocation),
	}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetKey
func (v *StorageVol) GetKey() (string, error) {
	var err  /*line :189:10*/_Ctype_virError /*line :189:20*/
	key := func() *_Ctype_char{ _cgo0 := /*line :190:38*/v.ptr; _cgoBase1 := /*line :190:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :190:50*/_Cfunc_virStorageVolGetKeyWrapper(_cgo0, _cgo1); }()
	if key == nil {
		return "", makeError(&err)
	}
	return ( /*line :194:9*/_Cfunc_GoString /*line :194:18*/)(key), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetName
func (v *StorageVol) GetName() (string, error) {
	var err  /*line :199:10*/_Ctype_virError /*line :199:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :200:40*/v.ptr; _cgoBase1 := /*line :200:47*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :200:52*/_Cfunc_virStorageVolGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :204:9*/_Cfunc_GoString /*line :204:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetPath
func (v *StorageVol) GetPath() (string, error) {
	var err  /*line :209:10*/_Ctype_virError /*line :209:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :210:42*/v.ptr; _cgoBase1 := /*line :210:49*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :210:54*/_Cfunc_virStorageVolGetPathWrapper(_cgo0, _cgo1); }()
	if result == nil {
		return "", makeError(&err)
	}
	path := ( /*line :214:10*/_Cfunc_GoString /*line :214:19*/)(result)
	func() { _cgo0 := /*line :215:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :215:32*/_Cfunc_free(_cgo0); }()
	return path, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolGetXMLDesc
func (v *StorageVol) GetXMLDesc(flags uint32) (string, error) {
	var err  /*line :221:10*/_Ctype_virError /*line :221:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :222:45*/v.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :222:58*/(flags); _cgoBase2 := /*line :222:67*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :222:72*/_Cfunc_virStorageVolGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :226:9*/_Cfunc_GoString /*line :226:18*/)(result)
	func() { _cgo0 := /*line :227:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :227:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolResize
func (v *StorageVol) Resize(capacity uint64, flags StorageVolResizeFlags) error {
	var err  /*line :233:10*/_Ctype_virError /*line :233:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :234:41*/v.ptr; var _cgo1 _Ctype_ulonglong = _Ctype_ulonglong /*line :234:59*/(capacity); var _cgo2 _Ctype_uint = _Ctype_uint /*line :234:77*/(flags); _cgoBase3 := /*line :234:86*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :234:91*/_Cfunc_virStorageVolResizeWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolWipe
func (v *StorageVol) Wipe(flags uint32) error {
	var err  /*line :243:10*/_Ctype_virError /*line :243:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :244:39*/v.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :244:52*/(flags); _cgoBase2 := /*line :244:61*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :244:66*/_Cfunc_virStorageVolWipeWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolWipePattern
func (v *StorageVol) WipePattern(algorithm StorageVolWipeAlgorithm, flags uint32) error {
	var err  /*line :253:10*/_Ctype_virError /*line :253:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :254:46*/v.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :254:59*/(algorithm); var _cgo2 _Ctype_uint = _Ctype_uint /*line :254:78*/(flags); _cgoBase3 := /*line :254:87*/&err; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :254:92*/_Cfunc_virStorageVolWipePatternWrapper(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolUpload
func (v *StorageVol) Upload(stream *Stream, offset, length uint64, flags StorageVolUploadFlags) error {
	var err  /*line :263:10*/_Ctype_virError /*line :263:20*/
	if func() _Ctype_int{ _cgo0 := /*line :264:34*/v.ptr; _cgo1 := /*line :264:41*/stream.ptr; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :264:64*/(offset); var _cgo3 _Ctype_ulonglong = _Ctype_ulonglong /*line :265:14*/(length); var _cgo4 _Ctype_uint = _Ctype_uint /*line :265:30*/(flags); _cgoBase5 := /*line :265:39*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :265:44*/_Cfunc_virStorageVolUploadWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }() == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStorageVolDownload
func (v *StorageVol) Download(stream *Stream, offset, length uint64, flags StorageVolDownloadFlags) error {
	var err  /*line :273:10*/_Ctype_virError /*line :273:20*/
	if func() _Ctype_int{ _cgo0 := /*line :274:36*/v.ptr; _cgo1 := /*line :274:43*/stream.ptr; var _cgo2 _Ctype_ulonglong = _Ctype_ulonglong /*line :274:66*/(offset); var _cgo3 _Ctype_ulonglong = _Ctype_ulonglong /*line :275:14*/(length); var _cgo4 _Ctype_uint = _Ctype_uint /*line :275:30*/(flags); _cgoBase5 := /*line :275:39*/&err; _cgo5 := _cgoBase5; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase5, 0 == 0); return /*line :275:44*/_Cfunc_virStorageVolDownloadWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }() == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-storage.html#virStoragePoolLookupByVolume
func (v *StorageVol) LookupPoolByVolume() (*StoragePool, error) {
	var err  /*line :283:10*/_Ctype_virError /*line :283:20*/
	poolPtr := func() _Ctype_virStoragePoolPtr{ _cgo0 := /*line :284:51*/v.ptr; _cgoBase1 := /*line :284:58*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :284:63*/_Cfunc_virStoragePoolLookupByVolumeWrapper(_cgo0, _cgo1); }()
	if poolPtr == nil {
		return nil, makeError(&err)
	}
	return &StoragePool{ptr: poolPtr}, nil
}
