// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/nwfilter.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (c) 2013 Alex Zorin
 * Copyright (C) 2016 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type NWFilterDefineFlags uint

const (
	NWFILTER_DEFINE_VALIDATE = NWFilterDefineFlags(( /*line :45:49*/_Ciconst_VIR_NWFILTER_DEFINE_VALIDATE /*line :45:78*/))
)

type NWFilter struct {
	ptr  /*line :49:6*/_Ctype_virNWFilterPtr /*line :49:22*/
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterFree
func (f *NWFilter) Free() error {
	var err  /*line :54:10*/_Ctype_virError /*line :54:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :55:34*/f.ptr; _cgoBase1 := /*line :55:41*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :55:46*/_Cfunc_virNWFilterFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterRef
func (c *NWFilter) Ref() error {
	var err  /*line :64:10*/_Ctype_virError /*line :64:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :65:33*/c.ptr; _cgoBase1 := /*line :65:40*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :65:45*/_Cfunc_virNWFilterRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterGetName
func (f *NWFilter) GetName() (string, error) {
	var err  /*line :74:10*/_Ctype_virError /*line :74:20*/
	name := func() *_Ctype_char{ _cgo0 := /*line :75:38*/f.ptr; _cgoBase1 := /*line :75:45*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :75:50*/_Cfunc_virNWFilterGetNameWrapper(_cgo0, _cgo1); }()
	if name == nil {
		return "", makeError(&err)
	}
	return ( /*line :79:9*/_Cfunc_GoString /*line :79:18*/)(name), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterUndefine
func (f *NWFilter) Undefine() error {
	var err  /*line :84:10*/_Ctype_virError /*line :84:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :85:41*/f.ptr; _cgoBase1 := /*line :85:48*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :85:53*/_Cfunc_virNWFilterUndefineWrapper(_cgo0, _cgo1); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterGetUUID
func (f *NWFilter) GetUUID() ([]byte, error) {
	var cUuid [( /*line :94:13*/_Ciconst_VIR_UUID_BUFLEN /*line :94:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :96:10*/_Ctype_virError /*line :96:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :97:40*/f.ptr; var _cgo1 *_Ctype_uchar = /*line :97:47*/(*_Ctype_uchar /*line :97:56*/)(cuidPtr); _cgoBase2 := /*line :97:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :97:73*/_Cfunc_virNWFilterGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :101:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :101:28*/_Ciconst_VIR_UUID_BUFLEN /*line :101:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :101:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterGetUUIDString
func (f *NWFilter) GetUUIDString() (string, error) {
	var cUuid [( /*line :106:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :106:36*/)]( /*line :106:39*/_Ctype_char /*line :106:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :108:10*/_Ctype_virError /*line :108:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :109:46*/f.ptr; var _cgo1 *_Ctype_char = /*line :109:53*/(*_Ctype_char /*line :109:61*/)(cuidPtr); _cgoBase2 := /*line :109:73*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :109:78*/_Cfunc_virNWFilterGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :113:9*/_Cfunc_GoString /*line :113:18*/)((* /*line :113:22*/_Ctype_char /*line :113:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-nwfilter.html#virNWFilterGetXMLDesc
func (f *NWFilter) GetXMLDesc(flags uint32) (string, error) {
	var err  /*line :118:10*/_Ctype_virError /*line :118:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :119:43*/f.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :119:56*/(flags); _cgoBase2 := /*line :119:65*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :119:70*/_Cfunc_virNWFilterGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :123:9*/_Cfunc_GoString /*line :123:18*/)(result)
	func() { _cgo0 := /*line :124:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :124:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}
