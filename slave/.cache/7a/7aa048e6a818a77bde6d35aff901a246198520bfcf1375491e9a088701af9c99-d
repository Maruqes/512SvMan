// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/marques/.gvm/pkgsets/go1.25.0/global/pkg/mod/libvirt.org/go/libvirt@v1.11006.0/network_port.go:1:1
/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (C) 2019 Red Hat, Inc.
 *
 */

package libvirt

/*
#cgo !libvirt_dlopen pkg-config: libvirt
#cgo libvirt_dlopen LDFLAGS: -ldl
#cgo libvirt_dlopen CFLAGS: -DLIBVIRT_DLOPEN
#include <stdlib.h>
#include "libvirt_generated.h"
*/
import _ "unsafe"

import (
	"unsafe"
)

type NetworkPortCreateFlags uint

const (
	NETWORK_PORT_CREATE_RECLAIM  = NetworkPortCreateFlags(( /*line :44:56*/_Ciconst_VIR_NETWORK_PORT_CREATE_RECLAIM /*line :44:88*/))
	NETWORK_PORT_CREATE_VALIDATE = NetworkPortCreateFlags(( /*line :45:56*/_Ciconst_VIR_NETWORK_PORT_CREATE_VALIDATE /*line :45:89*/))
)

type NetworkPort struct {
	ptr  /*line :49:6*/_Ctype_virNetworkPortPtr /*line :49:25*/
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortFree
func (n *NetworkPort) Free() error {
	var err  /*line :54:10*/_Ctype_virError /*line :54:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :55:37*/n.ptr; _cgoBase1 := /*line :55:44*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :55:49*/_Cfunc_virNetworkPortFreeWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortRef
func (c *NetworkPort) Ref() error {
	var err  /*line :64:10*/_Ctype_virError /*line :64:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :65:36*/c.ptr; _cgoBase1 := /*line :65:43*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :65:48*/_Cfunc_virNetworkPortRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortGetNetwork
//
// Contrary to the native C API behaviour, the Go API will
// acquire a reference on the returned Network, which must
// be released by calling Free()
func (n *NetworkPort) GetNetwork() (*Network, error) {
	var err  /*line :78:10*/_Ctype_virError /*line :78:20*/
	ptr := func() _Ctype_virNetworkPtr{ _cgo0 := /*line :79:43*/n.ptr; _cgoBase1 := /*line :79:50*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :79:55*/_Cfunc_virNetworkPortGetNetworkWrapper(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil, makeError(&err)
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :84:32*/ptr; _cgoBase1 := /*line :84:37*/&err; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return /*line :84:42*/_Cfunc_virNetworkRefWrapper(_cgo0, _cgo1); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	return &Network{ptr: ptr}, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortGetUUID
func (n *NetworkPort) GetUUID() ([]byte, error) {
	var cUuid [( /*line :94:13*/_Ciconst_VIR_UUID_BUFLEN /*line :94:29*/)](byte)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :96:10*/_Ctype_virError /*line :96:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :97:43*/n.ptr; var _cgo1 *_Ctype_uchar = /*line :97:50*/(*_Ctype_uchar /*line :97:59*/)(cuidPtr); _cgoBase2 := /*line :97:71*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :97:76*/_Cfunc_virNetworkPortGetUUIDWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return []byte{}, makeError(&err)
	}
	return func() []byte{ _cgo0 := /*line :101:19*/cuidPtr; var _cgo1 _Ctype_int = /*line :101:28*/_Ciconst_VIR_UUID_BUFLEN /*line :101:45*/; _cgoCheckPointer(_cgo0, nil); return /*line :101:46*/_Cfunc_GoBytes(_cgo0, _cgo1); }(), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortGetUUIDString
func (n *NetworkPort) GetUUIDString() (string, error) {
	var cUuid [( /*line :106:13*/_Ciconst_VIR_UUID_STRING_BUFLEN /*line :106:36*/)]( /*line :106:39*/_Ctype_char /*line :106:45*/)
	cuidPtr := unsafe.Pointer(&cUuid)
	var err  /*line :108:10*/_Ctype_virError /*line :108:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :109:49*/n.ptr; var _cgo1 *_Ctype_char = /*line :109:56*/(*_Ctype_char /*line :109:64*/)(cuidPtr); _cgoBase2 := /*line :109:76*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :109:81*/_Cfunc_virNetworkPortGetUUIDStringWrapper(_cgo0, _cgo1, _cgo2); }()
	if result != 0 {
		return "", makeError(&err)
	}
	return ( /*line :113:9*/_Cfunc_GoString /*line :113:18*/)((* /*line :113:22*/_Ctype_char /*line :113:28*/)(cuidPtr)), nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortDelete
func (n *NetworkPort) Delete(flags uint32) error {
	var err  /*line :118:10*/_Ctype_virError /*line :118:20*/
	result := func() _Ctype_int{ _cgo0 := /*line :119:42*/n.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :119:55*/(flags); _cgoBase2 := /*line :119:64*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :119:69*/_Cfunc_virNetworkPortDeleteWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == -1 {
		return makeError(&err)
	}
	return nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortGetXMLDesc
func (d *NetworkPort) GetXMLDesc(flags uint32) (string, error) {
	var err  /*line :128:10*/_Ctype_virError /*line :128:20*/
	result := func() *_Ctype_char{ _cgo0 := /*line :129:46*/d.ptr; var _cgo1 _Ctype_uint = _Ctype_uint /*line :129:59*/(flags); _cgoBase2 := /*line :129:68*/&err; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :129:73*/_Cfunc_virNetworkPortGetXMLDescWrapper(_cgo0, _cgo1, _cgo2); }()
	if result == nil {
		return "", makeError(&err)
	}
	xml := ( /*line :133:9*/_Cfunc_GoString /*line :133:18*/)(result)
	func() { _cgo0 := /*line :134:9*/unsafe.Pointer(result); _cgoCheckPointer(_cgo0, nil); /*line :134:32*/_Cfunc_free(_cgo0); }()
	return xml, nil
}

type NetworkPortParameters struct {
	BandwidthInAverageSet  bool
	BandwidthInAverage     uint
	BandwidthInPeakSet     bool
	BandwidthInPeak        uint
	BandwidthInBurstSet    bool
	BandwidthInBurst       uint
	BandwidthInFloorSet    bool
	BandwidthInFloor       uint
	BandwidthOutAverageSet bool
	BandwidthOutAverage    uint
	BandwidthOutPeakSet    bool
	BandwidthOutPeak       uint
	BandwidthOutBurstSet   bool
	BandwidthOutBurst      uint
}

func getNetworkPortParametersFieldInfo(params *NetworkPortParameters) map[string]typedParamsFieldInfo {
	return map[string]typedParamsFieldInfo{
		( /*line :157:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_IN_AVERAGE /*line :157:41*/): typedParamsFieldInfo{
			set: &params.BandwidthInAverageSet,
			ui:  &params.BandwidthInAverage,
		},
		( /*line :161:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_IN_PEAK /*line :161:38*/): typedParamsFieldInfo{
			set: &params.BandwidthInPeakSet,
			ui:  &params.BandwidthInPeak,
		},
		( /*line :165:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_IN_BURST /*line :165:39*/): typedParamsFieldInfo{
			set: &params.BandwidthInBurstSet,
			ui:  &params.BandwidthInBurst,
		},
		( /*line :169:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_IN_FLOOR /*line :169:39*/): typedParamsFieldInfo{
			set: &params.BandwidthInFloorSet,
			ui:  &params.BandwidthInFloor,
		},
		( /*line :173:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_OUT_AVERAGE /*line :173:42*/): typedParamsFieldInfo{
			set: &params.BandwidthOutAverageSet,
			ui:  &params.BandwidthOutAverage,
		},
		( /*line :177:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_OUT_PEAK /*line :177:39*/): typedParamsFieldInfo{
			set: &params.BandwidthOutPeakSet,
			ui:  &params.BandwidthOutPeak,
		},
		( /*line :181:3*/_Csconst_VIR_NETWORK_PORT_BANDWIDTH_OUT_BURST /*line :181:40*/): typedParamsFieldInfo{
			set: &params.BandwidthOutBurstSet,
			ui:  &params.BandwidthOutBurst,
		},
	}
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortGetParameters
func (d *NetworkPort) GetParameters(flags uint32) (*NetworkPortParameters, error) {
	params := &NetworkPortParameters{}
	info := getNetworkPortParametersFieldInfo(params)

	var cparams  /*line :193:14*/_Ctype_virTypedParameterPtr /*line :193:36*/
	var cnparams  /*line :194:15*/_Ctype_int /*line :194:20*/
	var err  /*line :195:10*/_Ctype_virError /*line :195:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :196:46*/d.ptr; _cgoBase1 := /*line :196:53*/&cparams; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_int = /*line :196:63*/&cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :196:80*/(flags); _cgoBase4 := /*line :196:89*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :196:94*/_Cfunc_virNetworkPortGetParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return nil, makeError(&err)
	}

	defer ( /*line :201:8*/_Cfunc_virTypedParamsFreeWrapper /*line :201:34*/)(cparams, cnparams)

	_, gerr := typedParamsUnpack(cparams, cnparams, info)
	if gerr != nil {
		return nil, gerr
	}

	return params, nil
}

// See also https://libvirt.org/html/libvirt-libvirt-network.html#virNetworkPortSetParameters
func (d *NetworkPort) SetParameters(params *NetworkPortParameters, flags uint32) error {
	info := getNetworkPortParametersFieldInfo(params)

	cparams, cnparams, gerr := typedParamsPackNew(info)
	if gerr != nil {
		return gerr
	}
	defer ( /*line :219:8*/_Cfunc_virTypedParamsFreeWrapper /*line :219:34*/)(cparams, cnparams)

	var err  /*line :221:10*/_Ctype_virError /*line :221:20*/
	ret := func() _Ctype_int{ _cgo0 := /*line :222:46*/d.ptr; var _cgo1 *_Ctype_struct__virTypedParameter = /*line :222:53*/cparams; var _cgo2 _Ctype_int = /*line :222:62*/cnparams; var _cgo3 _Ctype_uint = _Ctype_uint /*line :222:78*/(flags); _cgoBase4 := /*line :222:87*/&err; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return /*line :222:92*/_Cfunc_virNetworkPortSetParametersWrapper(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if ret == -1 {
		return makeError(&err)
	}

	return nil
}
